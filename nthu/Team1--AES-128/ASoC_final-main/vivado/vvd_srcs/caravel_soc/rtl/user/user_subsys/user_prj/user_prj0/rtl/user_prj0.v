// This code snippet was auto generated by xls2vlog.py from source file: ./user_project_wrapper.xlsx
// User: josh
// Date: Sep-22-23


module USER_PRJ0 #( parameter pUSER_PROJECT_SIDEBAND_WIDTH   = 5,
					parameter pADDR_WIDTH   = 12,
                   parameter pDATA_WIDTH   = 32
                 )
(
  output wire                        awready,
  output wire                        arready,
  output wire                        wready,
  output wire                        rvalid,
  output reg   [(pDATA_WIDTH-1) : 0] rdata,
  input  wire                        awvalid,
  input  wire                [11: 0] awaddr,
  input  wire                        arvalid,
  input  wire                [11: 0] araddr,
  input  wire                        wvalid,
  input  wire                 [3: 0] wstrb,
  input  wire  [(pDATA_WIDTH-1) : 0] wdata,
  input  wire                        rready,
  input  wire                        ss_tvalid,
  input  wire  [(pDATA_WIDTH-1) : 0] ss_tdata,
  input  wire                 [1: 0] ss_tuser,
    `ifdef USER_PROJECT_SIDEBAND_SUPPORT
	input  wire                 [pUSER_PROJECT_SIDEBAND_WIDTH-1: 0] ss_tupsb,
  `endif
  input  wire                 [3: 0] ss_tstrb,
  input  wire                 [3: 0] ss_tkeep,
  input  wire                        ss_tlast,
  input  wire                        sm_tready,
  output wire                        ss_tready,
  output wire                        sm_tvalid,
  output reg   [(pDATA_WIDTH-1) : 0] sm_tdata,
  output wire                 [2: 0] sm_tid,
  `ifdef USER_PROJECT_SIDEBAND_SUPPORT
	output  wire                 [pUSER_PROJECT_SIDEBAND_WIDTH-1: 0] sm_tupsb,
  `endif
  output wire                 [3: 0] sm_tstrb,
  output wire                 [3: 0] sm_tkeep,
  output wire                        sm_tlast,
  output wire                        low__pri_irq,
  output wire                        High_pri_req,
  output wire                [23: 0] la_data_o,
  input  wire                        axi_clk,
  input  wire                        axis_clk,
  input  wire                        axi_reset_n,
  input  wire                        axis_rst_n,
  input  wire                        user_clock2,
  input  wire                        uck2_rst_n
);

`ifdef USER_PROJECT_SIDEBAND_SUPPORT
	assign sm_tupsb      = 5'b0;
`endif
wire done;
reg reg_rst;
reg [31:0] key0, key1, key2, key3;
reg reg_done;
reg [31:0] reg_data_length, reg_data_idx;
reg [31:0] din0, din1, din2;
reg [1:0] ss_cnt, sm_cnt;

//write request
assign awready       = awvalid;
assign wready        = wvalid&awvalid;

//read request
assign arready       = arvalid;
assign rvalid        = rready&arvalid;

//din
wire din_vld, din_rdy;
assign din_vld = (ss_cnt==2'b11)?ss_tvalid:1'b0;
assign ss_tready = din_rdy;

//dout
wire dout_vld, dout_rdy;
wire [127:0] dout_dat;
assign dout_rdy = (sm_cnt==2'b11)?sm_tready:1'b0;
assign sm_tvalid = dout_vld;
assign sm_tlast = ((reg_data_idx+1)==reg_data_length)&sm_tready&sm_tvalid&(sm_cnt==2'b11);

always @(posedge axi_clk or negedge axi_reset_n) begin
  if(~axi_reset_n | reg_rst)begin
    ss_cnt <= 0;
    sm_cnt <= 0;
  end 
  else begin
    if(ss_tvalid & ss_tready & din_rdy)
      ss_cnt <= ss_cnt + 1;
    if(sm_tready & sm_tvalid & dout_vld)
      sm_cnt <= sm_cnt + 1;
  end
end

// write register
always @(posedge axi_clk or negedge axi_reset_n)  begin
  if(~axi_reset_n)begin
    reg_rst <= 0;
    reg_data_length <= 0;
    key0 <= 0;
    key1 <= 0;
    key2 <= 0;
    key3 <= 0;
  end 
  else if (awvalid & wvalid & wstrb) begin
    case (awaddr[11:2])
      10'h000: reg_rst <= wdata;
      10'h002: reg_data_length <= wdata;
      10'h004: key0 <= wdata;
      10'h005: key1 <= wdata;
      10'h006: key2 <= wdata;
      10'h007: key3 <= wdata;
    endcase
  end
end

always @(posedge axi_clk or negedge axi_reset_n) begin
  if(~axi_reset_n | reg_rst)begin
    din0 <= 0;
    din1 <= 0;
    din2 <= 0;
  end 
  else begin
    if(ss_cnt==2'b00) 
      din0 <= ss_tdata;
    if(ss_cnt==2'b01) 
      din1 <= ss_tdata;
    if(ss_cnt==2'b10) 
      din2 <= ss_tdata;
  end
end

always @(*) begin
  case (araddr[11:2])
    10'h000: rdata = reg_rst;
    10'h001: rdata = done;
    10'h002: rdata = reg_data_length;
    10'h004: rdata = key0;
    10'h005: rdata = key1;
    10'h006: rdata = key2;
    10'h007: rdata = key3;
  endcase
end

assign done = (reg_data_idx==reg_data_length)?1:0;

// reg_data_idx
always @(posedge axi_clk or negedge axi_reset_n)  begin
  if(~axi_reset_n | reg_rst)
    reg_data_idx <= 0;
  else
    if(sm_tvalid&&sm_tready&&(sm_cnt==2'b11)) reg_data_idx <= reg_data_idx + 1;
end

//dout
always @(*) begin
  case (sm_cnt)
    2'b00: sm_tdata = dout_dat[127:96];
    2'b01: sm_tdata = dout_dat[95:64];
    2'b10: sm_tdata = dout_dat[63:32];
    2'b11: sm_tdata = dout_dat[31:0];
  endcase
end

  // Interconnect Declarations for Component Instantiations 
  aes_enc aes_enc_inst (
      .clk(axi_clk),
      .rst(reg_rst),
      .arst_n(axi_reset_n),
      .state_rsc_dat({din0,din1,din2,ss_tdata}),
      .state_rsc_vld(din_vld),
      .state_rsc_rdy(din_rdy),
      .cipher_rsc_dat(dout_dat),
      .cipher_rsc_vld(dout_vld),
      .cipher_rsc_rdy(dout_rdy),
      .ekey_rsc_dat({key0,key1,key2,key3}),
      .ekey_rsc_vld(1),
      .ekey_rsc_rdy()
    );
//endmodule



endmodule // USER_PRJ0
