// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module userdma_sendoutstream_Pipeline_VITIS_LOOP_128_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outbuf_dout,
        outbuf_num_data_valid,
        outbuf_fifo_cap,
        outbuf_empty_n,
        outbuf_read,
        outStreamTop_TREADY,
        outStreamTop_TDATA,
        outStreamTop_TVALID,
        outStreamTop_TKEEP,
        outStreamTop_TSTRB,
        outStreamTop_TUSER,
        outStreamTop_TLAST
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [32:0] outbuf_dout;
input  [6:0] outbuf_num_data_valid;
input  [6:0] outbuf_fifo_cap;
input   outbuf_empty_n;
output   outbuf_read;
input   outStreamTop_TREADY;
output  [31:0] outStreamTop_TDATA;
output   outStreamTop_TVALID;
output  [3:0] outStreamTop_TKEEP;
output  [3:0] outStreamTop_TSTRB;
output  [6:0] outStreamTop_TUSER;
output  [0:0] outStreamTop_TLAST;

reg ap_idle;
reg outbuf_read;
reg outStreamTop_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] in_data_last_fu_83_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    outbuf_blk_n;
reg    outStreamTop_TDATA_blk_n;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

userdma_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((outStreamTop_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((outStreamTop_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStreamTop_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (in_data_last_fu_83_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStreamTop_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStreamTop_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        outStreamTop_TDATA_blk_n = outStreamTop_TREADY;
    end else begin
        outStreamTop_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStreamTop_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outStreamTop_TVALID = 1'b1;
    end else begin
        outStreamTop_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        outbuf_blk_n = outbuf_empty_n;
    end else begin
        outbuf_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outStreamTop_TREADY == 1'b0) | (1'b1 == ap_block_state1_pp0_stage0_iter0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outbuf_read = 1'b1;
    end else begin
        outbuf_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (outStreamTop_TREADY == 1'b0) | (outbuf_empty_n == 1'b0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign in_data_last_fu_83_p3 = outbuf_dout[32'd32];

assign outStreamTop_TDATA = outbuf_dout[31:0];

assign outStreamTop_TKEEP = 'bx;

assign outStreamTop_TLAST = outbuf_dout[32'd32];

assign outStreamTop_TSTRB = 'bx;

assign outStreamTop_TUSER = 'bx;

endmodule //userdma_sendoutstream_Pipeline_VITIS_LOOP_128_1
