// This code snippet was auto generated by xls2vlog.py from source file: ./user_project_wrapper.xlsx
// User: josh
// Date: Sep-22-23



module USER_PRJ2 #( parameter pUSER_PROJECT_SIDEBAND_WIDTH   = 5,
          parameter pADDR_WIDTH   = 12,
                   parameter pDATA_WIDTH   = 32
                 )
(
  output wire                        awready,
  output wire                        arready,
  output wire                        wready,
  output wire                        rvalid,
  output wire  [(pDATA_WIDTH-1) : 0] rdata,
  input  wire                        awvalid,
  input  wire                [11: 0] awaddr,
  input  wire                        arvalid,
  input  wire                [11: 0] araddr,
  input  wire                        wvalid,
  input  wire                 [3: 0] wstrb,
  input  wire  [(pDATA_WIDTH-1) : 0] wdata,
  input  wire                        rready,
  input  wire                        ss_tvalid,
  input  wire  [(pDATA_WIDTH-1) : 0] ss_tdata,
  input  wire                 [1: 0] ss_tuser,
    `ifdef USER_PROJECT_SIDEBAND_SUPPORT
  input  wire                 [pUSER_PROJECT_SIDEBAND_WIDTH-1: 0] ss_tupsb,
  `endif
  input  wire                 [3: 0] ss_tstrb,
  input  wire                 [3: 0] ss_tkeep,
  input  wire                        ss_tlast,
  input  wire                        sm_tready,
  output wire                        ss_tready,
  output wire                        sm_tvalid,
  output wire  [(pDATA_WIDTH-1) : 0] sm_tdata,
  output wire                 [2: 0] sm_tid,
  `ifdef USER_PROJECT_SIDEBAND_SUPPORT
  output  wire                 [pUSER_PROJECT_SIDEBAND_WIDTH-1: 0] sm_tupsb,
  `endif
  output wire                 [3: 0] sm_tstrb,
  output wire                 [3: 0] sm_tkeep,
  output wire                        sm_tlast,
  output wire                        low__pri_irq,
  output wire                        High_pri_req,
  output wire                [23: 0] la_data_o,
  input  wire                        axi_clk,
  input  wire                        axis_clk,
  input  wire                        axi_reset_n,
  input  wire                        axis_rst_n,
  input  wire                        user_clock2,
  input  wire                        uck2_rst_n
);


//assign ss_tready     = 1'b0; //to be assigned by DUT
//assign sm_tvalid     = 1'b0; //to be assigned by DUT



wire [31:0] dat_in_rsc_dat;
assign dat_in_rsc_dat = ss_tdata;

wire [31:0] dat_out_rsc_dat;

/* //for outer spram interface
wire        ram0_en;
wire [63:0] ram0_q;
wire        ram0_we;
wire [63:0] ram0_d;
wire [6:0]  ram0_adr;
wire        ram1_en;
wire [63:0] ram1_q;
wire        ram1_we;
wire [63:0] ram1_d;
wire [6:0]  ram1_adr;
*/

reg  [10:0] reg_widthIn;
reg  [8:0]  reg_heightIn;
reg  [8:0]  reg_shift_threshold;
reg         reg_rst;

wire        opticalflow_done;
reg         reg_opticalflow_done;

wire awvalid_in;
wire wvalid_in;

//write addr channel
assign awvalid_in	= awvalid; 
wire   awready_out;
assign awready = awready_out;

//write data channel
assign wvalid_in	= wvalid;
wire   wready_out;
assign wready = wready_out;

// if both awvalid_in=1 and wvalid_in=1 then output awready_out = 1 and wready_out = 1
assign awready_out = (awvalid_in && wvalid_in) ? 1 : 0;
assign wready_out  = (awvalid_in && wvalid_in) ? 1 : 0;

//write register
always @(posedge axi_clk or negedge axi_reset_n)  begin
  if ( !axi_reset_n ) begin
    reg_widthIn         <= 1024;
    reg_heightIn        <= 436;
    reg_shift_threshold <= 105;
    reg_rst             <= 0;
  end else begin
    if ( awvalid_in && wvalid_in ) begin		//when awvalid_in=1 and wvalid_in=1 means awready_out=1 and wready_out=1
      if          (awaddr[11:2] == 10'h000 ) begin //offset 0
        if ( wstrb[0] == 1) reg_rst           <= wdata[0];
      end else if (awaddr[11:2] == 10'h001 ) begin //offset 1
        if ( wstrb[0] == 1) reg_widthIn[7:0]  <= wdata[7:0];
        if ( wstrb[1] == 1) reg_widthIn[10:8] <= wdata[10:8];
      end else if (awaddr[11:2] == 10'h002 ) begin //offset 2
        if ( wstrb[0] == 1) reg_heightIn[7:0] <= wdata[7:0];
        if ( wstrb[1] == 1) reg_heightIn[8]   <= wdata[8];
      end else if (awaddr[11:2] == 10'h003 ) begin //offset 3
        if ( wstrb[0] == 1) reg_shift_threshold[7:0] <= wdata[7:0];
        if ( wstrb[1] == 1) reg_shift_threshold[8]   <= wdata[8];
      end
    end
  end
end


// added
reg [21:0] output_counter;
reg [21:0] next_output_counter;

assign sm_tlast = (output_counter==3*reg_widthIn*reg_heightIn-1)? 1:0;

always @* begin
  if (output_counter == 3*reg_widthIn*reg_heightIn-1) begin
    next_output_counter = 0;
  end
  else if (sm_tready & sm_tvalid) begin
    next_output_counter = output_counter+1;
  end
  else begin
    next_output_counter = output_counter;
  end
end

always @(posedge axi_clk or negedge axi_reset_n)  begin
  if ( !axi_reset_n ) begin
    output_counter <= 0;
  end else begin
    output_counter <= next_output_counter;
  end
end


//read register
reg [(pDATA_WIDTH-1) : 0] rdata_tmp;
assign arready = 1;
assign rvalid  = 1;
assign rdata   = rdata_tmp;

always @* begin
  if      (araddr[11:2] == 10'h000) rdata_tmp = reg_rst;
  else if (araddr[11:2] == 10'h001) rdata_tmp = reg_widthIn;
  else if (araddr[11:2] == 10'h002) rdata_tmp = reg_heightIn;
  else if (araddr[11:2] == 10'h003) rdata_tmp = reg_shift_threshold;
  else                              rdata_tmp = 0;
end

//DUT
assign sm_tdata  = dat_out_rsc_dat[31: 0]; 
assign sm_tupsb  = 0;
//assign {sm_tstrb, sm_tkeep, sm_tlast} = 0;
assign {sm_tstrb, sm_tkeep} = 0;


wire         ram0_en;
wire  [15:0] ram0_q;
wire         ram0_we;
wire  [15:0] ram0_d;
wire  [8:0]  ram0_adr;
wire         ram1_en;
wire  [15:0] ram1_q;
wire         ram1_we;
wire  [15:0] ram1_d;
wire  [8:0]  ram1_adr;

wire         ram2_en;
wire  [63:0] ram2_q;
wire         ram2_we;
wire  [63:0] ram2_d;
wire  [8:0]  ram2_adr;
wire         ram3_en;;
wire  [63:0] ram3_q;
wire         ram3_we;
wire  [63:0] ram3_d;
wire  [8:0]  ram3_adr;

wire         ram4_en;
wire  [63:0] ram4_q;
wire         ram4_we;
wire  [63:0] ram4_d;
wire  [8:0]  ram4_adr;
wire         ram5_en;
wire  [63:0] ram5_q;
wire         ram5_we;
wire  [63:0] ram5_d;
wire  [8:0]  ram5_adr;
wire         ram6_en;
wire  [63:0] ram6_q;
wire         ram6_we;
wire  [63:0] ram6_d;
wire  [8:0]  ram6_adr;
wire         ram7_en;
wire  [63:0] ram7_q;
wire         ram7_we;
wire  [63:0] ram7_d;
wire  [8:0]  ram7_adr;
wire         ram8_en;
wire  [63:0] ram8_q;
wire         ram8_we;
wire  [63:0] ram8_d;
wire  [8:0]  ram8_adr;
wire         ram9_en;
wire  [63:0] ram9_q;
wire         ram9_we;
wire  [63:0] ram9_d;
wire  [8:0]  ram9_adr;

wire         ram10_en;
wire  [63:0] ram10_q;
wire         ram10_we;
wire  [63:0] ram10_d;
wire  [8:0]  ram10_adr;
wire         ram11_en;
wire  [63:0] ram11_q;
wire         ram11_we;
wire  [63:0] ram11_d;
wire  [8:0]  ram11_adr;
wire         ram12_en;
wire  [63:0] ram12_q;
wire         ram12_we;
wire  [63:0] ram12_d;
wire  [8:0]  ram12_adr;
wire         ram13_en;
wire  [63:0] ram13_q;
wire         ram13_we;
wire  [63:0] ram13_d;
wire  [8:0]  ram13_adr;
wire         ram14_en;
wire  [63:0] ram14_q;
wire         ram14_we;
wire  [63:0] ram14_d;
wire  [8:0]  ram14_adr;
wire         ram15_en;
wire  [63:0] ram15_q;
wire         ram15_we;
wire  [63:0] ram15_d;
wire  [8:0]  ram15_adr;

wire         ram16_en;
wire  [63:0] ram16_q;
wire         ram16_we;
wire  [63:0] ram16_d;
wire  [8:0]  ram16_adr;
wire         ram17_en;
wire  [63:0] ram17_q;
wire         ram17_we;
wire  [63:0] ram17_d;
wire  [8:0]  ram17_adr;
wire         ram18_en;
wire  [63:0] ram18_q;
wire         ram18_we;
wire  [63:0] ram18_d;
wire  [8:0]  ram18_adr;
wire         ram19_en;
wire  [63:0] ram19_q;
wire         ram19_we;
wire  [63:0] ram19_d;
wire  [8:0]  ram19_adr;
wire         ram20_en;
wire  [63:0] ram20_q;
wire         ram20_we;
wire  [63:0] ram20_d;
wire  [8:0]  ram20_adr;
wire         ram21_en;
wire  [63:0] ram21_q;
wire         ram21_we;
wire  [63:0] ram21_d;
wire  [8:0]  ram21_adr;

wire          ram22_en;
wire  [767:0] ram22_q;
wire          ram22_we;
wire  [767:0] ram22_d;
wire  [8:0]   ram22_adr;
wire          ram23_en;
wire  [767:0] ram23_q;
wire          ram23_we;
wire  [767:0] ram23_d;
wire  [8:0]   ram23_adr;

OpticalFlow_Top U_OpticalFlow(
  .clk                   (axi_clk            ),
  .rst                   (reg_rst            ),
  .arst_n                (axi_reset_n        ),

  .widthIn               (reg_widthIn        ), //I 
  .heightIn              (reg_heightIn       ), //I
  .shift_threshold       (reg_shift_threshold), //I

  .input_frames_rsc_dat  (dat_in_rsc_dat     ),
  .input_frames_rsc_vld  (ss_tvalid          ),
  .input_frames_rsc_rdy  (ss_tready          ),
  .outputs_rsc_dat       (dat_out_rsc_dat    ),
  .outputs_rsc_vld       (sm_tvalid          ),
  .outputs_rsc_rdy       (sm_tready          ),

  .line_buf3_rsc_clken   (ram0_en),
  .line_buf3_rsc_q       (ram0_q),
  .line_buf3_rsc_we      (ram0_we),
  .line_buf3_rsc_d       (ram0_d),
  .line_buf3_rsc_adr     (ram0_adr),
  
  .line_buf2_rsc_clken   (ram1_en),   
  .line_buf2_rsc_q       (ram1_q),
  .line_buf2_rsc_we      (ram1_we),
  .line_buf2_rsc_d       (ram1_d),
  .line_buf2_rsc_adr     (ram1_adr),

  .line_buf1_rsc_gradient_y_calc_inst_clken   (ram2_en),
  .line_buf1_rsc_gradient_y_calc_inst_q       (ram2_q),
  .line_buf1_rsc_gradient_y_calc_inst_we      (ram2_we),
  .line_buf1_rsc_gradient_y_calc_inst_d       (ram2_d),
  .line_buf1_rsc_gradient_y_calc_inst_adr     (ram2_adr),
  
  .line_buf0_rsc_gradient_y_calc_inst_clken   (ram3_en),
  .line_buf0_rsc_gradient_y_calc_inst_q       (ram3_q),
  .line_buf0_rsc_gradient_y_calc_inst_we      (ram3_we),
  .line_buf0_rsc_gradient_y_calc_inst_d       (ram3_d),
  .line_buf0_rsc_gradient_y_calc_inst_adr     (ram3_adr),
      
  .line_buf5_Ix_rsc_clken   (ram4_en),
  .line_buf5_Ix_rsc_q       (ram4_q),
  .line_buf5_Ix_rsc_we      (ram4_we),
  .line_buf5_Ix_rsc_d       (ram4_d),
  .line_buf5_Ix_rsc_adr     (ram4_adr),
  
  .line_buf4_Ix_rsc_clken   (ram5_en),
  .line_buf4_Ix_rsc_q       (ram5_q),
  .line_buf4_Ix_rsc_we      (ram5_we),
  .line_buf4_Ix_rsc_d       (ram5_d),
  .line_buf4_Ix_rsc_adr     (ram5_adr),
  
  .line_buf3_Ix_rsc_clken   (ram6_en),
  .line_buf3_Ix_rsc_q       (ram6_q),
  .line_buf3_Ix_rsc_we      (ram6_we),
  .line_buf3_Ix_rsc_d       (ram6_d),
  .line_buf3_Ix_rsc_adr     (ram6_adr),
  
  .line_buf2_Ix_rsc_clken   (ram7_en),
  .line_buf2_Ix_rsc_q       (ram7_q),
  .line_buf2_Ix_rsc_we      (ram7_we),
  .line_buf2_Ix_rsc_d       (ram7_d),
  .line_buf2_Ix_rsc_adr     (ram7_adr),
  
  .line_buf1_Ix_rsc_clken   (ram8_en),
  .line_buf1_Ix_rsc_q       (ram8_q),
  .line_buf1_Ix_rsc_we      (ram8_we),
  .line_buf1_Ix_rsc_d       (ram8_d),
  .line_buf1_Ix_rsc_adr     (ram8_adr),
  
  .line_buf0_Ix_rsc_clken   (ram9_en),
  .line_buf0_Ix_rsc_q       (ram9_q),
  .line_buf0_Ix_rsc_we      (ram9_we),
  .line_buf0_Ix_rsc_d       (ram9_d),
  .line_buf0_Ix_rsc_adr     (ram9_adr),
  
  .line_buf5_Iy_rsc_clken   (ram10_en),
  .line_buf5_Iy_rsc_q       (ram10_q),
  .line_buf5_Iy_rsc_we      (ram10_we),
  .line_buf5_Iy_rsc_d       (ram10_d),
  .line_buf5_Iy_rsc_adr     (ram10_adr),
  
  .line_buf4_Iy_rsc_clken   (ram11_en),
  .line_buf4_Iy_rsc_q       (ram11_q),
  .line_buf4_Iy_rsc_we      (ram11_we),
  .line_buf4_Iy_rsc_d       (ram11_d),
  .line_buf4_Iy_rsc_adr     (ram11_adr),
  
  .line_buf3_Iy_rsc_clken   (ram12_en),
  .line_buf3_Iy_rsc_q       (ram12_q),
  .line_buf3_Iy_rsc_we      (ram12_we),
  .line_buf3_Iy_rsc_d       (ram12_d),
  .line_buf3_Iy_rsc_adr     (ram12_adr),
  
  .line_buf2_Iy_rsc_clken   (ram13_en),
  .line_buf2_Iy_rsc_q       (ram13_q),
  .line_buf2_Iy_rsc_we      (ram13_we),
  .line_buf2_Iy_rsc_d       (ram13_d),
  .line_buf2_Iy_rsc_adr     (ram13_adr),
  
  .line_buf1_Iy_rsc_clken   (ram14_en),
  .line_buf1_Iy_rsc_q       (ram14_q),
  .line_buf1_Iy_rsc_we      (ram14_we),
  .line_buf1_Iy_rsc_d       (ram14_d),
  .line_buf1_Iy_rsc_adr     (ram14_adr),
  
  .line_buf0_Iy_rsc_clken   (ram15_en),
  .line_buf0_Iy_rsc_q       (ram15_q),
  .line_buf0_Iy_rsc_we      (ram15_we),
  .line_buf0_Iy_rsc_d       (ram15_d),
  .line_buf0_Iy_rsc_adr     (ram15_adr),

  .line_buf5_Iz_rsc_clken   (ram16_en),
  .line_buf5_Iz_rsc_q       (ram16_q),
  .line_buf5_Iz_rsc_we      (ram16_we),
  .line_buf5_Iz_rsc_d       (ram16_d),
  .line_buf5_Iz_rsc_adr     (ram16_adr),
  
  .line_buf4_Iz_rsc_clken   (ram17_en),
  .line_buf4_Iz_rsc_q       (ram17_q),
  .line_buf4_Iz_rsc_we      (ram17_we),
  .line_buf4_Iz_rsc_d       (ram17_d),
  .line_buf4_Iz_rsc_adr     (ram17_adr),
  
  .line_buf3_Iz_rsc_clken   (ram18_en),
  .line_buf3_Iz_rsc_q       (ram18_q),
  .line_buf3_Iz_rsc_we      (ram18_we),
  .line_buf3_Iz_rsc_d       (ram18_d),
  .line_buf3_Iz_rsc_adr     (ram18_adr),
  
  .line_buf2_Iz_rsc_clken   (ram19_en),
  .line_buf2_Iz_rsc_q       (ram19_q),
  .line_buf2_Iz_rsc_we      (ram19_we),
  .line_buf2_Iz_rsc_d       (ram19_d),
  .line_buf2_Iz_rsc_adr     (ram19_adr),
  
  .line_buf1_Iz_rsc_clken   (ram20_en),
  .line_buf1_Iz_rsc_q       (ram20_q),
  .line_buf1_Iz_rsc_we      (ram20_we),
  .line_buf1_Iz_rsc_d       (ram20_d),
  .line_buf1_Iz_rsc_adr     (ram20_adr),
  
  .line_buf0_Iz_rsc_clken   (ram21_en),
  .line_buf0_Iz_rsc_q       (ram21_q),
  .line_buf0_Iz_rsc_we      (ram21_we),
  .line_buf0_Iz_rsc_d       (ram21_d),
  .line_buf0_Iz_rsc_adr     (ram21_adr),

  .line_buf1_rsc_tensor_weight_y_inst_clken   (ram22_en),
  .line_buf1_rsc_tensor_weight_y_inst_q       (ram22_q),
  .line_buf1_rsc_tensor_weight_y_inst_we      (ram22_we),
  .line_buf1_rsc_tensor_weight_y_inst_d       (ram22_d),
  .line_buf1_rsc_tensor_weight_y_inst_adr     (ram22_adr),

  .line_buf0_rsc_tensor_weight_y_inst_clken   (ram23_en),
  .line_buf0_rsc_tensor_weight_y_inst_q       (ram23_q),
  .line_buf0_rsc_tensor_weight_y_inst_we      (ram23_we),
  .line_buf0_rsc_tensor_weight_y_inst_d       (ram23_d),
  .line_buf0_rsc_tensor_weight_y_inst_adr     (ram23_adr)
);

//SRAM
SPRAM #(.data_width(16),.addr_width(9),.depth(512)) U_SPRAM_0(
  .adr (ram0_adr ), 
  .d   (ram0_d   ), 
  .en  (ram0_en  ), 
  .we  (ram0_we  ), 
  .clk (axi_clk  ), 
  .q   (ram0_q   )
);

SPRAM #(.data_width(16),.addr_width(9),.depth(512)) U_SPRAM_1(
  .adr (ram1_adr ), 
  .d   (ram1_d   ), 
  .en  (ram1_en  ), 
  .we  (ram1_we  ), 
  .clk (axi_clk  ),  
  .q   (ram1_q   )
);

SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_2(
  .adr (ram2_adr ), 
  .d   (ram2_d   ), 
  .en  (ram2_en  ), 
  .we  (ram2_we  ), 
  .clk (axi_clk  ), 
  .q   (ram2_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_3(
  .adr (ram3_adr ), 
  .d   (ram3_d   ), 
  .en  (ram3_en  ), 
  .we  (ram3_we  ), 
  .clk (axi_clk  ),  
  .q   (ram3_q   )
);

SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_4(
  .adr (ram4_adr ), 
  .d   (ram4_d   ), 
  .en  (ram4_en  ), 
  .we  (ram4_we  ), 
  .clk (axi_clk  ), 
  .q   (ram4_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_5(
  .adr (ram5_adr ), 
  .d   (ram5_d   ), 
  .en  (ram5_en  ), 
  .we  (ram5_we  ), 
  .clk (axi_clk  ),  
  .q   (ram5_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_6(
  .adr (ram6_adr ), 
  .d   (ram6_d   ), 
  .en  (ram6_en  ), 
  .we  (ram6_we  ), 
  .clk (axi_clk  ), 
  .q   (ram6_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_7(
  .adr (ram7_adr ), 
  .d   (ram7_d   ), 
  .en  (ram7_en  ), 
  .we  (ram7_we  ), 
  .clk (axi_clk  ),  
  .q   (ram7_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_8(
  .adr (ram8_adr ), 
  .d   (ram8_d   ), 
  .en  (ram8_en  ), 
  .we  (ram8_we  ), 
  .clk (axi_clk  ), 
  .q   (ram8_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_9(
  .adr (ram9_adr ), 
  .d   (ram9_d   ), 
  .en  (ram9_en  ), 
  .we  (ram9_we  ), 
  .clk (axi_clk  ),  
  .q   (ram9_q   )
);

SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_10(
  .adr (ram10_adr ), 
  .d   (ram10_d   ), 
  .en  (ram10_en  ), 
  .we  (ram10_we  ), 
  .clk (axi_clk   ), 
  .q   (ram10_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_11(
  .adr (ram11_adr ), 
  .d   (ram11_d   ), 
  .en  (ram11_en  ), 
  .we  (ram11_we  ), 
  .clk (axi_clk   ),  
  .q   (ram11_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_12(
  .adr (ram12_adr ), 
  .d   (ram12_d   ), 
  .en  (ram12_en  ), 
  .we  (ram12_we  ), 
  .clk (axi_clk   ), 
  .q   (ram12_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_13(
  .adr (ram13_adr ), 
  .d   (ram13_d   ), 
  .en  (ram13_en  ), 
  .we  (ram13_we  ), 
  .clk (axi_clk   ),  
  .q   (ram13_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_14(
  .adr (ram14_adr ), 
  .d   (ram14_d   ), 
  .en  (ram14_en  ), 
  .we  (ram14_we  ), 
  .clk (axi_clk   ), 
  .q   (ram14_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_15(
  .adr (ram15_adr ), 
  .d   (ram15_d   ), 
  .en  (ram15_en  ), 
  .we  (ram15_we  ), 
  .clk (axi_clk   ),  
  .q   (ram15_q   )
);

SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_16(
  .adr (ram16_adr ), 
  .d   (ram16_d   ), 
  .en  (ram16_en  ), 
  .we  (ram16_we  ), 
  .clk (axi_clk   ), 
  .q   (ram16_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_17(
  .adr (ram17_adr ), 
  .d   (ram17_d   ), 
  .en  (ram17_en  ), 
  .we  (ram17_we  ), 
  .clk (axi_clk   ),  
  .q   (ram17_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_18(
  .adr (ram18_adr ), 
  .d   (ram18_d   ), 
  .en  (ram18_en  ), 
  .we  (ram18_we  ), 
  .clk (axi_clk   ), 
  .q   (ram18_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_19(
  .adr (ram19_adr ), 
  .d   (ram19_d   ), 
  .en  (ram19_en  ), 
  .we  (ram19_we  ), 
  .clk (axi_clk   ),  
  .q   (ram19_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_20(
  .adr (ram20_adr ), 
  .d   (ram20_d   ), 
  .en  (ram20_en  ), 
  .we  (ram20_we  ), 
  .clk (axi_clk   ), 
  .q   (ram20_q   )
);
SPRAM #(.data_width(64),.addr_width(9),.depth(512)) U_SPRAM_21(
  .adr (ram21_adr ), 
  .d   (ram21_d   ), 
  .en  (ram21_en  ), 
  .we  (ram21_we  ), 
  .clk (axi_clk   ),  
  .q   (ram21_q   )
);

SPRAM #(.data_width(768),.addr_width(9),.depth(512)) U_SPRAM_22(
  .adr (ram22_adr ), 
  .d   (ram22_d   ), 
  .en  (ram22_en  ), 
  .we  (ram22_we  ), 
  .clk (axi_clk   ), 
  .q   (ram22_q   )
);

SPRAM #(.data_width(768),.addr_width(9),.depth(512)) U_SPRAM_23(
  .adr (ram23_adr ), 
  .d   (ram23_d   ), 
  .en  (ram23_en  ), 
  .we  (ram23_we  ), 
  .clk (axi_clk   ),  
  .q   (ram23_q   )
);

//assign low__pri_irq  = 1'b0;
//assign High_pri_req  = 1'b0;
//assign la_data_o     = 24'b0;
//assign sm_tid        = 3'b0;

endmodule // USER_PRJ2
