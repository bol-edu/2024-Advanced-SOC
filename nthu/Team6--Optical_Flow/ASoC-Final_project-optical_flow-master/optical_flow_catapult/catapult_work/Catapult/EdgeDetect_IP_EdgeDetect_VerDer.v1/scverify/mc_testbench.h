// ----------------------------------------------------------------------------
// SystemC Testbench Header
//
//    HLS version: 2023.1/1033555 Production Release
//       HLS date: Mon Feb 13 11:32:25 PST 2023
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: m111061545@ws41
// Generated date: Mon Feb 26 23:42:24 CST 2024
//
// ----------------------------------------------------------------------------
#ifdef CCS_SCVERIFY

// 
// -------------------------------------
// mc_testbench
// SCVerify mc_testbench SC_MODULE
// -------------------------------------
// 
#ifndef INCLUDED_MC_TESTBENCH_H
#define INCLUDED_MC_TESTBENCH_H

#ifdef __SYNTHESIS__
#error __SYNTHESIS__ is a predefined, reserved Catapult macro and cannot be user defined.
#endif

#ifndef SC_USE_STD_STRING
#define SC_USE_STD_STRING
#endif

#include "../../../hls_c/inc/EdgeDetect.h"
#include "ccs_testbench.h"
#include <systemc.h>
#include <tlm.h>
#include <ac_int.h>
#include <ac_channel.h>
#include <mc_container_types.h>
#include <mc_typeconv.h>
#include <mc_transactors.h>
#include <mc_comparator.h>
#include <mc_end_of_testbench.h>
#include <vector>
#include <ac_read_env.h>


class mc_testbench : public sc_module
{
public:
   // Module instance pointers
   mc_comparator< ac_int<8, false > , MaskPacket< 1, 8 > > *dat_out_comp;
   mc_comparator< ac_int<9, true > , MaskPacket< 1, 9 > > *dy_comp;
   
   // Interface Ports
   sc_in< bool > clk;
   sc_port< tlm::tlm_fifo_put_if< ac_int<8, false > > > ccs_dat_in;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_dat_in;
   sc_port< tlm::tlm_fifo_put_if< int > > ccs_sizecount_dat_in;
   sc_port< tlm::tlm_fifo_put_if< ac_int<11, false > > > ccs_widthIn;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_widthIn;
   sc_port< tlm::tlm_fifo_put_if< ac_int<10, false > > > ccs_heightIn;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_heightIn;
   sc_port< tlm::tlm_fifo_get_if< ac_int<8, false > > > ccs_dat_out;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_dat_out;
   sc_port< tlm::tlm_fifo_get_if< ac_int<9, true > > > ccs_dy;
   sc_port< tlm::tlm_fifo_put_if< mc_wait_ctrl > > ccs_wait_ctrl_dy;
   sc_in< bool > design_is_idle;
   sc_out< sc_logic > enable_stalls;
   sc_in< unsigned short > stall_coverage;
   
   // Named Objects
   
   // Data objects
   int end_of_sim_wait_count;
   bool testbench_ended;
   int main_exit_code;
   bool atleast_one_active_input;
   sc_time last_event_time;
   sc_time last_event_time2;
   sc_signal< bool >                          cpp_testbench_active;
   sc_event testbench_end_event;
   sc_event testbench_aw_event;
   sc_event reset_request_event;
   bool _checked_results;
   bool _failed;
   static mc_testbench* that;
   bool _channel_mismatch;
   unsigned int remaining_ccs_dat_in;
   bool _capture_dat_in;
   int dat_in_capture_count;
   int dat_in_iteration_count;
   ac_channel<ac_int<8, false > > * dat_in_pointer;
   bool dat_in_pointer_set;
   bool _capture_widthIn;
   int widthIn_capture_count;
   int widthIn_iteration_count;
   ac_int<11, false > widthIn_prev_value;
   bool widthIn_idle_warning;
   bool widthIn_mismatch;
   bool _capture_heightIn;
   int heightIn_capture_count;
   int heightIn_iteration_count;
   ac_int<10, false > heightIn_prev_value;
   bool heightIn_idle_warning;
   bool heightIn_mismatch;
   unsigned int remaining_dat_out_golden;
   tlm::tlm_fifo< mc_golden_info< ac_int<8, false >, MaskPacket<1, 8> > > dat_out_golden;
   bool _capture_dat_out;
   int dat_out_capture_count;
   int dat_out_iteration_count;
   ac_channel<ac_int<8, false > > * dat_out_pointer;
   bool dat_out_pointer_set;
   unsigned int remaining_dy_golden;
   tlm::tlm_fifo< mc_golden_info< ac_int<9, true >, MaskPacket<1, 9> > > dy_golden;
   bool _capture_dy;
   int dy_capture_count;
   int dy_iteration_count;
   ac_channel<ac_int<9, true > > * dy_pointer;
   bool dy_pointer_set;
   int wait_cnt;
   sc_time previous_timestamp;
   sc_time average_period;
   unsigned int period_counter;
   bool calculate_period;
   
   // Declare processes (SC_METHOD and SC_THREAD)
   void wait_for_end();
   void run();
   
   // Constructor
   SC_HAS_PROCESS(mc_testbench);
   mc_testbench(
      const sc_module_name& name
   )
      : clk("clk")
      , ccs_dat_in("ccs_dat_in")
      , ccs_wait_ctrl_dat_in("ccs_wait_ctrl_dat_in")
      , ccs_sizecount_dat_in("ccs_sizecount_dat_in")
      , ccs_widthIn("ccs_widthIn")
      , ccs_wait_ctrl_widthIn("ccs_wait_ctrl_widthIn")
      , ccs_heightIn("ccs_heightIn")
      , ccs_wait_ctrl_heightIn("ccs_wait_ctrl_heightIn")
      , ccs_dat_out("ccs_dat_out")
      , ccs_wait_ctrl_dat_out("ccs_wait_ctrl_dat_out")
      , ccs_dy("ccs_dy")
      , ccs_wait_ctrl_dy("ccs_wait_ctrl_dy")
      , design_is_idle("design_is_idle")
      , enable_stalls("enable_stalls")
      , stall_coverage("stall_coverage")
      , cpp_testbench_active("cpp_testbench_active")
      , remaining_ccs_dat_in(0)
      , remaining_dat_out_golden(0)
      , dat_out_golden("dat_out_golden",-1)
      , remaining_dy_golden(0)
      , dy_golden("dy_golden",-1)
   {
      // Instantiate other modules
      dat_out_comp = new mc_comparator< ac_int<8, false > , MaskPacket< 1, 8 > > (
         "dat_out_comp",
         "dat_out",
         1,
         ac_env::read_int("SCVerify_MAX_ERROR_CNT",0),
         1
      );
      dat_out_comp->data_in(ccs_dat_out);
      dat_out_comp->data_golden(dat_out_golden);
      
      dy_comp = new mc_comparator< ac_int<9, true > , MaskPacket< 1, 9 > > (
         "dy_comp",
         "dy",
         1,
         ac_env::read_int("SCVerify_MAX_ERROR_CNT",0),
         1
      );
      dy_comp->data_in(ccs_dy);
      dy_comp->data_golden(dy_golden);
      
      
      // Register processes
      SC_METHOD(wait_for_end);
      sensitive << clk.pos() << testbench_end_event;
      SC_THREAD(run);
      // Other constructor statements
      set_stack_size(64000000);
      _checked_results = false;
      that = this;
      end_of_sim_wait_count = 0;
      testbench_ended = false;
      main_exit_code = 0;
      atleast_one_active_input = true;
      _failed = false;
      _capture_dat_in = true;
      _capture_widthIn = true;
      _capture_heightIn = true;
      _capture_dat_out = true;
      _capture_dy = true;
      wait_cnt = 0;
      previous_timestamp = SC_ZERO_TIME;
      average_period = SC_ZERO_TIME;
      period_counter = 0;
      calculate_period = true;
   }
   
   ~mc_testbench()
   {
      delete dat_out_comp;
      dat_out_comp = 0;
      delete dy_comp;
      dy_comp = 0;
   }
   
   // C++ class functions
   public:
      static void wait_for_idle_sync() ;
   public:
      static void set_enable_stalls(bool flag) ;
   public:
      void reset_request() ;
   public:
      void capture_dat_in( ac_channel<ac_int<8, false > > &dat_in) ;
   public:
      void capture_widthIn( ac_int<11, false > &widthIn) ;
   public:
      void capture_heightIn( ac_int<10, false > &heightIn) ;
   public:
      void capture_dat_out( ac_channel<ac_int<8, false > > &dat_out) ;
   public:
      void capture_dy( ac_channel<ac_int<9, true > > &dy) ;
   protected:
      void wait_on_input_required() ;
   public:
      static void capture_IN(ac_channel<ac_int<8, false> > &dat_in, ac_int<11, false> &widthIn, ac_int<10, false> &heightIn, ac_channel<ac_int<8, false> > &dat_out, ac_channel<ac_int<9, true> > &dy) ;
   public:
      static void capture_OUT(ac_channel<ac_int<8, false> > &dat_in, ac_int<11, false> &widthIn, ac_int<10, false> &heightIn, ac_channel<ac_int<8, false> > &dat_out, ac_channel<ac_int<9, true> > &dy) ;
   public:
      static void exec_run(ac_channel<ac_int<8, false> > &dat_in, ac_int<11, false> &widthIn, ac_int<10, false> &heightIn, ac_channel<ac_int<8, false> > &dat_out, ac_channel<ac_int<9, true> > &dy) ;
   protected:
      void start_of_simulation() ;
   protected:
      void end_of_simulation() ;
   public:
      void check_results() ;
   public:
      bool failed() ;
   public:
      void set_failed(bool fail) ;
};
#endif
#endif //CCS_SCVERIFY
