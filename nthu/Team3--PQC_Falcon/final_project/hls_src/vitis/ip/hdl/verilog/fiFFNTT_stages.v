// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fiFFNTT_stages (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inplace_buf_address0,
        inplace_buf_ce0,
        inplace_buf_we0,
        inplace_buf_d0,
        inplace_buf_q0,
        inplace_buf_address1,
        inplace_buf_ce1,
        inplace_buf_we1,
        inplace_buf_d1,
        inplace_buf_q1,
        mode,
        inverse
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] inplace_buf_address0;
output   inplace_buf_ce0;
output  [7:0] inplace_buf_we0;
output  [63:0] inplace_buf_d0;
input  [63:0] inplace_buf_q0;
output  [9:0] inplace_buf_address1;
output   inplace_buf_ce1;
output  [7:0] inplace_buf_we1;
output  [63:0] inplace_buf_d1;
input  [63:0] inplace_buf_q1;
input  [0:0] mode;
input  [0:0] inverse;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] inplace_buf_address0;
reg inplace_buf_ce0;
reg[7:0] inplace_buf_we0;
reg[9:0] inplace_buf_address1;
reg inplace_buf_ce1;
reg[7:0] inplace_buf_we1;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] mode_read_read_fu_80_p2;
reg   [9:0] stage0_address0;
reg    stage0_ce0;
reg   [7:0] stage0_we0;
wire   [63:0] stage0_q0;
reg   [9:0] stage0_address1;
reg    stage0_ce1;
reg   [7:0] stage0_we1;
wire   [63:0] stage0_q1;
reg   [9:0] stage1_address0;
reg    stage1_ce0;
reg   [7:0] stage1_we0;
wire   [63:0] stage1_q0;
reg   [9:0] stage1_address1;
reg    stage1_ce1;
reg   [7:0] stage1_we1;
wire   [63:0] stage1_q1;
wire    grp_PE_fu_86_ap_start;
wire    grp_PE_fu_86_ap_done;
wire    grp_PE_fu_86_ap_idle;
wire    grp_PE_fu_86_ap_ready;
wire   [9:0] grp_PE_fu_86_inplace_buf_address0;
wire    grp_PE_fu_86_inplace_buf_ce0;
reg   [63:0] grp_PE_fu_86_inplace_buf_q0;
wire   [9:0] grp_PE_fu_86_inplace_buf_address1;
wire    grp_PE_fu_86_inplace_buf_ce1;
reg   [63:0] grp_PE_fu_86_inplace_buf_q1;
wire   [9:0] grp_PE_fu_86_stage0_address0;
wire    grp_PE_fu_86_stage0_ce0;
wire   [7:0] grp_PE_fu_86_stage0_we0;
wire   [63:0] grp_PE_fu_86_stage0_d0;
wire   [9:0] grp_PE_fu_86_stage0_address1;
wire    grp_PE_fu_86_stage0_ce1;
wire   [7:0] grp_PE_fu_86_stage0_we1;
wire   [63:0] grp_PE_fu_86_stage0_d1;
reg   [10:0] grp_PE_fu_86_in_t;
reg   [9:0] grp_PE_fu_86_in_m;
reg   [0:0] grp_PE_fu_86_mode;
reg    grp_PE_fu_86_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
reg   [20:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_block_state4_on_subcall_done;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 grp_PE_fu_86_ap_start_reg = 1'b0;
end

fiFFNTT_stages_stage0_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
stage0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stage0_address0),
    .ce0(stage0_ce0),
    .we0(stage0_we0),
    .d0(grp_PE_fu_86_stage0_d0),
    .q0(stage0_q0),
    .address1(stage0_address1),
    .ce1(stage0_ce1),
    .we1(stage0_we1),
    .d1(grp_PE_fu_86_stage0_d1),
    .q1(stage0_q1)
);

fiFFNTT_stages_stage0_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
stage1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stage1_address0),
    .ce0(stage1_ce0),
    .we0(stage1_we0),
    .d0(grp_PE_fu_86_stage0_d0),
    .q0(stage1_q0),
    .address1(stage1_address1),
    .ce1(stage1_ce1),
    .we1(stage1_we1),
    .d1(grp_PE_fu_86_stage0_d1),
    .q1(stage1_q1)
);

fiFFNTT_PE grp_PE_fu_86(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_PE_fu_86_ap_start),
    .ap_done(grp_PE_fu_86_ap_done),
    .ap_idle(grp_PE_fu_86_ap_idle),
    .ap_ready(grp_PE_fu_86_ap_ready),
    .inplace_buf_address0(grp_PE_fu_86_inplace_buf_address0),
    .inplace_buf_ce0(grp_PE_fu_86_inplace_buf_ce0),
    .inplace_buf_q0(grp_PE_fu_86_inplace_buf_q0),
    .inplace_buf_address1(grp_PE_fu_86_inplace_buf_address1),
    .inplace_buf_ce1(grp_PE_fu_86_inplace_buf_ce1),
    .inplace_buf_q1(grp_PE_fu_86_inplace_buf_q1),
    .stage0_address0(grp_PE_fu_86_stage0_address0),
    .stage0_ce0(grp_PE_fu_86_stage0_ce0),
    .stage0_we0(grp_PE_fu_86_stage0_we0),
    .stage0_d0(grp_PE_fu_86_stage0_d0),
    .stage0_address1(grp_PE_fu_86_stage0_address1),
    .stage0_ce1(grp_PE_fu_86_stage0_ce1),
    .stage0_we1(grp_PE_fu_86_stage0_we1),
    .stage0_d1(grp_PE_fu_86_stage0_d1),
    .in_t(grp_PE_fu_86_in_t),
    .in_m(grp_PE_fu_86_in_m),
    .mode(grp_PE_fu_86_mode),
    .inverse(inverse)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_PE_fu_86_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((mode_read_read_fu_80_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((mode == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_PE_fu_86_ap_start_reg <= 1'b1;
        end else if ((grp_PE_fu_86_ap_ready == 1'b1)) begin
            grp_PE_fu_86_ap_start_reg <= 1'b0;
        end
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((grp_PE_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_PE_fu_86_in_m = 10'd512;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_PE_fu_86_in_m = 10'd256;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_PE_fu_86_in_m = 10'd128;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_PE_fu_86_in_m = 10'd64;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_PE_fu_86_in_m = 10'd32;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_PE_fu_86_in_m = 10'd16;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_PE_fu_86_in_m = 10'd8;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_PE_fu_86_in_m = 10'd4;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_PE_fu_86_in_m = 10'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_PE_fu_86_in_m = 10'd1;
    end else begin
        grp_PE_fu_86_in_m = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_PE_fu_86_in_t = 11'd2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_PE_fu_86_in_t = 11'd4;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_PE_fu_86_in_t = 11'd8;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_PE_fu_86_in_t = 11'd16;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_PE_fu_86_in_t = 11'd32;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_PE_fu_86_in_t = 11'd64;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_PE_fu_86_in_t = 11'd128;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_PE_fu_86_in_t = 11'd256;
    end else if (((1'b1 == ap_CS_fsm_state5) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_PE_fu_86_in_t = 11'd512;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_PE_fu_86_in_t = 11'd1024;
    end else begin
        grp_PE_fu_86_in_t = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_PE_fu_86_inplace_buf_q0 = stage0_q0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_PE_fu_86_inplace_buf_q0 = stage1_q0;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_PE_fu_86_inplace_buf_q0 = inplace_buf_q0;
    end else begin
        grp_PE_fu_86_inplace_buf_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_PE_fu_86_inplace_buf_q1 = stage0_q1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_PE_fu_86_inplace_buf_q1 = stage1_q1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_PE_fu_86_inplace_buf_q1 = inplace_buf_q1;
    end else begin
        grp_PE_fu_86_inplace_buf_q1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_PE_fu_86_mode = mode;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_PE_fu_86_mode = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_PE_fu_86_mode = 1'd0;
    end else begin
        grp_PE_fu_86_mode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inplace_buf_address0 = grp_PE_fu_86_stage0_address0;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        inplace_buf_address0 = grp_PE_fu_86_inplace_buf_address0;
    end else begin
        inplace_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inplace_buf_address1 = grp_PE_fu_86_stage0_address1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        inplace_buf_address1 = grp_PE_fu_86_inplace_buf_address1;
    end else begin
        inplace_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inplace_buf_ce0 = grp_PE_fu_86_stage0_ce0;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        inplace_buf_ce0 = grp_PE_fu_86_inplace_buf_ce0;
    end else begin
        inplace_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inplace_buf_ce1 = grp_PE_fu_86_stage0_ce1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        inplace_buf_ce1 = grp_PE_fu_86_inplace_buf_ce1;
    end else begin
        inplace_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inplace_buf_we0 = grp_PE_fu_86_stage0_we0;
    end else begin
        inplace_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        inplace_buf_we1 = grp_PE_fu_86_stage0_we1;
    end else begin
        inplace_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage0_address0 = grp_PE_fu_86_stage0_address0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        stage0_address0 = grp_PE_fu_86_inplace_buf_address0;
    end else begin
        stage0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage0_address1 = grp_PE_fu_86_stage0_address1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        stage0_address1 = grp_PE_fu_86_inplace_buf_address1;
    end else begin
        stage0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage0_ce0 = grp_PE_fu_86_stage0_ce0;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        stage0_ce0 = grp_PE_fu_86_inplace_buf_ce0;
    end else begin
        stage0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage0_ce1 = grp_PE_fu_86_stage0_ce1;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        stage0_ce1 = grp_PE_fu_86_inplace_buf_ce1;
    end else begin
        stage0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage0_we0 = grp_PE_fu_86_stage0_we0;
    end else begin
        stage0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage0_we1 = grp_PE_fu_86_stage0_we1;
    end else begin
        stage0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        stage1_address0 = grp_PE_fu_86_stage0_address0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage1_address0 = grp_PE_fu_86_inplace_buf_address0;
    end else begin
        stage1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        stage1_address1 = grp_PE_fu_86_stage0_address1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage1_address1 = grp_PE_fu_86_inplace_buf_address1;
    end else begin
        stage1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        stage1_ce0 = grp_PE_fu_86_stage0_ce0;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage1_ce0 = grp_PE_fu_86_inplace_buf_ce0;
    end else begin
        stage1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        stage1_ce1 = grp_PE_fu_86_stage0_ce1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | ((mode == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        stage1_ce1 = grp_PE_fu_86_inplace_buf_ce1;
    end else begin
        stage1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        stage1_we0 = grp_PE_fu_86_stage0_we0;
    end else begin
        stage1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        stage1_we1 = grp_PE_fu_86_stage0_we1;
    end else begin
        stage1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((mode_read_read_fu_80_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((mode == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_PE_fu_86_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_PE_fu_86_ap_done == 1'b0) & (mode == 1'd0));
end

assign grp_PE_fu_86_ap_start = grp_PE_fu_86_ap_start_reg;

assign inplace_buf_d0 = grp_PE_fu_86_stage0_d0;

assign inplace_buf_d1 = grp_PE_fu_86_stage0_d1;

assign mode_read_read_fu_80_p2 = mode;

endmodule //fiFFNTT_stages
