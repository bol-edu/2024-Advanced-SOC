// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fiFFNTT_monty_mul (
        ap_clk,
        ap_rst,
        x,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] x;
output  [15:0] ap_return;
input   ap_ce;

reg[15:0] ap_return;

wire   [21:0] tmp2_u_mul_fu_34_ap_return;
reg   [21:0] tmp2_reg_123;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [21:0] tmp2_reg_123_pp0_iter1_reg;
reg   [21:0] tmp2_reg_123_pp0_iter2_reg;
reg   [21:0] tmp2_reg_123_pp0_iter3_reg;
reg   [21:0] tmp2_reg_123_pp0_iter4_reg;
reg   [21:0] tmp2_reg_123_pp0_iter5_reg;
wire    tmp2_u_mul_fu_34_ap_ready;
wire    tmp_u_add_fu_40_ap_ready;
wire   [31:0] tmp_u_add_fu_40_a;
wire   [31:0] tmp_u_add_fu_40_b;
wire   [31:0] tmp_u_add_fu_40_ap_return;
wire    ap_block_pp0_stage0;
wire  signed [15:0] zext_ln234_fu_50_p0;
wire   [15:0] grp_fu_109_p2;
wire   [29:0] grp_fu_116_p2;
wire   [15:0] trunc_ln5_fu_61_p4;
wire   [16:0] zext_ln232_2_fu_71_p1;
wire   [16:0] tmp2_1_fu_75_p2;
wire   [0:0] tmp_2_fu_87_p3;
wire   [15:0] select_ln232_fu_95_p3;
wire   [15:0] add_ln232_fu_81_p2;
wire  signed [15:0] grp_fu_109_p0;
wire   [13:0] grp_fu_109_p1;
wire   [15:0] grp_fu_116_p0;
wire   [13:0] grp_fu_116_p1;
wire   [15:0] tmp2_2_fu_103_p2;
reg    grp_fu_109_ce;
reg    grp_fu_116_ce;
reg    ap_ce_reg;
reg   [15:0] x_int_reg;
reg   [15:0] ap_return_int_reg;
wire   [29:0] grp_fu_116_p00;

fiFFNTT_u_mul tmp2_u_mul_fu_34(
    .ap_ready(tmp2_u_mul_fu_34_ap_ready),
    .a(x_int_reg),
    .ap_return(tmp2_u_mul_fu_34_ap_return)
);

fiFFNTT_u_add tmp_u_add_fu_40(
    .ap_ready(tmp_u_add_fu_40_ap_ready),
    .a(tmp_u_add_fu_40_a),
    .b(tmp_u_add_fu_40_b),
    .ap_return(tmp_u_add_fu_40_ap_return)
);

fiFFNTT_mul_mul_16s_14ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_14ns_16_4_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_109_p0),
    .din1(grp_fu_109_p1),
    .ce(grp_fu_109_ce),
    .dout(grp_fu_109_p2)
);

fiFFNTT_mul_mul_16ns_14ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
mul_mul_16ns_14ns_30_4_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_116_p0),
    .din1(grp_fu_116_p1),
    .ce(grp_fu_116_ce),
    .dout(grp_fu_116_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= tmp2_2_fu_103_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        tmp2_reg_123 <= tmp2_u_mul_fu_34_ap_return;
        tmp2_reg_123_pp0_iter1_reg <= tmp2_reg_123;
        tmp2_reg_123_pp0_iter2_reg <= tmp2_reg_123_pp0_iter1_reg;
        tmp2_reg_123_pp0_iter3_reg <= tmp2_reg_123_pp0_iter2_reg;
        tmp2_reg_123_pp0_iter4_reg <= tmp2_reg_123_pp0_iter3_reg;
        tmp2_reg_123_pp0_iter5_reg <= tmp2_reg_123_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        x_int_reg <= x;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = tmp2_2_fu_103_p2;
    end else begin
        ap_return = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_109_ce = 1'b1;
    end else begin
        grp_fu_109_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_116_ce = 1'b1;
    end else begin
        grp_fu_116_ce = 1'b0;
    end
end

assign add_ln232_fu_81_p2 = ($signed(trunc_ln5_fu_61_p4) + $signed(16'd53247));

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign grp_fu_109_p0 = tmp2_u_mul_fu_34_ap_return[15:0];

assign grp_fu_109_p1 = 16'd12287;

assign grp_fu_116_p0 = grp_fu_116_p00;

assign grp_fu_116_p00 = $unsigned(zext_ln234_fu_50_p0);

assign grp_fu_116_p1 = 30'd12289;

assign select_ln232_fu_95_p3 = ((tmp_2_fu_87_p3[0:0] == 1'b1) ? 16'd12289 : 16'd0);

assign tmp2_1_fu_75_p2 = ($signed(zext_ln232_2_fu_71_p1) + $signed(17'd118783));

assign tmp2_2_fu_103_p2 = (select_ln232_fu_95_p3 + add_ln232_fu_81_p2);

assign tmp_2_fu_87_p3 = tmp2_1_fu_75_p2[32'd16];

assign tmp_u_add_fu_40_a = tmp2_reg_123_pp0_iter5_reg;

assign tmp_u_add_fu_40_b = grp_fu_116_p2;

assign trunc_ln5_fu_61_p4 = {{tmp_u_add_fu_40_ap_return[31:16]}};

assign zext_ln232_2_fu_71_p1 = trunc_ln5_fu_61_p4;

assign zext_ln234_fu_50_p0 = grp_fu_109_p2;

endmodule //fiFFNTT_monty_mul
