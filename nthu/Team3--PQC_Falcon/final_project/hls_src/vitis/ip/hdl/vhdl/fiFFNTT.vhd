-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiFFNTT is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fiFFNTT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fiFFNTT_fiFFNTT,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=7455,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=0,HLS_SYN_FF=14423,HLS_SYN_LUT=12483,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r : STD_LOGIC_VECTOR (63 downto 0);
    signal mode : STD_LOGIC;
    signal inverse : STD_LOGIC;
    signal inverse_read_reg_124 : STD_LOGIC_VECTOR (0 downto 0);
    signal mode_read_reg_130 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_read_reg_137 : STD_LOGIC_VECTOR (63 downto 0);
    signal inplace_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal inplace_buf_ce0 : STD_LOGIC;
    signal inplace_buf_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal inplace_buf_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal inplace_buf_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal inplace_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal inplace_buf_ce1 : STD_LOGIC;
    signal inplace_buf_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal inplace_buf_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_in_copy_fu_90_ap_start : STD_LOGIC;
    signal grp_in_copy_fu_90_ap_done : STD_LOGIC;
    signal grp_in_copy_fu_90_ap_idle : STD_LOGIC;
    signal grp_in_copy_fu_90_ap_ready : STD_LOGIC;
    signal grp_in_copy_fu_90_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_in_copy_fu_90_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_in_copy_fu_90_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_in_copy_fu_90_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_in_copy_fu_90_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_in_copy_fu_90_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_in_copy_fu_90_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_in_copy_fu_90_inplace_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_in_copy_fu_90_inplace_buf_ce0 : STD_LOGIC;
    signal grp_in_copy_fu_90_inplace_buf_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_in_copy_fu_90_inplace_buf_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_stages_fu_99_ap_start : STD_LOGIC;
    signal grp_stages_fu_99_ap_done : STD_LOGIC;
    signal grp_stages_fu_99_ap_idle : STD_LOGIC;
    signal grp_stages_fu_99_ap_ready : STD_LOGIC;
    signal grp_stages_fu_99_inplace_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_stages_fu_99_inplace_buf_ce0 : STD_LOGIC;
    signal grp_stages_fu_99_inplace_buf_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_stages_fu_99_inplace_buf_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_stages_fu_99_inplace_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_stages_fu_99_inplace_buf_ce1 : STD_LOGIC;
    signal grp_stages_fu_99_inplace_buf_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_stages_fu_99_inplace_buf_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_out_copy_fu_114_ap_start : STD_LOGIC;
    signal grp_out_copy_fu_114_ap_done : STD_LOGIC;
    signal grp_out_copy_fu_114_ap_idle : STD_LOGIC;
    signal grp_out_copy_fu_114_ap_ready : STD_LOGIC;
    signal grp_out_copy_fu_114_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_out_copy_fu_114_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_out_copy_fu_114_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_out_copy_fu_114_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_out_copy_fu_114_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_out_copy_fu_114_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_out_copy_fu_114_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_out_copy_fu_114_inplace_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_out_copy_fu_114_inplace_buf_ce0 : STD_LOGIC;
    signal grp_out_copy_fu_114_inplace_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_out_copy_fu_114_inplace_buf_ce1 : STD_LOGIC;
    signal gmem0_AWVALID : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WVALID : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARVALID : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RREADY : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BREADY : STD_LOGIC;
    signal grp_in_copy_fu_90_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_stages_fu_99_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_out_copy_fu_114_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fiFFNTT_in_copy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_buf : IN STD_LOGIC_VECTOR (63 downto 0);
        inplace_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inplace_buf_ce0 : OUT STD_LOGIC;
        inplace_buf_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        inplace_buf_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        mode : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fiFFNTT_stages IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inplace_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inplace_buf_ce0 : OUT STD_LOGIC;
        inplace_buf_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        inplace_buf_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        inplace_buf_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        inplace_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inplace_buf_ce1 : OUT STD_LOGIC;
        inplace_buf_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        inplace_buf_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        inplace_buf_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        mode : IN STD_LOGIC_VECTOR (0 downto 0);
        inverse : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fiFFNTT_out_copy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inplace_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inplace_buf_ce0 : OUT STD_LOGIC;
        inplace_buf_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        inplace_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inplace_buf_ce1 : OUT STD_LOGIC;
        inplace_buf_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        out_buf : IN STD_LOGIC_VECTOR (63 downto 0);
        mode : IN STD_LOGIC_VECTOR (0 downto 0);
        inverse : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fiFFNTT_inplace_buf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (7 downto 0);
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (7 downto 0);
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fiFFNTT_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        mode : OUT STD_LOGIC;
        inverse : OUT STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fiFFNTT_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    inplace_buf_U : component fiFFNTT_inplace_buf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => inplace_buf_address0,
        ce0 => inplace_buf_ce0,
        we0 => inplace_buf_we0,
        d0 => inplace_buf_d0,
        q0 => inplace_buf_q0,
        address1 => inplace_buf_address1,
        ce1 => inplace_buf_ce1,
        we1 => inplace_buf_we1,
        d1 => grp_stages_fu_99_inplace_buf_d1,
        q1 => inplace_buf_q1);

    grp_in_copy_fu_90 : component fiFFNTT_in_copy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_in_copy_fu_90_ap_start,
        ap_done => grp_in_copy_fu_90_ap_done,
        ap_idle => grp_in_copy_fu_90_ap_idle,
        ap_ready => grp_in_copy_fu_90_ap_ready,
        m_axi_gmem0_AWVALID => grp_in_copy_fu_90_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_in_copy_fu_90_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_in_copy_fu_90_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_in_copy_fu_90_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_in_copy_fu_90_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_in_copy_fu_90_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_in_copy_fu_90_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_in_copy_fu_90_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_in_copy_fu_90_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_in_copy_fu_90_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_in_copy_fu_90_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_in_copy_fu_90_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_in_copy_fu_90_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_in_copy_fu_90_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_in_copy_fu_90_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_in_copy_fu_90_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_in_copy_fu_90_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_in_copy_fu_90_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_in_copy_fu_90_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_in_copy_fu_90_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_in_copy_fu_90_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_in_copy_fu_90_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_in_copy_fu_90_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_in_copy_fu_90_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_in_copy_fu_90_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_in_copy_fu_90_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_in_copy_fu_90_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_in_copy_fu_90_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_in_copy_fu_90_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_in_copy_fu_90_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_in_copy_fu_90_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => ap_const_logic_0,
        m_axi_gmem0_RID => ap_const_lv1_0,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => ap_const_lv1_0,
        m_axi_gmem0_RRESP => ap_const_lv2_0,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_in_copy_fu_90_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        in_buf => in_r_read_reg_137,
        inplace_buf_address0 => grp_in_copy_fu_90_inplace_buf_address0,
        inplace_buf_ce0 => grp_in_copy_fu_90_inplace_buf_ce0,
        inplace_buf_we0 => grp_in_copy_fu_90_inplace_buf_we0,
        inplace_buf_d0 => grp_in_copy_fu_90_inplace_buf_d0,
        mode => mode_read_reg_130);

    grp_stages_fu_99 : component fiFFNTT_stages
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_stages_fu_99_ap_start,
        ap_done => grp_stages_fu_99_ap_done,
        ap_idle => grp_stages_fu_99_ap_idle,
        ap_ready => grp_stages_fu_99_ap_ready,
        inplace_buf_address0 => grp_stages_fu_99_inplace_buf_address0,
        inplace_buf_ce0 => grp_stages_fu_99_inplace_buf_ce0,
        inplace_buf_we0 => grp_stages_fu_99_inplace_buf_we0,
        inplace_buf_d0 => grp_stages_fu_99_inplace_buf_d0,
        inplace_buf_q0 => inplace_buf_q0,
        inplace_buf_address1 => grp_stages_fu_99_inplace_buf_address1,
        inplace_buf_ce1 => grp_stages_fu_99_inplace_buf_ce1,
        inplace_buf_we1 => grp_stages_fu_99_inplace_buf_we1,
        inplace_buf_d1 => grp_stages_fu_99_inplace_buf_d1,
        inplace_buf_q1 => inplace_buf_q1,
        mode => mode_read_reg_130,
        inverse => inverse_read_reg_124);

    grp_out_copy_fu_114 : component fiFFNTT_out_copy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_out_copy_fu_114_ap_start,
        ap_done => grp_out_copy_fu_114_ap_done,
        ap_idle => grp_out_copy_fu_114_ap_idle,
        ap_ready => grp_out_copy_fu_114_ap_ready,
        m_axi_gmem0_AWVALID => grp_out_copy_fu_114_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => gmem0_AWREADY,
        m_axi_gmem0_AWADDR => grp_out_copy_fu_114_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_out_copy_fu_114_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_out_copy_fu_114_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_out_copy_fu_114_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_out_copy_fu_114_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_out_copy_fu_114_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_out_copy_fu_114_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_out_copy_fu_114_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_out_copy_fu_114_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_out_copy_fu_114_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_out_copy_fu_114_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_out_copy_fu_114_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => gmem0_WREADY,
        m_axi_gmem0_WDATA => grp_out_copy_fu_114_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_out_copy_fu_114_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_out_copy_fu_114_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_out_copy_fu_114_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_out_copy_fu_114_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_out_copy_fu_114_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => ap_const_logic_0,
        m_axi_gmem0_ARADDR => grp_out_copy_fu_114_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_out_copy_fu_114_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_out_copy_fu_114_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_out_copy_fu_114_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_out_copy_fu_114_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_out_copy_fu_114_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_out_copy_fu_114_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_out_copy_fu_114_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_out_copy_fu_114_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_out_copy_fu_114_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_out_copy_fu_114_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => ap_const_logic_0,
        m_axi_gmem0_RREADY => grp_out_copy_fu_114_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => ap_const_lv64_0,
        m_axi_gmem0_RLAST => ap_const_logic_0,
        m_axi_gmem0_RID => ap_const_lv1_0,
        m_axi_gmem0_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem0_RUSER => ap_const_lv1_0,
        m_axi_gmem0_RRESP => ap_const_lv2_0,
        m_axi_gmem0_BVALID => gmem0_BVALID,
        m_axi_gmem0_BREADY => grp_out_copy_fu_114_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        inplace_buf_address0 => grp_out_copy_fu_114_inplace_buf_address0,
        inplace_buf_ce0 => grp_out_copy_fu_114_inplace_buf_ce0,
        inplace_buf_q0 => inplace_buf_q0,
        inplace_buf_address1 => grp_out_copy_fu_114_inplace_buf_address1,
        inplace_buf_ce1 => grp_out_copy_fu_114_inplace_buf_ce1,
        inplace_buf_q1 => inplace_buf_q1,
        out_buf => in_r_read_reg_137,
        mode => mode_read_reg_130,
        inverse => inverse_read_reg_124);

    control_s_axi_U : component fiFFNTT_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in_r => in_r,
        mode => mode,
        inverse => inverse,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component fiFFNTT_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_DW => 64,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => grp_in_copy_fu_90_m_axi_gmem0_ARADDR,
        I_ARLEN => grp_in_copy_fu_90_m_axi_gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => gmem0_AWVALID,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => grp_out_copy_fu_114_m_axi_gmem0_AWADDR,
        I_AWLEN => grp_out_copy_fu_114_m_axi_gmem0_AWLEN,
        I_WVALID => gmem0_WVALID,
        I_WREADY => gmem0_WREADY,
        I_WDATA => grp_out_copy_fu_114_m_axi_gmem0_WDATA,
        I_WSTRB => grp_out_copy_fu_114_m_axi_gmem0_WSTRB,
        I_BVALID => gmem0_BVALID,
        I_BREADY => gmem0_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_in_copy_fu_90_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_in_copy_fu_90_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_in_copy_fu_90_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_in_copy_fu_90_ap_ready = ap_const_logic_1)) then 
                    grp_in_copy_fu_90_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_out_copy_fu_114_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_out_copy_fu_114_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_out_copy_fu_114_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_out_copy_fu_114_ap_ready = ap_const_logic_1)) then 
                    grp_out_copy_fu_114_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_stages_fu_99_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_stages_fu_99_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_stages_fu_99_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_stages_fu_99_ap_ready = ap_const_logic_1)) then 
                    grp_stages_fu_99_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                in_r_read_reg_137 <= in_r;
                inverse_read_reg_124 <= (0=>inverse, others=>'-');
                mode_read_reg_130 <= (0=>mode, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_in_copy_fu_90_ap_done, grp_stages_fu_99_ap_done, grp_out_copy_fu_114_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_in_copy_fu_90_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_stages_fu_99_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_out_copy_fu_114_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_in_copy_fu_90_ap_done)
    begin
        if ((grp_in_copy_fu_90_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_stages_fu_99_ap_done)
    begin
        if ((grp_stages_fu_99_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_out_copy_fu_114_ap_done)
    begin
        if ((grp_out_copy_fu_114_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_out_copy_fu_114_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_out_copy_fu_114_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_out_copy_fu_114_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_out_copy_fu_114_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem0_ARVALID_assign_proc : process(grp_in_copy_fu_90_m_axi_gmem0_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem0_ARVALID <= grp_in_copy_fu_90_m_axi_gmem0_ARVALID;
        else 
            gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_AWVALID_assign_proc : process(grp_out_copy_fu_114_m_axi_gmem0_AWVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem0_AWVALID <= grp_out_copy_fu_114_m_axi_gmem0_AWVALID;
        else 
            gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_BREADY_assign_proc : process(grp_out_copy_fu_114_m_axi_gmem0_BREADY, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem0_BREADY <= grp_out_copy_fu_114_m_axi_gmem0_BREADY;
        else 
            gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_RREADY_assign_proc : process(grp_in_copy_fu_90_m_axi_gmem0_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem0_RREADY <= grp_in_copy_fu_90_m_axi_gmem0_RREADY;
        else 
            gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_WVALID_assign_proc : process(grp_out_copy_fu_114_m_axi_gmem0_WVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            gmem0_WVALID <= grp_out_copy_fu_114_m_axi_gmem0_WVALID;
        else 
            gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_in_copy_fu_90_ap_start <= grp_in_copy_fu_90_ap_start_reg;
    grp_out_copy_fu_114_ap_start <= grp_out_copy_fu_114_ap_start_reg;
    grp_stages_fu_99_ap_start <= grp_stages_fu_99_ap_start_reg;

    inplace_buf_address0_assign_proc : process(grp_in_copy_fu_90_inplace_buf_address0, grp_stages_fu_99_inplace_buf_address0, grp_out_copy_fu_114_inplace_buf_address0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inplace_buf_address0 <= grp_out_copy_fu_114_inplace_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inplace_buf_address0 <= grp_stages_fu_99_inplace_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inplace_buf_address0 <= grp_in_copy_fu_90_inplace_buf_address0;
        else 
            inplace_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    inplace_buf_address1_assign_proc : process(grp_stages_fu_99_inplace_buf_address1, grp_out_copy_fu_114_inplace_buf_address1, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inplace_buf_address1 <= grp_out_copy_fu_114_inplace_buf_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inplace_buf_address1 <= grp_stages_fu_99_inplace_buf_address1;
        else 
            inplace_buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    inplace_buf_ce0_assign_proc : process(grp_in_copy_fu_90_inplace_buf_ce0, grp_stages_fu_99_inplace_buf_ce0, grp_out_copy_fu_114_inplace_buf_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inplace_buf_ce0 <= grp_out_copy_fu_114_inplace_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inplace_buf_ce0 <= grp_stages_fu_99_inplace_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inplace_buf_ce0 <= grp_in_copy_fu_90_inplace_buf_ce0;
        else 
            inplace_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inplace_buf_ce1_assign_proc : process(grp_stages_fu_99_inplace_buf_ce1, grp_out_copy_fu_114_inplace_buf_ce1, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            inplace_buf_ce1 <= grp_out_copy_fu_114_inplace_buf_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inplace_buf_ce1 <= grp_stages_fu_99_inplace_buf_ce1;
        else 
            inplace_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    inplace_buf_d0_assign_proc : process(grp_in_copy_fu_90_inplace_buf_d0, grp_stages_fu_99_inplace_buf_d0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inplace_buf_d0 <= grp_stages_fu_99_inplace_buf_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inplace_buf_d0 <= grp_in_copy_fu_90_inplace_buf_d0;
        else 
            inplace_buf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    inplace_buf_we0_assign_proc : process(grp_in_copy_fu_90_inplace_buf_we0, grp_stages_fu_99_inplace_buf_we0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inplace_buf_we0 <= grp_stages_fu_99_inplace_buf_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inplace_buf_we0 <= grp_in_copy_fu_90_inplace_buf_we0;
        else 
            inplace_buf_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    inplace_buf_we1_assign_proc : process(grp_stages_fu_99_inplace_buf_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            inplace_buf_we1 <= grp_stages_fu_99_inplace_buf_we1;
        else 
            inplace_buf_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

end behav;
