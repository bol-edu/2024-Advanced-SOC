-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiFFNTT_stages is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inplace_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inplace_buf_ce0 : OUT STD_LOGIC;
    inplace_buf_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    inplace_buf_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inplace_buf_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    inplace_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inplace_buf_ce1 : OUT STD_LOGIC;
    inplace_buf_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    inplace_buf_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    inplace_buf_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    mode : IN STD_LOGIC_VECTOR (0 downto 0);
    inverse : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fiFFNTT_stages is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv11_100 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_const_lv11_80 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_const_lv11_40 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_const_lv11_20 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_const_lv11_10 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_const_lv10_40 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mode_read_read_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stage0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal stage0_ce0 : STD_LOGIC;
    signal stage0_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stage0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal stage0_ce1 : STD_LOGIC;
    signal stage0_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage0_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stage1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal stage1_ce0 : STD_LOGIC;
    signal stage1_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal stage1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal stage1_ce1 : STD_LOGIC;
    signal stage1_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal stage1_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_PE_fu_86_ap_start : STD_LOGIC;
    signal grp_PE_fu_86_ap_done : STD_LOGIC;
    signal grp_PE_fu_86_ap_idle : STD_LOGIC;
    signal grp_PE_fu_86_ap_ready : STD_LOGIC;
    signal grp_PE_fu_86_inplace_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_PE_fu_86_inplace_buf_ce0 : STD_LOGIC;
    signal grp_PE_fu_86_inplace_buf_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_PE_fu_86_inplace_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_PE_fu_86_inplace_buf_ce1 : STD_LOGIC;
    signal grp_PE_fu_86_inplace_buf_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_PE_fu_86_stage0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_PE_fu_86_stage0_ce0 : STD_LOGIC;
    signal grp_PE_fu_86_stage0_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_PE_fu_86_stage0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_PE_fu_86_stage0_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_PE_fu_86_stage0_ce1 : STD_LOGIC;
    signal grp_PE_fu_86_stage0_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_PE_fu_86_stage0_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_PE_fu_86_in_t : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_PE_fu_86_in_m : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_PE_fu_86_mode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PE_fu_86_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fiFFNTT_PE IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inplace_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inplace_buf_ce0 : OUT STD_LOGIC;
        inplace_buf_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        inplace_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        inplace_buf_ce1 : OUT STD_LOGIC;
        inplace_buf_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        stage0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        stage0_ce0 : OUT STD_LOGIC;
        stage0_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        stage0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        stage0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        stage0_ce1 : OUT STD_LOGIC;
        stage0_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        stage0_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_t : IN STD_LOGIC_VECTOR (10 downto 0);
        in_m : IN STD_LOGIC_VECTOR (9 downto 0);
        mode : IN STD_LOGIC_VECTOR (0 downto 0);
        inverse : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fiFFNTT_stages_stage0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (7 downto 0);
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC_VECTOR (7 downto 0);
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    stage0_U : component fiFFNTT_stages_stage0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stage0_address0,
        ce0 => stage0_ce0,
        we0 => stage0_we0,
        d0 => grp_PE_fu_86_stage0_d0,
        q0 => stage0_q0,
        address1 => stage0_address1,
        ce1 => stage0_ce1,
        we1 => stage0_we1,
        d1 => grp_PE_fu_86_stage0_d1,
        q1 => stage0_q1);

    stage1_U : component fiFFNTT_stages_stage0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stage1_address0,
        ce0 => stage1_ce0,
        we0 => stage1_we0,
        d0 => grp_PE_fu_86_stage0_d0,
        q0 => stage1_q0,
        address1 => stage1_address1,
        ce1 => stage1_ce1,
        we1 => stage1_we1,
        d1 => grp_PE_fu_86_stage0_d1,
        q1 => stage1_q1);

    grp_PE_fu_86 : component fiFFNTT_PE
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_PE_fu_86_ap_start,
        ap_done => grp_PE_fu_86_ap_done,
        ap_idle => grp_PE_fu_86_ap_idle,
        ap_ready => grp_PE_fu_86_ap_ready,
        inplace_buf_address0 => grp_PE_fu_86_inplace_buf_address0,
        inplace_buf_ce0 => grp_PE_fu_86_inplace_buf_ce0,
        inplace_buf_q0 => grp_PE_fu_86_inplace_buf_q0,
        inplace_buf_address1 => grp_PE_fu_86_inplace_buf_address1,
        inplace_buf_ce1 => grp_PE_fu_86_inplace_buf_ce1,
        inplace_buf_q1 => grp_PE_fu_86_inplace_buf_q1,
        stage0_address0 => grp_PE_fu_86_stage0_address0,
        stage0_ce0 => grp_PE_fu_86_stage0_ce0,
        stage0_we0 => grp_PE_fu_86_stage0_we0,
        stage0_d0 => grp_PE_fu_86_stage0_d0,
        stage0_address1 => grp_PE_fu_86_stage0_address1,
        stage0_ce1 => grp_PE_fu_86_stage0_ce1,
        stage0_we1 => grp_PE_fu_86_stage0_we1,
        stage0_d1 => grp_PE_fu_86_stage0_d1,
        in_t => grp_PE_fu_86_in_t,
        in_m => grp_PE_fu_86_in_m,
        mode => grp_PE_fu_86_mode,
        inverse => inverse);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_PE_fu_86_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_PE_fu_86_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((mode_read_read_fu_80_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((mode = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_PE_fu_86_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PE_fu_86_ap_ready = ap_const_logic_1)) then 
                    grp_PE_fu_86_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, mode, mode_read_read_fu_80_p2, grp_PE_fu_86_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((mode_read_read_fu_80_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((mode = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_PE_fu_86_ap_done)
    begin
        if ((grp_PE_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(mode, grp_PE_fu_86_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_PE_fu_86_ap_done = ap_const_logic_0) and (mode = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_PE_fu_86_ap_done, ap_CS_fsm_state21)
    begin
        if ((((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_PE_fu_86_ap_done, ap_CS_fsm_state21)
    begin
        if (((grp_PE_fu_86_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_PE_fu_86_ap_start <= grp_PE_fu_86_ap_start_reg;

    grp_PE_fu_86_in_m_assign_proc : process(mode, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_80;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_40;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_PE_fu_86_in_m <= ap_const_lv10_1;
        else 
            grp_PE_fu_86_in_m <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_PE_fu_86_in_t_assign_proc : process(mode, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_40;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_80;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_100;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_PE_fu_86_in_t <= ap_const_lv11_400;
        else 
            grp_PE_fu_86_in_t <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_PE_fu_86_inplace_buf_q0_assign_proc : process(inplace_buf_q0, mode, stage0_q0, stage1_q0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_PE_fu_86_inplace_buf_q0 <= stage0_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_PE_fu_86_inplace_buf_q0 <= stage1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_PE_fu_86_inplace_buf_q0 <= inplace_buf_q0;
        else 
            grp_PE_fu_86_inplace_buf_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_PE_fu_86_inplace_buf_q1_assign_proc : process(inplace_buf_q1, mode, stage0_q1, stage1_q1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_PE_fu_86_inplace_buf_q1 <= stage0_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_PE_fu_86_inplace_buf_q1 <= stage1_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_PE_fu_86_inplace_buf_q1 <= inplace_buf_q1;
        else 
            grp_PE_fu_86_inplace_buf_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_PE_fu_86_mode_assign_proc : process(mode, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_PE_fu_86_mode <= mode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_PE_fu_86_mode <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_PE_fu_86_mode <= ap_const_lv1_0;
        else 
            grp_PE_fu_86_mode <= "X";
        end if; 
    end process;


    inplace_buf_address0_assign_proc : process(grp_PE_fu_86_inplace_buf_address0, grp_PE_fu_86_stage0_address0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inplace_buf_address0 <= grp_PE_fu_86_stage0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inplace_buf_address0 <= grp_PE_fu_86_inplace_buf_address0;
        else 
            inplace_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    inplace_buf_address1_assign_proc : process(grp_PE_fu_86_inplace_buf_address1, grp_PE_fu_86_stage0_address1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inplace_buf_address1 <= grp_PE_fu_86_stage0_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inplace_buf_address1 <= grp_PE_fu_86_inplace_buf_address1;
        else 
            inplace_buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    inplace_buf_ce0_assign_proc : process(grp_PE_fu_86_inplace_buf_ce0, grp_PE_fu_86_stage0_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inplace_buf_ce0 <= grp_PE_fu_86_stage0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inplace_buf_ce0 <= grp_PE_fu_86_inplace_buf_ce0;
        else 
            inplace_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inplace_buf_ce1_assign_proc : process(grp_PE_fu_86_inplace_buf_ce1, grp_PE_fu_86_stage0_ce1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inplace_buf_ce1 <= grp_PE_fu_86_stage0_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inplace_buf_ce1 <= grp_PE_fu_86_inplace_buf_ce1;
        else 
            inplace_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    inplace_buf_d0 <= grp_PE_fu_86_stage0_d0;
    inplace_buf_d1 <= grp_PE_fu_86_stage0_d1;

    inplace_buf_we0_assign_proc : process(grp_PE_fu_86_stage0_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inplace_buf_we0 <= grp_PE_fu_86_stage0_we0;
        else 
            inplace_buf_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    inplace_buf_we1_assign_proc : process(grp_PE_fu_86_stage0_we1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            inplace_buf_we1 <= grp_PE_fu_86_stage0_we1;
        else 
            inplace_buf_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    mode_read_read_fu_80_p2 <= mode;

    stage0_address0_assign_proc : process(mode, grp_PE_fu_86_inplace_buf_address0, grp_PE_fu_86_stage0_address0, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage0_address0 <= grp_PE_fu_86_stage0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            stage0_address0 <= grp_PE_fu_86_inplace_buf_address0;
        else 
            stage0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    stage0_address1_assign_proc : process(mode, grp_PE_fu_86_inplace_buf_address1, grp_PE_fu_86_stage0_address1, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage0_address1 <= grp_PE_fu_86_stage0_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            stage0_address1 <= grp_PE_fu_86_inplace_buf_address1;
        else 
            stage0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    stage0_ce0_assign_proc : process(mode, grp_PE_fu_86_inplace_buf_ce0, grp_PE_fu_86_stage0_ce0, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage0_ce0 <= grp_PE_fu_86_stage0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            stage0_ce0 <= grp_PE_fu_86_inplace_buf_ce0;
        else 
            stage0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_ce1_assign_proc : process(mode, grp_PE_fu_86_inplace_buf_ce1, grp_PE_fu_86_stage0_ce1, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage0_ce1 <= grp_PE_fu_86_stage0_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            stage0_ce1 <= grp_PE_fu_86_inplace_buf_ce1;
        else 
            stage0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage0_we0_assign_proc : process(mode, grp_PE_fu_86_stage0_we0, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage0_we0 <= grp_PE_fu_86_stage0_we0;
        else 
            stage0_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    stage0_we1_assign_proc : process(mode, grp_PE_fu_86_stage0_we1, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage0_we1 <= grp_PE_fu_86_stage0_we1;
        else 
            stage0_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    stage1_address0_assign_proc : process(mode, grp_PE_fu_86_inplace_buf_address0, grp_PE_fu_86_stage0_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stage1_address0 <= grp_PE_fu_86_stage0_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage1_address0 <= grp_PE_fu_86_inplace_buf_address0;
        else 
            stage1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    stage1_address1_assign_proc : process(mode, grp_PE_fu_86_inplace_buf_address1, grp_PE_fu_86_stage0_address1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stage1_address1 <= grp_PE_fu_86_stage0_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage1_address1 <= grp_PE_fu_86_inplace_buf_address1;
        else 
            stage1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    stage1_ce0_assign_proc : process(mode, grp_PE_fu_86_inplace_buf_ce0, grp_PE_fu_86_stage0_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stage1_ce0 <= grp_PE_fu_86_stage0_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage1_ce0 <= grp_PE_fu_86_inplace_buf_ce0;
        else 
            stage1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_ce1_assign_proc : process(mode, grp_PE_fu_86_inplace_buf_ce1, grp_PE_fu_86_stage0_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stage1_ce1 <= grp_PE_fu_86_stage0_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((mode = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            stage1_ce1 <= grp_PE_fu_86_inplace_buf_ce1;
        else 
            stage1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stage1_we0_assign_proc : process(grp_PE_fu_86_stage0_we0, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stage1_we0 <= grp_PE_fu_86_stage0_we0;
        else 
            stage1_we0 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    stage1_we1_assign_proc : process(grp_PE_fu_86_stage0_we1, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stage1_we1 <= grp_PE_fu_86_stage0_we1;
        else 
            stage1_we1 <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

end behav;
