-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fiFFNTT_out_copy is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inplace_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inplace_buf_ce0 : OUT STD_LOGIC;
    inplace_buf_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    inplace_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inplace_buf_ce1 : OUT STD_LOGIC;
    inplace_buf_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    out_buf : IN STD_LOGIC_VECTOR (63 downto 0);
    mode : IN STD_LOGIC_VECTOR (0 downto 0);
    inverse : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fiFFNTT_out_copy is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_FF7 : STD_LOGIC_VECTOR (11 downto 0) := "111111110111";
    constant ap_const_lv11_7F7 : STD_LOGIC_VECTOR (10 downto 0) := "11111110111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_predicate_op61_writereq_state9 : BOOLEAN;
    signal ap_predicate_op65_writereq_state9 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_predicate_op81_write_state10 : BOOLEAN;
    signal ap_predicate_op83_write_state10 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_predicate_op97_writeresp_state15 : BOOLEAN;
    signal ap_predicate_op99_writeresp_state15 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln46_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem0_blk_n_W : STD_LOGIC;
    signal gmem0_blk_n_B : STD_LOGIC;
    signal reg_206 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln56_fu_235_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln56_reg_398 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln56_reg_398_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln56_reg_398_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln56_reg_398_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln56_reg_398_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln56_reg_398_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln56_reg_398_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inplace_buf_addr_reg_403 : STD_LOGIC_VECTOR (9 downto 0);
    signal inplace_buf_addr_reg_403_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inplace_buf_addr_reg_403_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inplace_buf_addr_reg_403_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inplace_buf_addr_reg_403_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inplace_buf_addr_reg_403_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal inplace_buf_addr_reg_403_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln56_1_fu_244_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_1_reg_409 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_1_reg_409_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_1_reg_409_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_1_reg_409_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_1_reg_409_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_1_reg_409_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_1_reg_409_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln56_1_reg_409_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_monty_mul_fu_187_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_reg_421 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln55_fu_358_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln55_reg_438 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_monty_mul_fu_187_x : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_monty_mul_fu_187_ap_ce : STD_LOGIC;
    signal ap_predicate_op41_call_state2 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp41 : BOOLEAN;
    signal zext_ln46_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln59_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln57_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln52_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln57_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_100 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln46_fu_224_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln56_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_249_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal exponent_fu_294_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln298_fu_304_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal exponent_1_fu_308_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_320_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln298_fu_314_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln301_fu_336_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln304_fu_344_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal value_fu_348_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fiFFNTT_monty_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component fiFFNTT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_monty_mul_fu_187 : component fiFFNTT_monty_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        x => grp_monty_mul_fu_187_x,
        ap_return => grp_monty_mul_fu_187_ap_return,
        ap_ce => grp_monty_mul_fu_187_ap_ce);

    flow_control_loop_pipe_sequential_init_U : component fiFFNTT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln46_fu_218_p2 = ap_const_lv1_0))) then 
                    j_fu_100 <= add_ln46_fu_224_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_100 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                inplace_buf_addr_reg_403_pp0_iter2_reg <= inplace_buf_addr_reg_403_pp0_iter1_reg;
                inplace_buf_addr_reg_403_pp0_iter3_reg <= inplace_buf_addr_reg_403_pp0_iter2_reg;
                inplace_buf_addr_reg_403_pp0_iter4_reg <= inplace_buf_addr_reg_403_pp0_iter3_reg;
                inplace_buf_addr_reg_403_pp0_iter5_reg <= inplace_buf_addr_reg_403_pp0_iter4_reg;
                inplace_buf_addr_reg_403_pp0_iter6_reg <= inplace_buf_addr_reg_403_pp0_iter5_reg;
                trunc_ln56_1_reg_409_pp0_iter2_reg <= trunc_ln56_1_reg_409;
                trunc_ln56_1_reg_409_pp0_iter3_reg <= trunc_ln56_1_reg_409_pp0_iter2_reg;
                trunc_ln56_1_reg_409_pp0_iter4_reg <= trunc_ln56_1_reg_409_pp0_iter3_reg;
                trunc_ln56_1_reg_409_pp0_iter5_reg <= trunc_ln56_1_reg_409_pp0_iter4_reg;
                trunc_ln56_1_reg_409_pp0_iter6_reg <= trunc_ln56_1_reg_409_pp0_iter5_reg;
                trunc_ln56_1_reg_409_pp0_iter7_reg <= trunc_ln56_1_reg_409_pp0_iter6_reg;
                trunc_ln56_1_reg_409_pp0_iter8_reg <= trunc_ln56_1_reg_409_pp0_iter7_reg;
                trunc_ln56_reg_398_pp0_iter2_reg <= trunc_ln56_reg_398_pp0_iter1_reg;
                trunc_ln56_reg_398_pp0_iter3_reg <= trunc_ln56_reg_398_pp0_iter2_reg;
                trunc_ln56_reg_398_pp0_iter4_reg <= trunc_ln56_reg_398_pp0_iter3_reg;
                trunc_ln56_reg_398_pp0_iter5_reg <= trunc_ln56_reg_398_pp0_iter4_reg;
                trunc_ln56_reg_398_pp0_iter6_reg <= trunc_ln56_reg_398_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                inplace_buf_addr_reg_403_pp0_iter1_reg <= inplace_buf_addr_reg_403;
                trunc_ln56_reg_398_pp0_iter1_reg <= trunc_ln56_reg_398;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_fu_218_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                inplace_buf_addr_reg_403 <= zext_ln46_fu_230_p1(10 - 1 downto 0);
                trunc_ln56_reg_398 <= trunc_ln56_fu_235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (mode = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inverse = ap_const_lv1_1) and (mode = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inverse = ap_const_lv1_0) and (mode = ap_const_lv1_0)))) then
                reg_206 <= grp_fu_192_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (mode = ap_const_lv1_1))) then
                select_ln55_reg_438 <= select_ln55_fu_358_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inverse = ap_const_lv1_1) and (mode = ap_const_lv1_0))) then
                tmp3_reg_421 <= grp_monty_mul_fu_187_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (mode = ap_const_lv1_0))) then
                trunc_ln56_1_reg_409 <= trunc_ln56_1_fu_244_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln298_fu_314_p2 <= std_logic_vector(unsigned(exponent_fu_294_p4) + unsigned(ap_const_lv11_7F7));
    add_ln46_fu_224_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter14, m_axi_gmem0_BVALID, ap_predicate_op97_writeresp_state15, ap_predicate_op99_writeresp_state15, mode)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (((ap_predicate_op99_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((ap_predicate_op97_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((mode = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, m_axi_gmem0_BVALID, ap_block_state9_io, ap_block_state10_io, ap_predicate_op97_writeresp_state15, ap_predicate_op99_writeresp_state15, mode)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (((ap_predicate_op99_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((ap_predicate_op97_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((mode = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_io)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp41_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, m_axi_gmem0_BVALID, ap_block_state9_io, ap_block_state10_io, ap_predicate_op97_writeresp_state15, ap_predicate_op99_writeresp_state15, mode)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp41 <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (((ap_predicate_op99_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((ap_predicate_op97_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((mode = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_io)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, m_axi_gmem0_BVALID, ap_block_state9_io, ap_block_state10_io, ap_predicate_op97_writeresp_state15, ap_predicate_op99_writeresp_state15, mode)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (((ap_predicate_op99_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((ap_predicate_op97_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((mode = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_io)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io)));
    end process;


    ap_block_state10_io_assign_proc : process(m_axi_gmem0_WREADY, ap_predicate_op81_write_state10, ap_predicate_op83_write_state10, mode)
    begin
                ap_block_state10_io <= (((m_axi_gmem0_WREADY = ap_const_logic_0) and (ap_predicate_op83_write_state10 = ap_const_boolean_1)) or ((m_axi_gmem0_WREADY = ap_const_logic_0) and (ap_predicate_op81_write_state10 = ap_const_boolean_1)) or ((m_axi_gmem0_WREADY = ap_const_logic_0) and (mode = ap_const_lv1_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage0_iter14_assign_proc : process(m_axi_gmem0_BVALID, ap_predicate_op97_writeresp_state15, ap_predicate_op99_writeresp_state15, mode)
    begin
                ap_block_state15_pp0_stage0_iter14 <= (((ap_predicate_op99_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((ap_predicate_op97_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((mode = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)));
    end process;


    ap_block_state15_pp0_stage0_iter14_ignore_call0_assign_proc : process(m_axi_gmem0_BVALID, ap_predicate_op97_writeresp_state15, ap_predicate_op99_writeresp_state15, mode)
    begin
                ap_block_state15_pp0_stage0_iter14_ignore_call0 <= (((ap_predicate_op99_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((ap_predicate_op97_writeresp_state15 = ap_const_boolean_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)) or ((mode = ap_const_lv1_1) and (m_axi_gmem0_BVALID = ap_const_logic_0)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(m_axi_gmem0_AWREADY, ap_predicate_op61_writereq_state9, ap_predicate_op65_writereq_state9, mode)
    begin
                ap_block_state9_io <= (((m_axi_gmem0_AWREADY = ap_const_logic_0) and (mode = ap_const_lv1_1)) or ((m_axi_gmem0_AWREADY = ap_const_logic_0) and (ap_predicate_op65_writereq_state9 = ap_const_boolean_1)) or ((m_axi_gmem0_AWREADY = ap_const_logic_0) and (ap_predicate_op61_writereq_state9 = ap_const_boolean_1)));
    end process;

        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln46_fu_218_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln46_fu_218_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter13_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op41_call_state2_assign_proc : process(mode, inverse)
    begin
                ap_predicate_op41_call_state2 <= ((inverse = ap_const_lv1_1) and (mode = ap_const_lv1_0));
    end process;


    ap_predicate_op61_writereq_state9_assign_proc : process(mode, inverse)
    begin
                ap_predicate_op61_writereq_state9 <= ((inverse = ap_const_lv1_0) and (mode = ap_const_lv1_0));
    end process;


    ap_predicate_op65_writereq_state9_assign_proc : process(mode, inverse)
    begin
                ap_predicate_op65_writereq_state9 <= ((inverse = ap_const_lv1_1) and (mode = ap_const_lv1_0));
    end process;


    ap_predicate_op81_write_state10_assign_proc : process(mode, inverse)
    begin
                ap_predicate_op81_write_state10 <= ((inverse = ap_const_lv1_0) and (mode = ap_const_lv1_0));
    end process;


    ap_predicate_op83_write_state10_assign_proc : process(mode, inverse)
    begin
                ap_predicate_op83_write_state10 <= ((inverse = ap_const_lv1_1) and (mode = ap_const_lv1_0));
    end process;


    ap_predicate_op97_writeresp_state15_assign_proc : process(mode, inverse)
    begin
                ap_predicate_op97_writeresp_state15 <= ((inverse = ap_const_lv1_0) and (mode = ap_const_lv1_0));
    end process;


    ap_predicate_op99_writeresp_state15_assign_proc : process(mode, inverse)
    begin
                ap_predicate_op99_writeresp_state15 <= ((inverse = ap_const_lv1_1) and (mode = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_100, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_100;
        end if; 
    end process;

    exponent_1_fu_308_p2 <= std_logic_vector(unsigned(zext_ln298_fu_304_p1) + unsigned(ap_const_lv12_FF7));
    exponent_fu_294_p4 <= inplace_buf_q0(62 downto 52);

    gmem0_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter8, m_axi_gmem0_AWREADY, ap_predicate_op61_writereq_state9, ap_predicate_op65_writereq_state9, mode, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (mode = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op65_writereq_state9 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op61_writereq_state9 = ap_const_boolean_1)))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter14, m_axi_gmem0_BVALID, ap_predicate_op97_writeresp_state15, ap_predicate_op99_writeresp_state15, mode, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op99_writeresp_state15 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op97_writeresp_state15 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (mode = ap_const_lv1_1)))) then 
            gmem0_blk_n_B <= m_axi_gmem0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem0_WREADY, ap_predicate_op81_write_state10, ap_predicate_op83_write_state10, mode, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op83_write_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op81_write_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (mode = ap_const_lv1_1)))) then 
            gmem0_blk_n_W <= m_axi_gmem0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_192_p2 <= std_logic_vector(unsigned(zext_ln56_fu_256_p1) + unsigned(out_buf));

    grp_monty_mul_fu_187_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp41))) then 
            grp_monty_mul_fu_187_ap_ce <= ap_const_logic_1;
        else 
            grp_monty_mul_fu_187_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_monty_mul_fu_187_x <= inplace_buf_q1(16 - 1 downto 0);
    icmp_ln46_fu_218_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv11_400) else "0";
    inplace_buf_address0 <= inplace_buf_addr_reg_403_pp0_iter6_reg;
    inplace_buf_address1 <= zext_ln46_fu_230_p1(10 - 1 downto 0);

    inplace_buf_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inplace_buf_ce0 <= ap_const_logic_1;
        else 
            inplace_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inplace_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inplace_buf_ce1 <= ap_const_logic_1;
        else 
            inplace_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;

    m_axi_gmem0_AWADDR_assign_proc : process(ap_enable_reg_pp0_iter8, ap_predicate_op61_writereq_state9, ap_predicate_op65_writereq_state9, mode, ap_block_pp0_stage0_11001, sext_ln59_fu_261_p1, sext_ln57_fu_272_p1, sext_ln52_fu_283_p1)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
            if ((mode = ap_const_lv1_1)) then 
                m_axi_gmem0_AWADDR <= sext_ln52_fu_283_p1;
            elsif ((ap_predicate_op65_writereq_state9 = ap_const_boolean_1)) then 
                m_axi_gmem0_AWADDR <= sext_ln57_fu_272_p1;
            elsif ((ap_predicate_op61_writereq_state9 = ap_const_boolean_1)) then 
                m_axi_gmem0_AWADDR <= sext_ln59_fu_261_p1;
            else 
                m_axi_gmem0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_1;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem0_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter8, ap_predicate_op61_writereq_state9, ap_predicate_op65_writereq_state9, mode, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (mode = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op65_writereq_state9 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op61_writereq_state9 = ap_const_boolean_1)))) then 
            m_axi_gmem0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem0_BREADY_assign_proc : process(ap_enable_reg_pp0_iter14, ap_predicate_op97_writeresp_state15, ap_predicate_op99_writeresp_state15, mode, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op99_writeresp_state15 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op97_writeresp_state15 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (mode = ap_const_lv1_1)))) then 
            m_axi_gmem0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_RREADY <= ap_const_logic_0;

    m_axi_gmem0_WDATA_assign_proc : process(ap_enable_reg_pp0_iter9, ap_predicate_op81_write_state10, ap_predicate_op83_write_state10, mode, select_ln55_reg_438, zext_ln59_fu_365_p1, ap_block_pp0_stage0_01001, zext_ln57_fu_369_p1)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((mode = ap_const_lv1_1)) then 
                m_axi_gmem0_WDATA <= select_ln55_reg_438;
            elsif ((ap_predicate_op83_write_state10 = ap_const_boolean_1)) then 
                m_axi_gmem0_WDATA <= zext_ln57_fu_369_p1;
            elsif ((ap_predicate_op81_write_state10 = ap_const_boolean_1)) then 
                m_axi_gmem0_WDATA <= zext_ln59_fu_365_p1;
            else 
                m_axi_gmem0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;

    m_axi_gmem0_WSTRB_assign_proc : process(ap_enable_reg_pp0_iter9, ap_predicate_op81_write_state10, ap_predicate_op83_write_state10, mode, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (mode = ap_const_lv1_1))) then 
            m_axi_gmem0_WSTRB <= ap_const_lv8_FF;
        elsif ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_predicate_op83_write_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_predicate_op81_write_state10 = ap_const_boolean_1)))) then 
            m_axi_gmem0_WSTRB <= ap_const_lv8_3;
        else 
            m_axi_gmem0_WSTRB <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_WUSER <= ap_const_lv1_0;

    m_axi_gmem0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter9, ap_predicate_op81_write_state10, ap_predicate_op83_write_state10, mode, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op83_write_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op81_write_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (mode = ap_const_lv1_1)))) then 
            m_axi_gmem0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln301_fu_336_p3 <= 
        ap_const_lv11_0 when (tmp_fu_320_p3(0) = '1') else 
        add_ln298_fu_314_p2;
    select_ln55_fu_358_p3 <= 
        value_fu_348_p4 when (inverse(0) = '1') else 
        inplace_buf_q0;
        sext_ln52_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_206),64));

        sext_ln57_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_206),64));

        sext_ln59_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_206),64));

    shl_ln_fu_249_p3 <= (trunc_ln56_reg_398_pp0_iter6_reg & ap_const_lv3_0);
    tmp_1_fu_328_p3 <= inplace_buf_q0(63 downto 63);
    tmp_fu_320_p3 <= exponent_1_fu_308_p2(11 downto 11);
    trunc_ln304_fu_344_p1 <= inplace_buf_q0(52 - 1 downto 0);
    trunc_ln56_1_fu_244_p1 <= inplace_buf_q1(16 - 1 downto 0);
    trunc_ln56_fu_235_p1 <= ap_sig_allocacmp_j_1(10 - 1 downto 0);
    value_fu_348_p4 <= ((tmp_1_fu_328_p3 & select_ln301_fu_336_p3) & trunc_ln304_fu_344_p1);
    zext_ln298_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exponent_fu_294_p4),12));
    zext_ln46_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),64));
    zext_ln56_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_249_p3),64));
    zext_ln57_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_reg_421),64));
    zext_ln59_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln56_1_reg_409_pp0_iter8_reg),64));
end behav;
