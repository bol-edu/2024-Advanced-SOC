-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2023.2/1059873 Production Release
--  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
-- 
--  Generated by:   r12016@cad40
--  Generated date: Sat Jun 15 02:23:56 2024
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_15_12_32768_1_32768_12_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_15_12_32768_1_32768_12_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    re : OUT STD_LOGIC;
    radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    re_d : IN STD_LOGIC;
    wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_15_12_32768_1_32768_12_1_gen;

ARCHITECTURE v4 OF UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_15_12_32768_1_32768_12_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  re <= (readA_r_ram_ir_internal_RMASK_B_d);
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_15_12_32768_1_32768_12_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_15_12_32768_1_32768_12_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    re : OUT STD_LOGIC;
    radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    re_d : IN STD_LOGIC;
    wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_15_12_32768_1_32768_12_1_gen;

ARCHITECTURE v4 OF UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_15_12_32768_1_32768_12_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  re <= (readA_r_ram_ir_internal_RMASK_B_d);
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_4_14_12_13068_1_13068_12_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_4_14_12_13068_1_13068_12_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    re : OUT STD_LOGIC;
    radr : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (13 DOWNTO 0);
    re_d : IN STD_LOGIC;
    wadr_d : IN STD_LOGIC_VECTOR (13 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_4_14_12_13068_1_13068_12_1_gen;

ARCHITECTURE v4 OF UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_4_14_12_13068_1_13068_12_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  re <= (readA_r_ram_ir_internal_RMASK_B_d);
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_3_15_12_32768_1_32768_12_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_3_15_12_32768_1_32768_12_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    re : OUT STD_LOGIC;
    radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    re_d : IN STD_LOGIC;
    wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_3_15_12_32768_1_32768_12_1_gen;

ARCHITECTURE v4 OF UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_3_15_12_32768_1_32768_12_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  re <= (readA_r_ram_ir_internal_RMASK_B_d);
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_run_run_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_run_run_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    run_wen : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (59 DOWNTO 0);
    for_C_1_tr0 : IN STD_LOGIC;
    for_1_for_for_C_0_tr0 : IN STD_LOGIC;
    for_1_for_C_0_tr0 : IN STD_LOGIC;
    for_1_C_0_tr0 : IN STD_LOGIC;
    for_2_for_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
    for_2_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
    for_2_for_for_for_C_1_tr0 : IN STD_LOGIC;
    for_2_for_for_C_0_tr0 : IN STD_LOGIC;
    for_2_for_C_0_tr0 : IN STD_LOGIC;
    for_2_C_0_tr0 : IN STD_LOGIC;
    for_3_for_C_0_tr0 : IN STD_LOGIC;
    for_3_for_1_C_0_tr0 : IN STD_LOGIC;
    for_3_for_2_C_10_tr0 : IN STD_LOGIC;
    for_3_C_0_tr0 : IN STD_LOGIC;
    for_4_for_for_C_0_tr0 : IN STD_LOGIC;
    for_4_for_C_0_tr0 : IN STD_LOGIC;
    for_4_C_0_tr0 : IN STD_LOGIC;
    for_5_for_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
    for_5_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
    for_5_for_for_for_C_1_tr0 : IN STD_LOGIC;
    for_5_for_for_C_0_tr0 : IN STD_LOGIC;
    for_5_for_C_0_tr0 : IN STD_LOGIC;
    for_5_C_0_tr0 : IN STD_LOGIC;
    for_6_for_C_0_tr0 : IN STD_LOGIC;
    for_6_for_1_C_0_tr0 : IN STD_LOGIC;
    for_6_for_2_C_10_tr0 : IN STD_LOGIC;
    for_6_C_0_tr0 : IN STD_LOGIC;
    for_7_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
    for_7_for_for_for_for_C_0_tr1 : IN STD_LOGIC;
    for_7_for_for_C_1_tr0 : IN STD_LOGIC;
    for_7_for_C_0_tr0 : IN STD_LOGIC;
    for_7_C_0_tr0 : IN STD_LOGIC;
    for_8_C_2_tr0 : IN STD_LOGIC
  );
END UNET_IP_main_run_run_fsm;

ARCHITECTURE v4 OF UNET_IP_main_run_run_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for UNET_IP_main_run_run_fsm_1
  TYPE UNET_IP_main_run_run_fsm_1_ST IS (main_C_0, for_C_0, for_C_1, for_1_for_for_C_0,
      for_1_for_C_0, for_1_C_0, for_2_for_for_for_for_for_C_0, for_2_for_for_for_for_C_0,
      for_2_for_for_for_C_0, for_2_for_for_for_C_1, for_2_for_for_C_0, for_2_for_C_0,
      for_2_C_0, for_3_for_C_0, for_3_for_1_C_0, for_3_for_2_C_0, for_3_for_2_C_1,
      for_3_for_2_C_2, for_3_for_2_C_3, for_3_for_2_C_4, for_3_for_2_C_5, for_3_for_2_C_6,
      for_3_for_2_C_7, for_3_for_2_C_8, for_3_for_2_C_9, for_3_for_2_C_10, for_3_C_0,
      for_4_for_for_C_0, for_4_for_C_0, for_4_C_0, for_5_for_for_for_for_for_C_0,
      for_5_for_for_for_for_C_0, for_5_for_for_for_C_0, for_5_for_for_for_C_1, for_5_for_for_C_0,
      for_5_for_C_0, for_5_C_0, for_6_for_C_0, for_6_for_1_C_0, for_6_for_2_C_0,
      for_6_for_2_C_1, for_6_for_2_C_2, for_6_for_2_C_3, for_6_for_2_C_4, for_6_for_2_C_5,
      for_6_for_2_C_6, for_6_for_2_C_7, for_6_for_2_C_8, for_6_for_2_C_9, for_6_for_2_C_10,
      for_6_C_0, for_7_for_for_for_for_C_0, for_7_for_for_for_C_0, for_7_for_for_C_0,
      for_7_for_for_C_1, for_7_for_C_0, for_7_C_0, for_8_C_0, for_8_C_1, for_8_C_2);

  SIGNAL state_var : UNET_IP_main_run_run_fsm_1_ST;
  SIGNAL state_var_NS : UNET_IP_main_run_run_fsm_1_ST;

BEGIN
  UNET_IP_main_run_run_fsm_1 : PROCESS (for_C_1_tr0, for_1_for_for_C_0_tr0, for_1_for_C_0_tr0,
      for_1_C_0_tr0, for_2_for_for_for_for_for_C_0_tr0, for_2_for_for_for_for_C_0_tr0,
      for_2_for_for_for_C_1_tr0, for_2_for_for_C_0_tr0, for_2_for_C_0_tr0, for_2_C_0_tr0,
      for_3_for_C_0_tr0, for_3_for_1_C_0_tr0, for_3_for_2_C_10_tr0, for_3_C_0_tr0,
      for_4_for_for_C_0_tr0, for_4_for_C_0_tr0, for_4_C_0_tr0, for_5_for_for_for_for_for_C_0_tr0,
      for_5_for_for_for_for_C_0_tr0, for_5_for_for_for_C_1_tr0, for_5_for_for_C_0_tr0,
      for_5_for_C_0_tr0, for_5_C_0_tr0, for_6_for_C_0_tr0, for_6_for_1_C_0_tr0, for_6_for_2_C_10_tr0,
      for_6_C_0_tr0, for_7_for_for_for_for_C_0_tr0, for_7_for_for_for_for_C_0_tr1,
      for_7_for_for_C_1_tr0, for_7_for_C_0_tr0, for_7_C_0_tr0, for_8_C_2_tr0, state_var)
  BEGIN
    CASE state_var IS
      WHEN for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000000000010");
        state_var_NS <= for_C_1;
      WHEN for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000000000100");
        IF ( for_C_1_tr0 = '1' ) THEN
          state_var_NS <= for_1_for_for_C_0;
        ELSE
          state_var_NS <= for_C_0;
        END IF;
      WHEN for_1_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000000001000");
        IF ( for_1_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_1_for_C_0;
        ELSE
          state_var_NS <= for_1_for_for_C_0;
        END IF;
      WHEN for_1_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000000010000");
        IF ( for_1_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_1_C_0;
        ELSE
          state_var_NS <= for_1_for_for_C_0;
        END IF;
      WHEN for_1_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000000100000");
        IF ( for_1_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_2_for_for_for_for_for_C_0;
        ELSE
          state_var_NS <= for_1_for_for_C_0;
        END IF;
      WHEN for_2_for_for_for_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000001000000");
        IF ( for_2_for_for_for_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_2_for_for_for_for_C_0;
        ELSE
          state_var_NS <= for_2_for_for_for_for_for_C_0;
        END IF;
      WHEN for_2_for_for_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000010000000");
        IF ( for_2_for_for_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_2_for_for_for_C_0;
        ELSE
          state_var_NS <= for_2_for_for_for_for_for_C_0;
        END IF;
      WHEN for_2_for_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000100000000");
        state_var_NS <= for_2_for_for_for_C_1;
      WHEN for_2_for_for_for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000001000000000");
        IF ( for_2_for_for_for_C_1_tr0 = '1' ) THEN
          state_var_NS <= for_2_for_for_C_0;
        ELSE
          state_var_NS <= for_2_for_for_for_for_for_C_0;
        END IF;
      WHEN for_2_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000010000000000");
        IF ( for_2_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_2_for_C_0;
        ELSE
          state_var_NS <= for_2_for_for_for_for_for_C_0;
        END IF;
      WHEN for_2_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000100000000000");
        IF ( for_2_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_2_C_0;
        ELSE
          state_var_NS <= for_2_for_for_for_for_for_C_0;
        END IF;
      WHEN for_2_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000001000000000000");
        IF ( for_2_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_3_for_C_0;
        ELSE
          state_var_NS <= for_2_for_for_for_for_for_C_0;
        END IF;
      WHEN for_3_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000010000000000000");
        IF ( for_3_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_3_for_1_C_0;
        ELSE
          state_var_NS <= for_3_for_C_0;
        END IF;
      WHEN for_3_for_1_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000100000000000000");
        IF ( for_3_for_1_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_3_for_2_C_0;
        ELSE
          state_var_NS <= for_3_for_1_C_0;
        END IF;
      WHEN for_3_for_2_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000001000000000000000");
        state_var_NS <= for_3_for_2_C_1;
      WHEN for_3_for_2_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000010000000000000000");
        state_var_NS <= for_3_for_2_C_2;
      WHEN for_3_for_2_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000100000000000000000");
        state_var_NS <= for_3_for_2_C_3;
      WHEN for_3_for_2_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000001000000000000000000");
        state_var_NS <= for_3_for_2_C_4;
      WHEN for_3_for_2_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000010000000000000000000");
        state_var_NS <= for_3_for_2_C_5;
      WHEN for_3_for_2_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000100000000000000000000");
        state_var_NS <= for_3_for_2_C_6;
      WHEN for_3_for_2_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000001000000000000000000000");
        state_var_NS <= for_3_for_2_C_7;
      WHEN for_3_for_2_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000010000000000000000000000");
        state_var_NS <= for_3_for_2_C_8;
      WHEN for_3_for_2_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000100000000000000000000000");
        state_var_NS <= for_3_for_2_C_9;
      WHEN for_3_for_2_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000001000000000000000000000000");
        state_var_NS <= for_3_for_2_C_10;
      WHEN for_3_for_2_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000010000000000000000000000000");
        IF ( for_3_for_2_C_10_tr0 = '1' ) THEN
          state_var_NS <= for_3_C_0;
        ELSE
          state_var_NS <= for_3_for_2_C_0;
        END IF;
      WHEN for_3_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000100000000000000000000000000");
        IF ( for_3_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_4_for_for_C_0;
        ELSE
          state_var_NS <= for_3_for_C_0;
        END IF;
      WHEN for_4_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000001000000000000000000000000000");
        IF ( for_4_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_4_for_C_0;
        ELSE
          state_var_NS <= for_4_for_for_C_0;
        END IF;
      WHEN for_4_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000010000000000000000000000000000");
        IF ( for_4_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_4_C_0;
        ELSE
          state_var_NS <= for_4_for_for_C_0;
        END IF;
      WHEN for_4_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000100000000000000000000000000000");
        IF ( for_4_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_5_for_for_for_for_for_C_0;
        ELSE
          state_var_NS <= for_4_for_for_C_0;
        END IF;
      WHEN for_5_for_for_for_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000001000000000000000000000000000000");
        IF ( for_5_for_for_for_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_5_for_for_for_for_C_0;
        ELSE
          state_var_NS <= for_5_for_for_for_for_for_C_0;
        END IF;
      WHEN for_5_for_for_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000010000000000000000000000000000000");
        IF ( for_5_for_for_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_5_for_for_for_C_0;
        ELSE
          state_var_NS <= for_5_for_for_for_for_for_C_0;
        END IF;
      WHEN for_5_for_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000100000000000000000000000000000000");
        state_var_NS <= for_5_for_for_for_C_1;
      WHEN for_5_for_for_for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000001000000000000000000000000000000000");
        IF ( for_5_for_for_for_C_1_tr0 = '1' ) THEN
          state_var_NS <= for_5_for_for_C_0;
        ELSE
          state_var_NS <= for_5_for_for_for_for_for_C_0;
        END IF;
      WHEN for_5_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000010000000000000000000000000000000000");
        IF ( for_5_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_5_for_C_0;
        ELSE
          state_var_NS <= for_5_for_for_for_for_for_C_0;
        END IF;
      WHEN for_5_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000100000000000000000000000000000000000");
        IF ( for_5_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_5_C_0;
        ELSE
          state_var_NS <= for_5_for_for_for_for_for_C_0;
        END IF;
      WHEN for_5_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000001000000000000000000000000000000000000");
        IF ( for_5_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_6_for_C_0;
        ELSE
          state_var_NS <= for_5_for_for_for_for_for_C_0;
        END IF;
      WHEN for_6_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000010000000000000000000000000000000000000");
        IF ( for_6_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_6_for_1_C_0;
        ELSE
          state_var_NS <= for_6_for_C_0;
        END IF;
      WHEN for_6_for_1_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000100000000000000000000000000000000000000");
        IF ( for_6_for_1_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_6_for_2_C_0;
        ELSE
          state_var_NS <= for_6_for_1_C_0;
        END IF;
      WHEN for_6_for_2_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000001000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_1;
      WHEN for_6_for_2_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000010000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_2;
      WHEN for_6_for_2_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000100000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_3;
      WHEN for_6_for_2_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000001000000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_4;
      WHEN for_6_for_2_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000010000000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_5;
      WHEN for_6_for_2_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000100000000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_6;
      WHEN for_6_for_2_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000001000000000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_7;
      WHEN for_6_for_2_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000010000000000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_8;
      WHEN for_6_for_2_C_8 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000100000000000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_9;
      WHEN for_6_for_2_C_9 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000001000000000000000000000000000000000000000000000000");
        state_var_NS <= for_6_for_2_C_10;
      WHEN for_6_for_2_C_10 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000010000000000000000000000000000000000000000000000000");
        IF ( for_6_for_2_C_10_tr0 = '1' ) THEN
          state_var_NS <= for_6_C_0;
        ELSE
          state_var_NS <= for_6_for_2_C_0;
        END IF;
      WHEN for_6_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000100000000000000000000000000000000000000000000000000");
        IF ( for_6_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_7_for_for_for_for_C_0;
        ELSE
          state_var_NS <= for_6_for_C_0;
        END IF;
      WHEN for_7_for_for_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000001000000000000000000000000000000000000000000000000000");
        IF ( for_7_for_for_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_7_for_for_C_0;
        ELSIF ( for_7_for_for_for_for_C_0_tr1 = '1' ) THEN
          state_var_NS <= for_7_for_for_for_for_C_0;
        ELSE
          state_var_NS <= for_7_for_for_for_C_0;
        END IF;
      WHEN for_7_for_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000010000000000000000000000000000000000000000000000000000");
        state_var_NS <= for_7_for_for_for_for_C_0;
      WHEN for_7_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000100000000000000000000000000000000000000000000000000000");
        state_var_NS <= for_7_for_for_C_1;
      WHEN for_7_for_for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000001000000000000000000000000000000000000000000000000000000");
        IF ( for_7_for_for_C_1_tr0 = '1' ) THEN
          state_var_NS <= for_7_for_C_0;
        ELSE
          state_var_NS <= for_7_for_for_for_for_C_0;
        END IF;
      WHEN for_7_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000010000000000000000000000000000000000000000000000000000000");
        IF ( for_7_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_7_C_0;
        ELSE
          state_var_NS <= for_7_for_for_for_for_C_0;
        END IF;
      WHEN for_7_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000100000000000000000000000000000000000000000000000000000000");
        IF ( for_7_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_8_C_0;
        ELSE
          state_var_NS <= for_7_for_for_for_for_C_0;
        END IF;
      WHEN for_8_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "001000000000000000000000000000000000000000000000000000000000");
        state_var_NS <= for_8_C_1;
      WHEN for_8_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "010000000000000000000000000000000000000000000000000000000000");
        state_var_NS <= for_8_C_2;
      WHEN for_8_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "100000000000000000000000000000000000000000000000000000000000");
        IF ( for_8_C_2_tr0 = '1' ) THEN
          state_var_NS <= main_C_0;
        ELSE
          state_var_NS <= for_8_C_0;
        END IF;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000000000000000000000000000000000000000000001");
        state_var_NS <= for_C_0;
    END CASE;
  END PROCESS UNET_IP_main_run_run_fsm_1;

  UNET_IP_main_run_run_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        IF ( run_wen = '1' ) THEN
          state_var <= state_var_NS;
        END IF;
      END IF;
    END IF;
  END PROCESS UNET_IP_main_run_run_fsm_1_REG;

END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_run_staller
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_run_staller IS
  PORT(
    run_wen : OUT STD_LOGIC;
    input_rsci_wen_comp : IN STD_LOGIC;
    output_rsci_wen_comp : IN STD_LOGIC
  );
END UNET_IP_main_run_staller;

ARCHITECTURE v4 OF UNET_IP_main_run_staller IS
  -- Default Constants

BEGIN
  run_wen <= input_rsci_wen_comp AND output_rsci_wen_comp;
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_run_output_rsci_output_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_run_output_rsci_output_wait_ctrl IS
  PORT(
    output_rsci_iswt0 : IN STD_LOGIC;
    output_rsci_biwt : OUT STD_LOGIC;
    output_rsci_irdy : IN STD_LOGIC
  );
END UNET_IP_main_run_output_rsci_output_wait_ctrl;

ARCHITECTURE v4 OF UNET_IP_main_run_output_rsci_output_wait_ctrl IS
  -- Default Constants

BEGIN
  output_rsci_biwt <= output_rsci_iswt0 AND output_rsci_irdy;
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_run_input_rsci_input_wait_ctrl
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_run_input_rsci_input_wait_ctrl IS
  PORT(
    input_rsci_iswt0 : IN STD_LOGIC;
    input_rsci_biwt : OUT STD_LOGIC;
    input_rsci_ivld : IN STD_LOGIC
  );
END UNET_IP_main_run_input_rsci_input_wait_ctrl;

ARCHITECTURE v4 OF UNET_IP_main_run_input_rsci_input_wait_ctrl IS
  -- Default Constants

BEGIN
  input_rsci_biwt <= input_rsci_iswt0 AND input_rsci_ivld;
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_run_output_rsci
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_run_output_rsci IS
  PORT(
    output_rsc_dat : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    output_rsc_vld : OUT STD_LOGIC;
    output_rsc_rdy : IN STD_LOGIC;
    output_rsci_oswt : IN STD_LOGIC;
    output_rsci_wen_comp : OUT STD_LOGIC;
    output_rsci_idat : IN STD_LOGIC_VECTOR (11 DOWNTO 0)
  );
END UNET_IP_main_run_output_rsci;

ARCHITECTURE v4 OF UNET_IP_main_run_output_rsci IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL output_rsci_biwt : STD_LOGIC;
  SIGNAL output_rsci_irdy : STD_LOGIC;

  SIGNAL output_rsci_idat_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_dat : STD_LOGIC_VECTOR (11 DOWNTO 0);

  COMPONENT UNET_IP_main_run_output_rsci_output_wait_ctrl
    PORT(
      output_rsci_iswt0 : IN STD_LOGIC;
      output_rsci_biwt : OUT STD_LOGIC;
      output_rsci_irdy : IN STD_LOGIC
    );
  END COMPONENT;
BEGIN
  output_rsci : mgc_hls.ccs_out_wait_pkg_v1.ccs_out_wait_v1
    GENERIC MAP(
      rscid => 2,
      width => 12
      )
    PORT MAP(
      irdy => output_rsci_irdy,
      ivld => output_rsci_oswt,
      idat => output_rsci_idat_1,
      rdy => output_rsc_rdy,
      vld => output_rsc_vld,
      dat => output_rsci_dat
    );
  output_rsci_idat_1 <= output_rsci_idat;
  output_rsc_dat <= output_rsci_dat;

  UNET_IP_main_run_output_rsci_output_wait_ctrl_inst : UNET_IP_main_run_output_rsci_output_wait_ctrl
    PORT MAP(
      output_rsci_iswt0 => output_rsci_oswt,
      output_rsci_biwt => output_rsci_biwt,
      output_rsci_irdy => output_rsci_irdy
    );
  output_rsci_wen_comp <= (NOT output_rsci_oswt) OR output_rsci_biwt;
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_run_input_rsci
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_run_input_rsci IS
  PORT(
    input_rsc_dat : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    input_rsc_vld : IN STD_LOGIC;
    input_rsc_rdy : OUT STD_LOGIC;
    input_rsci_oswt : IN STD_LOGIC;
    input_rsci_wen_comp : OUT STD_LOGIC;
    input_rsci_idat_mxwt : OUT STD_LOGIC_VECTOR (11 DOWNTO 0)
  );
END UNET_IP_main_run_input_rsci;

ARCHITECTURE v4 OF UNET_IP_main_run_input_rsci IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL input_rsci_biwt : STD_LOGIC;
  SIGNAL input_rsci_ivld : STD_LOGIC;
  SIGNAL input_rsci_idat : STD_LOGIC_VECTOR (11 DOWNTO 0);

  SIGNAL input_rsci_dat : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL input_rsci_idat_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);

  COMPONENT UNET_IP_main_run_input_rsci_input_wait_ctrl
    PORT(
      input_rsci_iswt0 : IN STD_LOGIC;
      input_rsci_biwt : OUT STD_LOGIC;
      input_rsci_ivld : IN STD_LOGIC
    );
  END COMPONENT;
BEGIN
  input_rsci : mgc_hls.ccs_in_wait_pkg_v1.ccs_in_wait_v1
    GENERIC MAP(
      rscid => 1,
      width => 12
      )
    PORT MAP(
      rdy => input_rsc_rdy,
      vld => input_rsc_vld,
      dat => input_rsci_dat,
      irdy => input_rsci_oswt,
      ivld => input_rsci_ivld,
      idat => input_rsci_idat_1
    );
  input_rsci_dat <= input_rsc_dat;
  input_rsci_idat <= input_rsci_idat_1;

  UNET_IP_main_run_input_rsci_input_wait_ctrl_inst : UNET_IP_main_run_input_rsci_input_wait_ctrl
    PORT MAP(
      input_rsci_iswt0 => input_rsci_oswt,
      input_rsci_biwt => input_rsci_biwt,
      input_rsci_ivld => input_rsci_ivld
    );
  input_rsci_idat_mxwt <= input_rsci_idat;
  input_rsci_wen_comp <= (NOT input_rsci_oswt) OR input_rsci_biwt;
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main_run
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main_run IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    input_rsc_dat : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    input_rsc_vld : IN STD_LOGIC;
    input_rsc_rdy : OUT STD_LOGIC;
    output_rsc_dat : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    output_rsc_vld : OUT STD_LOGIC;
    output_rsc_rdy : IN STD_LOGIC;
    buf1_rsci_clken_d : OUT STD_LOGIC;
    buf1_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    buf1_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    buf1_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    buf1_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    padded_input_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    padded_input_rsci_radr_d : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
    padded_input_rsci_wadr_d : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
    buf2_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    buf2_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    buf2_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    buf2_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    enc1_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    enc1_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    enc1_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    enc1_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    buf1_rsci_re_d_pff : OUT STD_LOGIC;
    buf1_rsci_we_d_pff : OUT STD_LOGIC;
    padded_input_rsci_re_d_pff : OUT STD_LOGIC;
    padded_input_rsci_we_d_pff : OUT STD_LOGIC;
    buf2_rsci_re_d_pff : OUT STD_LOGIC;
    buf2_rsci_we_d_pff : OUT STD_LOGIC;
    enc1_rsci_re_d_pff : OUT STD_LOGIC;
    enc1_rsci_we_d_pff : OUT STD_LOGIC
  );
END UNET_IP_main_run;

ARCHITECTURE v4 OF UNET_IP_main_run IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL run_wen : STD_LOGIC;
  SIGNAL input_rsci_wen_comp : STD_LOGIC;
  SIGNAL input_rsci_idat_mxwt : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_wen_comp : STD_LOGIC;
  SIGNAL output_rsci_idat : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL for_3_for_2_div_cmp_z : STD_LOGIC_VECTOR (18 DOWNTO 0);
  SIGNAL for_3_for_2_div_cmp_a_18_6 : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL fsm_output : STD_LOGIC_VECTOR (59 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_xor_tmp : STD_LOGIC;
  SIGNAL for_2_for_for_2_for_xnor_tmp : STD_LOGIC;
  SIGNAL or_dcpl_4 : STD_LOGIC;
  SIGNAL and_dcpl_2 : STD_LOGIC;
  SIGNAL and_dcpl_3 : STD_LOGIC;
  SIGNAL or_dcpl_94 : STD_LOGIC;
  SIGNAL or_dcpl_108 : STD_LOGIC;
  SIGNAL or_dcpl_109 : STD_LOGIC;
  SIGNAL or_dcpl_115 : STD_LOGIC;
  SIGNAL or_dcpl_122 : STD_LOGIC;
  SIGNAL or_dcpl_128 : STD_LOGIC;
  SIGNAL or_dcpl_130 : STD_LOGIC;
  SIGNAL or_dcpl_143 : STD_LOGIC;
  SIGNAL or_dcpl_151 : STD_LOGIC;
  SIGNAL or_dcpl_157 : STD_LOGIC;
  SIGNAL or_dcpl_159 : STD_LOGIC;
  SIGNAL or_dcpl_163 : STD_LOGIC;
  SIGNAL or_dcpl_168 : STD_LOGIC;
  SIGNAL or_dcpl_169 : STD_LOGIC;
  SIGNAL or_dcpl_170 : STD_LOGIC;
  SIGNAL or_dcpl_173 : STD_LOGIC;
  SIGNAL or_dcpl_216 : STD_LOGIC;
  SIGNAL or_dcpl_219 : STD_LOGIC;
  SIGNAL or_dcpl_223 : STD_LOGIC;
  SIGNAL or_dcpl_228 : STD_LOGIC;
  SIGNAL or_dcpl_231 : STD_LOGIC;
  SIGNAL or_dcpl_232 : STD_LOGIC;
  SIGNAL or_dcpl_239 : STD_LOGIC;
  SIGNAL or_dcpl_277 : STD_LOGIC;
  SIGNAL or_dcpl_278 : STD_LOGIC;
  SIGNAL or_tmp_64 : STD_LOGIC;
  SIGNAL or_tmp_134 : STD_LOGIC;
  SIGNAL and_410_cse : STD_LOGIC;
  SIGNAL and_400_cse : STD_LOGIC;
  SIGNAL and_399_cse : STD_LOGIC;
  SIGNAL and_409_cse : STD_LOGIC;
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp : STD_LOGIC;
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm
      : STD_LOGIC;
  SIGNAL i_12_5_0_sva_2 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL var_tmp_33_6_sva : STD_LOGIC_VECTOR (27 DOWNTO 0);
  SIGNAL out_c_3_3_0_sva_2 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL for_2_for_for_for_slc_for_2_for_for_for_acc_6_itm : STD_LOGIC;
  SIGNAL out_c_2_3_0_sva_2 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL i_2_6_0_sva_2 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL var_tmp_33_6_1_sva : STD_LOGIC_VECTOR (27 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_stage_0_2 : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_for_stage_0_3 : STD_LOGIC;
  SIGNAL for_1_for_for_stage_0_2 : STD_LOGIC;
  SIGNAL for_7_for_for_for_for_land_lpi_6_dfm_st_1 : STD_LOGIC;
  SIGNAL y_asn_1_itm_2 : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_for_stage_0_4 : STD_LOGIC;
  SIGNAL y_asn_1_itm_3 : STD_LOGIC;
  SIGNAL for_6_for_2_acc_9_psp_1_sva : STD_LOGIC_VECTOR (18 DOWNTO 0);
  SIGNAL for_6_for_2_mul_1_psp_1_sva_5_0 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_3_for_2_acc_9_psp_1_sva : STD_LOGIC_VECTOR (18 DOWNTO 0);
  SIGNAL for_3_for_2_mul_1_psp_1_sva_5_0 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL i_10_12_0_sva_11_0 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL y_1_1_0_sva_0 : STD_LOGIC;
  SIGNAL y_1_1_0_sva_1 : STD_LOGIC;
  SIGNAL reg_var_tmp_33_6_1_ftd : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL reg_var_tmp_33_6_1_1_ftd : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_9_5
      : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0
      : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL reg_output_rsci_iswt0_cse : STD_LOGIC;
  SIGNAL reg_input_rsci_iswt0_cse : STD_LOGIC;
  SIGNAL or_79_cse : STD_LOGIC;
  SIGNAL or_cse : STD_LOGIC;
  SIGNAL nor_5_cse : STD_LOGIC;
  SIGNAL i_and_2_ssc : STD_LOGIC;
  SIGNAL i_11_12_0_sva_1_12 : STD_LOGIC;
  SIGNAL i_11_12_0_sva_1_11_0 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_xor_cse : STD_LOGIC;
  SIGNAL out_c_3_3_0_sva_2_0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL or_329_ssc : STD_LOGIC;
  SIGNAL for_3_for_2_div_cmp_b_13_11 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL for_3_for_2_div_cmp_b_10_0 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL for_1_for_for_or_1_cse : STD_LOGIC;
  SIGNAL or_242_cse : STD_LOGIC;
  SIGNAL j_j_nor_cse : STD_LOGIC;
  SIGNAL for_1_for_for_or_cse : STD_LOGIC;
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_itm
      : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL i_3_6_0_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL out_c_2_3_0_sva_2_0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_acc_itm_1_13_6 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm
      : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_25_itm_1_13_6 : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL for_5_for_for_for_for_for_mul_itm_1_8_6 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_mul_itm_1_2_0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL temp_11_0_1_sva_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL temp_11_0_sva_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL i_1_13_0_sva : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL or_480_itm : STD_LOGIC;
  SIGNAL or_481_itm : STD_LOGIC;
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL data_out_out : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL z_out_7 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL z_out_9 : STD_LOGIC_VECTOR (20 DOWNTO 0);
  SIGNAL z_out_10 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL rtn_out : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL z_out_11 : STD_LOGIC_VECTOR (23 DOWNTO 0);
  SIGNAL z_out_12 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL z_out_14 : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL in_c_1_1_0_sva : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL temp_11_0_1_lpi_7 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva
      : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL temp_11_0_lpi_7 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_7_sdt_sva_1_9_6 : STD_LOGIC_VECTOR (3 DOWNTO
      0);
  SIGNAL for_5_for_for_for_for_for_acc_7_sdt_sva_1_5_2 : STD_LOGIC_VECTOR (3 DOWNTO
      0);
  SIGNAL for_2_for_for_for_for_for_acc_7_itm_1_7_0 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_itm_mx0w0
      : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL for_1_for_for_stage_0_2_mx0w2 : STD_LOGIC;
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp_mx0c0
      : STD_LOGIC;
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp_mx0c3
      : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm_mx0c0
      : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm_mx0c1
      : STD_LOGIC;
  SIGNAL in_c_1_1_0_sva_mx0c0 : STD_LOGIC;
  SIGNAL out_c_1_1_0_sva_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL for_1_for_for_acc_14_psp_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL temp_11_0_1_sva_1_mx1w0 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL out_c_2_3_0_sva_2_0_mx0c1 : STD_LOGIC;
  SIGNAL i_3_6_0_sva_mx0c0 : STD_LOGIC;
  SIGNAL i_3_6_0_sva_mx0c1 : STD_LOGIC;
  SIGNAL i_3_6_0_sva_2 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL x_1_sva_1_0_mx0c0 : STD_LOGIC;
  SIGNAL for_7_for_for_for_for_land_lpi_6_dfm_st_1_mx0w4 : STD_LOGIC;
  SIGNAL i_10_12_0_sva_11_0_mx0c1 : STD_LOGIC;
  SIGNAL i_10_12_0_sva_11_0_mx0c3 : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_for_acc_21_sdt_3_0_1 : STD_LOGIC_VECTOR (3 DOWNTO
      0);
  SIGNAL var_tmp_33_6_1_sva_1_mx1w0 : STD_LOGIC_VECTOR (27 DOWNTO 0);
  SIGNAL out_c_3_3_0_sva_2_0_mx0c1 : STD_LOGIC;
  SIGNAL for_3_for_2_mul_1_psp_1_sva_2 : STD_LOGIC_VECTOR (24 DOWNTO 0);
  SIGNAL for_3_for_2_and_cse_1 : STD_LOGIC;
  SIGNAL for_3_for_2_and_2_cse_1 : STD_LOGIC;
  SIGNAL for_3_for_2_and_3_cse_1 : STD_LOGIC;
  SIGNAL for_3_for_2_mul_1_psp_1_sva_3 : STD_LOGIC;
  SIGNAL temp_11_0_sva_1_mx1w0 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_23_sdt_1 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_sdt_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_19_sdt_1 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL var_tmp_33_6_sva_1_mx1w0 : STD_LOGIC_VECTOR (27 DOWNTO 0);
  SIGNAL for_6_for_2_mul_1_psp_1_sva_1 : STD_LOGIC_VECTOR (24 DOWNTO 0);
  SIGNAL for_3_for_2_asn_itm_18_13 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_3_for_2_asn_itm_12_0 : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_13_11
      : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_10_0
      : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL reg_j_2_ftd : STD_LOGIC;
  SIGNAL reg_j_2_ftd_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL or_288_tmp : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_for_acc_17_sdt_1_8_1 : STD_LOGIC_VECTOR (7 DOWNTO
      0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_or_3_cse
      : STD_LOGIC;
  SIGNAL reg_for_1_for_for_acc_1_itm_1_cse : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL reg_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_qr_cse
      : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL for_1_for_for_or_3_cse : STD_LOGIC;
  SIGNAL or_203_cse : STD_LOGIC;
  SIGNAL operator_22_0_false_AC_TRN_AC_WRAP_mux_cse : STD_LOGIC_VECTOR (8 DOWNTO
      0);
  SIGNAL reg_for_2_for_for_for_for_for_mul_itm_1_cse : STD_LOGIC_VECTOR (1 DOWNTO
      0);
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_or_cse
      : STD_LOGIC;
  SIGNAL i_or_7_cse : STD_LOGIC;
  SIGNAL or_601_itm : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1
      : STD_LOGIC_VECTOR (24 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_temp_mul_itm_35_11_1
      : STD_LOGIC_VECTOR (24 DOWNTO 0);
  SIGNAL for_2_for_for_acc_3_itm_6_1 : STD_LOGIC;
  SIGNAL x_and_ssc : STD_LOGIC;
  SIGNAL reg_x_1_sva_1_0_ftd : STD_LOGIC;
  SIGNAL reg_x_1_sva_1_0_ftd_1 : STD_LOGIC;
  SIGNAL for_5_for_for_for_for_for_acc_15_sdt : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_2_cse
      : STD_LOGIC;
  SIGNAL z_out_8_32 : STD_LOGIC;
  SIGNAL or_324_cse : STD_LOGIC;
  SIGNAL for_1_for_for_for_1_for_for_and_2_atp : STD_LOGIC;

  SIGNAL i_i_mux_1_nl : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL or_325_nl : STD_LOGIC;
  SIGNAL nor_63_nl : STD_LOGIC;
  SIGNAL operator_20_false_mux1h_nl : STD_LOGIC;
  SIGNAL operator_20_false_acc_1_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_1_nl
      : STD_LOGIC;
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_1_nl
      : STD_LOGIC;
  SIGNAL or_442_nl : STD_LOGIC;
  SIGNAL for_1_for_for_mux_8_nl : STD_LOGIC;
  SIGNAL for_1_for_for_acc_17_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL for_1_for_for_mux1h_42_nl : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_1_nl
      : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_2_nl
      : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_4_nl
      : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux1h_6_nl
      : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux1h_25_nl
      : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_not_nl
      : STD_LOGIC;
  SIGNAL in_c_mux_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL in_c_not_nl : STD_LOGIC;
  SIGNAL j_j_mux_nl : STD_LOGIC;
  SIGNAL for_1_for_for_1_for_and_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_1_for_mux_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_7_for_for_acc_3_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL j_or_nl : STD_LOGIC;
  SIGNAL or_478_nl : STD_LOGIC;
  SIGNAL temp_temp_mux1h_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL temp_temp_nor_nl : STD_LOGIC;
  SIGNAL temp_and_3_nl : STD_LOGIC;
  SIGNAL nor_66_nl : STD_LOGIC;
  SIGNAL j_and_nl : STD_LOGIC;
  SIGNAL j_or_1_nl : STD_LOGIC;
  SIGNAL y_mux_nl : STD_LOGIC;
  SIGNAL for_1_for_for_mux_9_nl : STD_LOGIC;
  SIGNAL for_1_for_for_mux1h_44_nl : STD_LOGIC;
  SIGNAL or_510_nl : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_for_acc_28_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_acc_27_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_mul_7_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_mux1h_16_nl : STD_LOGIC_VECTOR
      (4 DOWNTO 0);
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qif_acc_nl : STD_LOGIC_VECTOR
      (4 DOWNTO 0);
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qif_acc_nl : STD_LOGIC_VECTOR
      (4 DOWNTO 0);
  SIGNAL or_515_nl : STD_LOGIC;
  SIGNAL nor_69_nl : STD_LOGIC;
  SIGNAL for_7_for_for_for_for_else_acc_4_nl : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL i_mux1h_19_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL i_or_8_nl : STD_LOGIC;
  SIGNAL i_and_4_nl : STD_LOGIC;
  SIGNAL i_and_5_nl : STD_LOGIC;
  SIGNAL nor_70_nl : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_for_asn_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_1_4_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_nl
      : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_mux_nl
      : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL nand_17_nl : STD_LOGIC;
  SIGNAL nor_71_nl : STD_LOGIC;
  SIGNAL for_2_for_for_for_acc_13_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL var_tmp_mux_nl : STD_LOGIC_VECTOR (27 DOWNTO 0);
  SIGNAL for_3_for_1_acc_4_nl : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL or_544_nl : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_2_for_for_for_and_1_nl : STD_LOGIC_VECTOR (11 DOWNTO
      0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_nor_nl
      : STD_LOGIC;
  SIGNAL for_3_for_2_or_1_nl : STD_LOGIC;
  SIGNAL temp_temp_mux1h_1_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL temp_temp_nor_1_nl : STD_LOGIC;
  SIGNAL temp_and_5_nl : STD_LOGIC;
  SIGNAL not_220_nl : STD_LOGIC;
  SIGNAL for_5_for_for_for_for_for_acc_36_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_37_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL var_tmp_mux_3_nl : STD_LOGIC_VECTOR (27 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_acc_26_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_acc_19_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_nl
      : STD_LOGIC_VECTOR (35 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_22_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_30_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_38_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL for_5_for_for_for_for_for_acc_27_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_temp_mul_nl
      : STD_LOGIC_VECTOR (35 DOWNTO 0);
  SIGNAL for_2_for_for_acc_3_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL for_3_for_2_for_3_for_2_and_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL for_for_and_nl : STD_LOGIC;
  SIGNAL for_mux1h_11_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL for_for_mux_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_for_mux_1_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_for_and_1_nl : STD_LOGIC;
  SIGNAL for_for_and_2_nl : STD_LOGIC;
  SIGNAL for_mux_1_nl : STD_LOGIC;
  SIGNAL for_mux1h_1_nl : STD_LOGIC;
  SIGNAL for_mux1h_14_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL for_mux1h_15_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL for_mux1h_16_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_acc_30_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_mux_12_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_for_2_for_for_for_for_for_and_3_nl : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_for_for_2_for_for_for_for_for_and_4_nl : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_2_for_for_for_mux_2_nl : STD_LOGIC_VECTOR (11 DOWNTO
      0);
  SIGNAL or_379_nl : STD_LOGIC;
  SIGNAL for_2_for_for_for_acc_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_2_for_for_for_mux_6_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_2_for_for_for_and_4_nl : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_2_for_for_for_and_5_nl : STD_LOGIC;
  SIGNAL for_2_for_for_for_for_2_for_for_for_or_1_nl : STD_LOGIC;
  SIGNAL for_3_for_mux_3_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL operator_40_20_false_AC_TRN_AC_WRAP_acc_nl : STD_LOGIC_VECTOR (32 DOWNTO
      0);
  SIGNAL operator_40_20_false_AC_TRN_AC_WRAP_mux_4_nl : STD_LOGIC_VECTOR (18 DOWNTO
      0);
  SIGNAL operator_40_20_false_AC_TRN_AC_WRAP_mux_5_nl : STD_LOGIC_VECTOR (5 DOWNTO
      0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_and_1_nl
      : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_3_nl
      : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_6_nl
      : STD_LOGIC;
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_7_nl
      : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_8_nl
      : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_9_nl
      : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_1_for_for_mul_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL for_1_for_for_mux_11_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL for_3_for_mux_4_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL for_3_for_2_div_cmp_a : STD_LOGIC_VECTOR (18 DOWNTO 0);
  SIGNAL for_3_for_2_div_cmp_b : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL for_3_for_2_div_cmp_z_1 : STD_LOGIC_VECTOR (18 DOWNTO 0);

  SIGNAL for_2_for_for_for_for_for_read_rom_UNET_IP_filters_pretrain_rom_map_1_rg_addr
      : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL for_2_for_for_for_for_for_read_rom_UNET_IP_filters_pretrain_rom_map_1_rg_data_out
      : STD_LOGIC_VECTOR (4 DOWNTO 0);

  SIGNAL operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg_a : STD_LOGIC_VECTOR (8 DOWNTO
      0);
  SIGNAL operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg_s : STD_LOGIC_VECTOR (4 DOWNTO
      0);
  SIGNAL operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg_z : STD_LOGIC_VECTOR (20
      DOWNTO 0);

  SIGNAL operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg_a : STD_LOGIC_VECTOR (24
      DOWNTO 0);
  SIGNAL operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg_s : STD_LOGIC_VECTOR (4 DOWNTO
      0);
  SIGNAL operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg_z : STD_LOGIC_VECTOR (31
      DOWNTO 0);

  COMPONENT leading_sign_22_0
    PORT (
      mantissa : IN STD_LOGIC_VECTOR(21 DOWNTO 0);
      rtn : OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL leading_sign_22_0_rg_mantissa : STD_LOGIC_VECTOR (21 DOWNTO 0);
  SIGNAL leading_sign_22_0_rg_rtn : STD_LOGIC_VECTOR (4 DOWNTO 0);

  COMPONENT UNET_IP_main_run_input_rsci
    PORT(
      input_rsc_dat : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      input_rsc_vld : IN STD_LOGIC;
      input_rsc_rdy : OUT STD_LOGIC;
      input_rsci_oswt : IN STD_LOGIC;
      input_rsci_wen_comp : OUT STD_LOGIC;
      input_rsci_idat_mxwt : OUT STD_LOGIC_VECTOR (11 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL UNET_IP_main_run_input_rsci_inst_input_rsc_dat : STD_LOGIC_VECTOR (11 DOWNTO
      0);
  SIGNAL UNET_IP_main_run_input_rsci_inst_input_rsci_idat_mxwt : STD_LOGIC_VECTOR
      (11 DOWNTO 0);

  COMPONENT UNET_IP_main_run_output_rsci
    PORT(
      output_rsc_dat : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      output_rsc_vld : OUT STD_LOGIC;
      output_rsc_rdy : IN STD_LOGIC;
      output_rsci_oswt : IN STD_LOGIC;
      output_rsci_wen_comp : OUT STD_LOGIC;
      output_rsci_idat : IN STD_LOGIC_VECTOR (11 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL UNET_IP_main_run_output_rsci_inst_output_rsc_dat : STD_LOGIC_VECTOR (11
      DOWNTO 0);
  SIGNAL UNET_IP_main_run_output_rsci_inst_output_rsci_idat : STD_LOGIC_VECTOR (11
      DOWNTO 0);

  COMPONENT UNET_IP_main_run_staller
    PORT(
      run_wen : OUT STD_LOGIC;
      input_rsci_wen_comp : IN STD_LOGIC;
      output_rsci_wen_comp : IN STD_LOGIC
    );
  END COMPONENT;
  COMPONENT UNET_IP_main_run_run_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      run_wen : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (59 DOWNTO 0);
      for_C_1_tr0 : IN STD_LOGIC;
      for_1_for_for_C_0_tr0 : IN STD_LOGIC;
      for_1_for_C_0_tr0 : IN STD_LOGIC;
      for_1_C_0_tr0 : IN STD_LOGIC;
      for_2_for_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
      for_2_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
      for_2_for_for_for_C_1_tr0 : IN STD_LOGIC;
      for_2_for_for_C_0_tr0 : IN STD_LOGIC;
      for_2_for_C_0_tr0 : IN STD_LOGIC;
      for_2_C_0_tr0 : IN STD_LOGIC;
      for_3_for_C_0_tr0 : IN STD_LOGIC;
      for_3_for_1_C_0_tr0 : IN STD_LOGIC;
      for_3_for_2_C_10_tr0 : IN STD_LOGIC;
      for_3_C_0_tr0 : IN STD_LOGIC;
      for_4_for_for_C_0_tr0 : IN STD_LOGIC;
      for_4_for_C_0_tr0 : IN STD_LOGIC;
      for_4_C_0_tr0 : IN STD_LOGIC;
      for_5_for_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
      for_5_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
      for_5_for_for_for_C_1_tr0 : IN STD_LOGIC;
      for_5_for_for_C_0_tr0 : IN STD_LOGIC;
      for_5_for_C_0_tr0 : IN STD_LOGIC;
      for_5_C_0_tr0 : IN STD_LOGIC;
      for_6_for_C_0_tr0 : IN STD_LOGIC;
      for_6_for_1_C_0_tr0 : IN STD_LOGIC;
      for_6_for_2_C_10_tr0 : IN STD_LOGIC;
      for_6_C_0_tr0 : IN STD_LOGIC;
      for_7_for_for_for_for_C_0_tr0 : IN STD_LOGIC;
      for_7_for_for_for_for_C_0_tr1 : IN STD_LOGIC;
      for_7_for_for_C_1_tr0 : IN STD_LOGIC;
      for_7_for_C_0_tr0 : IN STD_LOGIC;
      for_7_C_0_tr0 : IN STD_LOGIC;
      for_8_C_2_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL UNET_IP_main_run_run_fsm_inst_fsm_output : STD_LOGIC_VECTOR (59 DOWNTO 0);
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_C_1_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_1_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_2_for_for_for_C_1_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_2_for_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_2_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_3_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_3_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_4_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_4_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_5_for_for_for_C_1_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_5_for_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_5_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_5_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_6_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_6_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_7_for_for_for_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_7_for_for_C_1_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_7_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_7_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_main_run_run_fsm_inst_for_8_C_2_tr0 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  FUNCTION MUX1HOT_s_1_3_2(input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_s_1_4_2(input_3 : STD_LOGIC;
  input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
      tmp := sel(3);
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_s_1_6_2(input_5 : STD_LOGIC;
  input_4 : STD_LOGIC;
  input_3 : STD_LOGIC;
  input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(5 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
      tmp := sel(3);
      result := result or ( input_3 and tmp);
      tmp := sel(4);
      result := result or ( input_4 and tmp);
      tmp := sel(5);
      result := result or ( input_5 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_11_3_2(input_2 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(10 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(10 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_12_3_2(input_2 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(11 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(11 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_12_5_2(input_4 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(11 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(11 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_13_3_2(input_2 : STD_LOGIC_VECTOR(12 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(12 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(12 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(12 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(12 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_2_3_2(input_2 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_5_3_2(input_2 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(4 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(4 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_5_4_2(input_3 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(4 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(4 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_5_5_2(input_4 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(4 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(4 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(4 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
      tmp := (OTHERS=>sel( 4));
      result := result or ( input_4 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_6_3_2(input_2 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(5 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(5 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_7_3_2(input_2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_7_4_2(input_3 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_10_4_2(input_0 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(1 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(9 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN "00" =>
          result := input_0;
        WHEN "01" =>
          result := input_1;
        WHEN "10" =>
          result := input_2;
        WHEN others =>
          result := input_3;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_11_2_2(input_0 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(10 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(10 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_12_2_2(input_0 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(11 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_13_2_2(input_0 : STD_LOGIC_VECTOR(12 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(12 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(12 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_14_2_2(input_0 : STD_LOGIC_VECTOR(13 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(13 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(13 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_19_2_2(input_0 : STD_LOGIC_VECTOR(18 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(18 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(18 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_28_2_2(input_0 : STD_LOGIC_VECTOR(27 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(27 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(27 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_2_2_2(input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_3_2_2(input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_5_2_2(input_0 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(4 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_6_2_2(input_0 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(5 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_6_4_2(input_0 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_3 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(1 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(5 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN "00" =>
          result := input_0;
        WHEN "01" =>
          result := input_1;
        WHEN "10" =>
          result := input_2;
        WHEN others =>
          result := input_3;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_9_2_2(input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  for_3_for_2_div_cmp : mgc_hls.mgc_comps.mgc_div
    GENERIC MAP(
      width_a => 19,
      width_b => 15,
      signd => 1
      )
    PORT MAP(
      a => for_3_for_2_div_cmp_a,
      b => for_3_for_2_div_cmp_b,
      z => for_3_for_2_div_cmp_z_1
    );
  for_3_for_2_div_cmp_a <= for_3_for_2_div_cmp_a_18_6 & STD_LOGIC_VECTOR'( "000000");
  for_3_for_2_div_cmp_b <= '0' & for_3_for_2_div_cmp_b_13_11 & for_3_for_2_div_cmp_b_10_0;
  for_3_for_2_div_cmp_z <= for_3_for_2_div_cmp_z_1;

  for_2_for_for_for_for_for_read_rom_UNET_IP_filters_pretrain_rom_map_1_rg : mgc_hls.unet_ip_mainmgc_rom_17_792_5_1_pkg.UNET_IP_mainmgc_rom_17_792_5_1
    PORT MAP(
      addr => for_2_for_for_for_for_for_read_rom_UNET_IP_filters_pretrain_rom_map_1_rg_addr,
      data_out => for_2_for_for_for_for_for_read_rom_UNET_IP_filters_pretrain_rom_map_1_rg_data_out
    );
  for_2_for_for_for_for_for_read_rom_UNET_IP_filters_pretrain_rom_map_1_rg_addr <=
      (MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), (for_5_for_for_for_for_for_acc_15_sdt(6
      DOWNTO 5)), (fsm_output(30)))) & (MUX_v_5_2_2((for_2_for_for_for_for_for_acc_7_itm_1_7_0(7
      DOWNTO 3)), (for_5_for_for_for_for_for_acc_15_sdt(4 DOWNTO 0)), fsm_output(30)))
      & (MUX_s_1_2_2((for_2_for_for_for_for_for_acc_7_itm_1_7_0(2)), (for_5_for_for_for_for_for_acc_7_sdt_sva_1_5_2(0)),
      fsm_output(30))) & (MUX_v_2_2_2((for_2_for_for_for_for_for_acc_7_itm_1_7_0(1
      DOWNTO 0)), in_c_1_1_0_sva, fsm_output(30)));
  data_out_out <= for_2_for_for_for_for_for_read_rom_UNET_IP_filters_pretrain_rom_map_1_rg_data_out;

  operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_l_v5
    GENERIC MAP(
      width_a => 9,
      signd_a => 0,
      width_s => 5,
      width_z => 21
      )
    PORT MAP(
      a => operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg_a,
      s => operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg_s,
      z => operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg_z
    );
  operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg_a <= operator_22_0_false_AC_TRN_AC_WRAP_mux_cse;
  operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg_s <= rtn_out;
  z_out_9 <= operator_22_0_false_AC_TRN_AC_WRAP_1_lshift_rg_z;

  operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg : mgc_hls.mgc_shift_comps_v5.mgc_shift_bl_v5
    GENERIC MAP(
      width_a => 25,
      signd_a => 0,
      width_s => 5,
      width_z => 32
      )
    PORT MAP(
      a => operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg_a,
      s => operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg_s,
      z => operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg_z
    );
  operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg_a <= (MUX1HOT_v_13_3_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva,
      (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1(24
      DOWNTO 12)), (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_temp_mul_itm_35_11_1(24
      DOWNTO 12)), STD_LOGIC_VECTOR'( (NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm)
      & ((NOT (fsm_output(41))) AND ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm)
      & ((fsm_output(41)) AND ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm))))
      & (MUX1HOT_v_11_3_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_10_0,
      (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1(11
      DOWNTO 1)), (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_temp_mul_itm_35_11_1(11
      DOWNTO 1)), STD_LOGIC_VECTOR'( (NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm)
      & ((NOT (fsm_output(41))) AND ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm)
      & ((fsm_output(41)) AND ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm))))
      & (MUX_s_1_2_2(((ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1(0))
      AND ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm),
      ((ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_temp_mul_itm_35_11_1(0))
      AND ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm),
      fsm_output(41)));
  operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg_s <= ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_itm;
  z_out_10 <= operator_32_8_false_AC_TRN_AC_WRAP_1_lshift_rg_z;

  leading_sign_22_0_rg : leading_sign_22_0
    PORT MAP(
      mantissa => leading_sign_22_0_rg_mantissa,
      rtn => leading_sign_22_0_rg_rtn
    );
  leading_sign_22_0_rg_mantissa <= STD_LOGIC_VECTOR(UNSIGNED'( "0000000000000") &
      UNSIGNED(operator_22_0_false_AC_TRN_AC_WRAP_mux_cse));
  rtn_out <= leading_sign_22_0_rg_rtn;

  UNET_IP_main_run_input_rsci_inst : UNET_IP_main_run_input_rsci
    PORT MAP(
      input_rsc_dat => UNET_IP_main_run_input_rsci_inst_input_rsc_dat,
      input_rsc_vld => input_rsc_vld,
      input_rsc_rdy => input_rsc_rdy,
      input_rsci_oswt => reg_input_rsci_iswt0_cse,
      input_rsci_wen_comp => input_rsci_wen_comp,
      input_rsci_idat_mxwt => UNET_IP_main_run_input_rsci_inst_input_rsci_idat_mxwt
    );
  UNET_IP_main_run_input_rsci_inst_input_rsc_dat <= input_rsc_dat;
  input_rsci_idat_mxwt <= UNET_IP_main_run_input_rsci_inst_input_rsci_idat_mxwt;

  UNET_IP_main_run_output_rsci_inst : UNET_IP_main_run_output_rsci
    PORT MAP(
      output_rsc_dat => UNET_IP_main_run_output_rsci_inst_output_rsc_dat,
      output_rsc_vld => output_rsc_vld,
      output_rsc_rdy => output_rsc_rdy,
      output_rsci_oswt => reg_output_rsci_iswt0_cse,
      output_rsci_wen_comp => output_rsci_wen_comp,
      output_rsci_idat => UNET_IP_main_run_output_rsci_inst_output_rsci_idat
    );
  output_rsc_dat <= UNET_IP_main_run_output_rsci_inst_output_rsc_dat;
  UNET_IP_main_run_output_rsci_inst_output_rsci_idat <= output_rsci_idat;

  UNET_IP_main_run_staller_inst : UNET_IP_main_run_staller
    PORT MAP(
      run_wen => run_wen,
      input_rsci_wen_comp => input_rsci_wen_comp,
      output_rsci_wen_comp => output_rsci_wen_comp
    );
  UNET_IP_main_run_run_fsm_inst : UNET_IP_main_run_run_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      run_wen => run_wen,
      fsm_output => UNET_IP_main_run_run_fsm_inst_fsm_output,
      for_C_1_tr0 => UNET_IP_main_run_run_fsm_inst_for_C_1_tr0,
      for_1_for_for_C_0_tr0 => and_dcpl_2,
      for_1_for_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_1_for_C_0_tr0,
      for_1_C_0_tr0 => for_2_for_for_2_for_xnor_tmp,
      for_2_for_for_for_for_for_C_0_tr0 => and_dcpl_3,
      for_2_for_for_for_for_C_0_tr0 => for_5_for_for_for_for_xor_tmp,
      for_2_for_for_for_C_1_tr0 => UNET_IP_main_run_run_fsm_inst_for_2_for_for_for_C_1_tr0,
      for_2_for_for_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_2_for_for_C_0_tr0,
      for_2_for_C_0_tr0 => for_2_for_for_2_for_xnor_tmp,
      for_2_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_2_C_0_tr0,
      for_3_for_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_3_for_C_0_tr0,
      for_3_for_1_C_0_tr0 => nor_5_cse,
      for_3_for_2_C_10_tr0 => i_11_12_0_sva_1_12,
      for_3_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_3_C_0_tr0,
      for_4_for_for_C_0_tr0 => and_dcpl_2,
      for_4_for_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_4_for_C_0_tr0,
      for_4_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_4_C_0_tr0,
      for_5_for_for_for_for_for_C_0_tr0 => and_dcpl_3,
      for_5_for_for_for_for_C_0_tr0 => for_5_for_for_for_for_xor_tmp,
      for_5_for_for_for_C_1_tr0 => UNET_IP_main_run_run_fsm_inst_for_5_for_for_for_C_1_tr0,
      for_5_for_for_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_5_for_for_C_0_tr0,
      for_5_for_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_5_for_C_0_tr0,
      for_5_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_5_C_0_tr0,
      for_6_for_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_6_for_C_0_tr0,
      for_6_for_1_C_0_tr0 => nor_5_cse,
      for_6_for_2_C_10_tr0 => i_11_12_0_sva_1_12,
      for_6_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_6_C_0_tr0,
      for_7_for_for_for_for_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_7_for_for_for_for_C_0_tr0,
      for_7_for_for_for_for_C_0_tr1 => ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp,
      for_7_for_for_C_1_tr0 => UNET_IP_main_run_run_fsm_inst_for_7_for_for_C_1_tr0,
      for_7_for_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_7_for_C_0_tr0,
      for_7_C_0_tr0 => UNET_IP_main_run_run_fsm_inst_for_7_C_0_tr0,
      for_8_C_2_tr0 => UNET_IP_main_run_run_fsm_inst_for_8_C_2_tr0
    );
  fsm_output <= UNET_IP_main_run_run_fsm_inst_fsm_output;
  UNET_IP_main_run_run_fsm_inst_for_C_1_tr0 <= NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm;
  UNET_IP_main_run_run_fsm_inst_for_1_for_C_0_tr0 <= i_2_6_0_sva_2(6);
  UNET_IP_main_run_run_fsm_inst_for_2_for_for_for_C_1_tr0 <= NOT for_2_for_for_for_slc_for_2_for_for_for_acc_6_itm;
  UNET_IP_main_run_run_fsm_inst_for_2_for_for_C_0_tr0 <= NOT for_2_for_for_acc_3_itm_6_1;
  UNET_IP_main_run_run_fsm_inst_for_2_C_0_tr0 <= out_c_2_3_0_sva_2(3);
  UNET_IP_main_run_run_fsm_inst_for_3_for_C_0_tr0 <= NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp;
  UNET_IP_main_run_run_fsm_inst_for_3_C_0_tr0 <= out_c_3_3_0_sva_2(3);
  UNET_IP_main_run_run_fsm_inst_for_4_for_C_0_tr0 <= i_2_6_0_sva_2(6);
  UNET_IP_main_run_run_fsm_inst_for_4_C_0_tr0 <= out_c_2_3_0_sva_2(3);
  UNET_IP_main_run_run_fsm_inst_for_5_for_for_for_C_1_tr0 <= NOT for_2_for_for_for_slc_for_2_for_for_for_acc_6_itm;
  UNET_IP_main_run_run_fsm_inst_for_5_for_for_C_0_tr0 <= NOT for_2_for_for_acc_3_itm_6_1;
  UNET_IP_main_run_run_fsm_inst_for_5_for_C_0_tr0 <= out_c_2_3_0_sva_2(3);
  UNET_IP_main_run_run_fsm_inst_for_5_C_0_tr0 <= out_c_3_3_0_sva_2(3);
  UNET_IP_main_run_run_fsm_inst_for_6_for_C_0_tr0 <= NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp;
  UNET_IP_main_run_run_fsm_inst_for_6_C_0_tr0 <= out_c_3_3_0_sva_2(3);
  UNET_IP_main_run_run_fsm_inst_for_7_for_for_for_for_C_0_tr0 <= (NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp)
      AND ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm;
  UNET_IP_main_run_run_fsm_inst_for_7_for_for_C_1_tr0 <= reg_j_2_ftd_1(5);
  UNET_IP_main_run_run_fsm_inst_for_7_for_C_0_tr0 <= i_12_5_0_sva_2(5);
  UNET_IP_main_run_run_fsm_inst_for_7_C_0_tr0 <= out_c_3_3_0_sva_2(3);
  UNET_IP_main_run_run_fsm_inst_for_8_C_2_tr0 <= NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm;

  buf1_rsci_clken_d <= run_wen;
  or_329_ssc <= or_dcpl_130 OR (fsm_output(21)) OR or_dcpl_128 OR (fsm_output(45));
  or_324_cse <= (fsm_output(1)) OR (fsm_output(57));
  for_1_for_for_or_1_cse <= (fsm_output(6)) OR (fsm_output(30));
  for_1_for_for_or_cse <= (fsm_output(3)) OR (fsm_output(27));
  for_1_for_for_or_3_cse <= (fsm_output(14)) OR (fsm_output(38));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_or_3_cse
      <= (fsm_output(15)) OR (fsm_output(39));
  or_480_itm <= or_dcpl_216 OR (fsm_output(33)) OR (fsm_output(9)) OR (fsm_output(6))
      OR (fsm_output(30));
  or_481_itm <= or_dcpl_168 OR (fsm_output(35)) OR or_dcpl_219 OR (fsm_output(12))
      OR and_409_cse OR and_410_cse;
  or_242_cse <= (NOT for_2_for_for_for_for_for_stage_0_4) OR y_asn_1_itm_3;
  j_j_nor_cse <= NOT(CONV_SL_1_1(out_c_3_3_0_sva_2_0(1 DOWNTO 0)/=STD_LOGIC_VECTOR'("00")));
  x_and_ssc <= run_wen AND (x_1_sva_1_0_mx0c0 OR (fsm_output(7)) OR (fsm_output(31)));
  for_5_for_for_for_for_for_xor_cse <= y_1_1_0_sva_0 XOR y_1_1_0_sva_1;
  for_7_for_for_for_for_else_acc_4_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(i_10_12_0_sva_11_0),
      12), 13) - CONV_SIGNED(CONV_SIGNED(SIGNED(enc1_rsci_q_d), 12), 13), 13));
  or_288_tmp <= (NOT((for_7_for_for_for_for_else_acc_4_nl(12)) OR for_2_for_for_for_for_for_stage_0_4))
      OR (NOT((NOT(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp
      AND for_2_for_for_for_for_for_stage_0_3)) AND for_1_for_for_stage_0_2));
  i_or_7_cse <= CONV_SL_1_1(fsm_output(38 DOWNTO 37)/=STD_LOGIC_VECTOR'("00"));
  i_and_2_ssc <= run_wen AND (CONV_SL_1_1(fsm_output(14 DOWNTO 13)/=STD_LOGIC_VECTOR'("00"))
      OR ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_or_3_cse);
  or_79_cse <= CONV_SL_1_1(reg_var_tmp_33_6_1_1_ftd/=STD_LOGIC_VECTOR'("000000000"));
  or_cse <= CONV_SL_1_1(reg_var_tmp_33_6_1_ftd/=STD_LOGIC_VECTOR'("000000000"));
  ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_or_cse <=
      (fsm_output(18)) OR (fsm_output(42));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_2_cse
      <= run_wen AND (NOT(or_dcpl_130 OR or_dcpl_128));
  or_203_cse <= (fsm_output(16)) OR (fsm_output(40));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_itm_mx0w0
      <= MUX_v_14_2_2(STD_LOGIC_VECTOR'("00000000000000"), reg_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_qr_cse,
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp);
  for_1_for_for_stage_0_2_mx0w2 <= ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp
      AND (NOT(for_1_for_for_stage_0_2 AND for_5_for_for_for_for_for_xor_cse));
  out_c_1_1_0_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(in_c_1_1_0_sva) +
      UNSIGNED'( "01"), 2));
  for_1_for_for_acc_14_psp_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED('1'
      & (reg_j_2_ftd_1(5 DOWNTO 1))), 6), 7) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm),
      6), 7), 7));
  i_2_6_0_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm),
      6), 7) + UNSIGNED'( "0000001"), 7));
  temp_11_0_1_sva_1_mx1w0 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(temp_11_0_1_lpi_7)
      + CONV_SIGNED(CONV_SIGNED(SIGNED(z_out_11(15 DOWNTO 6)), 10), 12), 12));
  i_3_6_0_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(i_3_6_0_sva) + UNSIGNED'(
      "0000001"), 7));
  for_7_for_for_for_for_land_lpi_6_dfm_st_1_mx0w4 <= NOT(for_2_for_for_for_for_for_stage_0_2
      OR ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm);
  for_2_for_for_for_for_for_acc_17_sdt_1_8_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_SIGNED(SIGNED(z_out_3(7
      DOWNTO 1)), 7), 8) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(i_3_6_0_sva), 7),
      8), 8));
  for_2_for_for_for_for_for_acc_26_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED'( reg_x_1_sva_1_0_ftd
      & reg_x_1_sva_1_0_ftd_1) + CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(reg_x_1_sva_1_0_ftd,
      1), 1), 2), 2));
  for_2_for_for_for_for_for_acc_19_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED'(
      y_1_1_0_sva_1 & y_1_1_0_sva_0), 2), 3) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(in_c_1_1_0_sva),
      2), 3), 3));
  for_2_for_for_for_for_for_acc_21_sdt_3_0_1 <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_2_for_for_for_for_for_acc_26_nl),
      2)) & reg_x_1_sva_1_0_ftd_1), 3), 4) + CONV_SIGNED(SIGNED(for_2_for_for_for_for_for_acc_19_nl),
      4), 4));
  var_tmp_33_6_1_sva_1_mx1w0 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(var_tmp_33_6_1_sva)
      + CONV_UNSIGNED(CONV_SIGNED(SIGNED(z_out_11), 24), 28), 28));
  out_c_2_3_0_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(out_c_2_3_0_sva_2_0),
      3), 4) + UNSIGNED'( "0001"), 4));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_nl
      <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED'( "1011010100001") *
      UNSIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva
      & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_10_0)),
      36));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1
      <= ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_nl(35
      DOWNTO 11);
  for_3_for_2_mul_1_psp_1_sva_2 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED'( CONV_SIGNED(CONV_UNSIGNED(UNSIGNED'(
      (NOT for_3_for_2_mul_1_psp_1_sva_3) & for_3_for_2_mul_1_psp_1_sva_3 & for_3_for_2_mul_1_psp_1_sva_3
      & for_3_for_2_mul_1_psp_1_sva_3 & for_3_for_2_mul_1_psp_1_sva_3 & for_3_for_2_mul_1_psp_1_sva_3
      & for_3_for_2_mul_1_psp_1_sva_3), 7), 8) * SIGNED(for_3_for_2_asn_itm_18_13
      & for_3_for_2_asn_itm_12_0)), 25));
  for_3_for_2_and_cse_1 <= CONV_SL_1_1(out_c_3_3_0_sva_2_0=STD_LOGIC_VECTOR'("001"));
  for_3_for_2_and_2_cse_1 <= (out_c_3_3_0_sva_2_0(2)) AND j_j_nor_cse;
  for_3_for_2_and_3_cse_1 <= CONV_SL_1_1(out_c_3_3_0_sva_2_0=STD_LOGIC_VECTOR'("110"));
  for_3_for_2_mul_1_psp_1_sva_3 <= for_3_for_2_and_cse_1 OR (CONV_SL_1_1(out_c_3_3_0_sva_2_0=STD_LOGIC_VECTOR'("011")))
      OR for_3_for_2_and_2_cse_1 OR for_3_for_2_and_3_cse_1 OR (CONV_SL_1_1(out_c_3_3_0_sva_2_0=STD_LOGIC_VECTOR'("111")));
  out_c_3_3_0_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(out_c_3_3_0_sva_2_0),
      3), 4) + UNSIGNED'( "0001"), 4));
  temp_11_0_sva_1_mx1w0 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(temp_11_0_lpi_7) +
      CONV_SIGNED(CONV_SIGNED(SIGNED(z_out_11(15 DOWNTO 6)), 10), 12), 12));
  for_5_for_for_for_for_for_acc_30_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED'(
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm & reg_x_1_sva_1_0_ftd
      & reg_x_1_sva_1_0_ftd_1), 3), 4) + CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(y_1_1_0_sva_1,
      1), 1), 4), 4));
  for_5_for_for_for_for_for_acc_22_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(reg_j_2_ftd
      & reg_j_2_ftd_1), 7), 8) + CONV_SIGNED(CONV_SIGNED(SIGNED(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_5_for_for_for_for_for_acc_30_nl),
      4)) & y_1_1_0_sva_0), 5), 8), 8));
  for_5_for_for_for_for_for_acc_23_sdt_1 <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(SIGNED(for_5_for_for_for_for_for_acc_22_nl),
      9) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(i_3_6_0_sva & '0'), 8), 9), 9));
  for_5_for_for_for_for_for_acc_38_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(out_c_3_3_0_sva_2_0),
      3), 5) + CONV_SIGNED(CONV_SIGNED(SIGNED(for_5_for_for_for_for_for_acc_19_sdt_1(4
      DOWNTO 3)), 2), 5), 5));
  for_5_for_for_for_for_for_acc_sdt_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_5_for_for_for_for_for_acc_38_nl),
      5)) & (for_5_for_for_for_for_for_acc_19_sdt_1(2))) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(out_c_2_3_0_sva_2_0
      & '1'), 4), 6), 6));
  for_5_for_for_for_for_for_acc_27_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED'(
      reg_x_1_sva_1_0_ftd & reg_x_1_sva_1_0_ftd_1), 2), 4) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(out_c_2_3_0_sva_2_0(2
      DOWNTO 1)), 2), 4), 4));
  for_5_for_for_for_for_for_acc_19_sdt_1 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_5_for_for_for_for_for_acc_27_nl),
      4)) & (out_c_2_3_0_sva_2_0(0))) + CONV_SIGNED(CONV_SIGNED(SIGNED'( reg_x_1_sva_1_0_ftd
      & reg_x_1_sva_1_0_ftd_1), 2), 5) + CONV_SIGNED(CONV_SIGNED(SIGNED'( y_1_1_0_sva_1
      & y_1_1_0_sva_0), 2), 5), 5));
  var_tmp_33_6_sva_1_mx1w0 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(var_tmp_33_6_sva)
      + CONV_UNSIGNED(CONV_SIGNED(SIGNED(z_out_11), 24), 28), 28));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_temp_mul_nl
      <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED'( "1011010100001") *
      UNSIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva
      & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_10_0)),
      36));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_temp_mul_itm_35_11_1
      <= ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_temp_mul_nl(35
      DOWNTO 11);
  for_6_for_2_mul_1_psp_1_sva_1 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED'( CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(i_3_6_0_sva),
      7), 8) * SIGNED(for_3_for_2_asn_itm_18_13 & for_3_for_2_asn_itm_12_0)), 25));
  i_12_5_0_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_itm),
      5), 6) + UNSIGNED'( "000001"), 6));
  for_2_for_for_acc_3_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(i_3_6_0_sva_2) +
      SIGNED'( "0111111"), 7));
  for_2_for_for_acc_3_itm_6_1 <= for_2_for_for_acc_3_nl(6);
  for_5_for_for_for_for_xor_tmp <= reg_x_1_sva_1_0_ftd_1 XOR reg_x_1_sva_1_0_ftd;
  for_2_for_for_2_for_xnor_tmp <= NOT((out_c_1_1_0_sva_2(0)) XOR (out_c_1_1_0_sva_2(1)));
  or_dcpl_4 <= (fsm_output(13)) OR (fsm_output(37));
  and_dcpl_2 <= NOT(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp
      OR for_1_for_for_stage_0_2);
  and_dcpl_3 <= and_dcpl_2 AND (NOT(for_2_for_for_for_for_for_stage_0_3 OR for_2_for_for_for_for_for_stage_0_2));
  nor_5_cse <= NOT(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp
      OR for_2_for_for_for_for_for_stage_0_2);
  or_dcpl_94 <= CONV_SL_1_1(fsm_output(39 DOWNTO 38)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_108 <= (fsm_output(49)) OR (fsm_output(46));
  or_dcpl_109 <= (fsm_output(41)) OR (fsm_output(43));
  or_dcpl_115 <= (fsm_output(17)) OR (fsm_output(19));
  or_dcpl_122 <= (fsm_output(26)) OR (fsm_output(12));
  or_dcpl_128 <= CONV_SL_1_1(fsm_output(44 DOWNTO 43)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_130 <= CONV_SL_1_1(fsm_output(20 DOWNTO 19)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_143 <= (fsm_output(36)) OR (fsm_output(29));
  or_dcpl_151 <= (fsm_output(56)) OR (fsm_output(50));
  or_dcpl_157 <= CONV_SL_1_1(fsm_output(56 DOWNTO 55)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_159 <= (fsm_output(54)) OR (fsm_output(28)) OR (fsm_output(4));
  or_dcpl_163 <= CONV_SL_1_1(fsm_output(35 DOWNTO 34)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_168 <= CONV_SL_1_1(fsm_output(11 DOWNTO 10)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_169 <= or_dcpl_168 OR (fsm_output(31));
  or_dcpl_170 <= or_dcpl_169 OR (fsm_output(7)) OR (fsm_output(33)) OR (fsm_output(9));
  or_dcpl_173 <= (fsm_output(50)) OR (fsm_output(5));
  or_dcpl_216 <= (fsm_output(31)) OR (fsm_output(7));
  or_dcpl_219 <= (fsm_output(34)) OR (fsm_output(36));
  or_dcpl_223 <= (fsm_output(12)) OR (fsm_output(5));
  or_dcpl_228 <= (fsm_output(36)) OR (fsm_output(26));
  or_dcpl_231 <= (fsm_output(29)) OR (fsm_output(12));
  or_dcpl_232 <= or_dcpl_231 OR (fsm_output(5));
  or_dcpl_239 <= (fsm_output(9)) OR (fsm_output(35));
  or_dcpl_277 <= (NOT for_2_for_for_for_for_for_stage_0_3) OR for_7_for_for_for_for_land_lpi_6_dfm_st_1;
  or_dcpl_278 <= (fsm_output(36)) OR (fsm_output(50));
  or_tmp_64 <= (fsm_output(8)) OR (fsm_output(32));
  or_tmp_134 <= CONV_SL_1_1(fsm_output(35 DOWNTO 33)/=STD_LOGIC_VECTOR'("000")) OR
      or_dcpl_143;
  and_400_cse <= ((out_c_1_1_0_sva_2(0)) XOR (out_c_1_1_0_sva_2(1))) AND (fsm_output(5));
  and_399_cse <= (NOT (out_c_2_3_0_sva_2(3))) AND (fsm_output(29));
  and_410_cse <= for_2_for_for_2_for_xnor_tmp AND (fsm_output(5));
  and_409_cse <= (out_c_2_3_0_sva_2(3)) AND (fsm_output(29));
  ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp_mx0c0 <= or_dcpl_159
      OR or_dcpl_169 OR (fsm_output(7)) OR (fsm_output(55)) OR (fsm_output(56)) OR
      (fsm_output(33)) OR (fsm_output(9)) OR or_dcpl_163 OR (fsm_output(52)) OR or_dcpl_143
      OR (fsm_output(2)) OR (fsm_output(26)) OR (fsm_output(12)) OR or_dcpl_173 OR
      ((NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp)
      AND or_dcpl_4);
  ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp_mx0c3 <= ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp
      AND (z_out_4(12)) AND or_dcpl_4;
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm_mx0c0
      <= (fsm_output(29)) OR (fsm_output(2)) OR (fsm_output(26)) OR (fsm_output(5));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm_mx0c1
      <= (fsm_output(28)) OR (fsm_output(4));
  in_c_1_1_0_sva_mx0c0 <= and_410_cse OR (fsm_output(2)) OR (fsm_output(12));
  out_c_2_3_0_sva_2_0_mx0c1 <= (fsm_output(35)) OR (fsm_output(12)) OR and_399_cse;
  i_3_6_0_sva_mx0c0 <= (fsm_output(11)) OR (fsm_output(35)) OR (fsm_output(36)) OR
      or_dcpl_232;
  i_3_6_0_sva_mx0c1 <= (fsm_output(10)) OR (fsm_output(34));
  x_1_sva_1_0_mx0c0 <= or_dcpl_168 OR (fsm_output(33)) OR or_dcpl_239 OR or_dcpl_219
      OR (fsm_output(29)) OR or_dcpl_223;
  i_10_12_0_sva_11_0_mx0c1 <= or_dcpl_228 OR (fsm_output(12)) OR (fsm_output(50))
      OR (fsm_output(14));
  i_10_12_0_sva_11_0_mx0c3 <= (fsm_output(49)) OR (fsm_output(25));
  out_c_3_3_0_sva_2_0_mx0c1 <= (fsm_output(56)) OR (fsm_output(26)) OR ((NOT (out_c_3_3_0_sva_2(3)))
      AND or_dcpl_278);
  for_3_for_2_for_3_for_2_and_nl <= MUX_v_12_2_2(STD_LOGIC_VECTOR'("000000000000"),
      (for_3_for_2_acc_9_psp_1_sva(11 DOWNTO 0)), z_out_8_32);
  buf1_rsci_d_d <= MUX1HOT_v_12_3_2(input_rsci_idat_mxwt, for_3_for_2_for_3_for_2_and_nl,
      i_10_12_0_sva_11_0, STD_LOGIC_VECTOR'( (fsm_output(1)) & (fsm_output(24)) &
      (fsm_output(53))));
  for_for_and_nl <= (out_c_2_3_0_sva_2_0(2)) AND (fsm_output(27));
  for_mux1h_11_nl <= MUX1HOT_v_2_3_2(in_c_1_1_0_sva, (out_c_2_3_0_sva_2_0(1 DOWNTO
      0)), (i_1_13_0_sva(13 DOWNTO 12)), STD_LOGIC_VECTOR'( (fsm_output(3)) & (fsm_output(27))
      & (fsm_output(57))));
  for_for_mux_nl <= MUX_v_6_2_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm,
      (i_1_13_0_sva(11 DOWNTO 6)), fsm_output(57));
  for_for_mux_1_nl <= MUX_v_6_2_2(reg_j_2_ftd_1, (i_1_13_0_sva(5 DOWNTO 0)), fsm_output(57));
  buf1_rsci_radr_d <= for_for_and_nl & for_mux1h_11_nl & for_for_mux_nl & for_for_mux_1_nl;
  buf1_rsci_re_d_pff <= (ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp
      AND for_1_for_for_or_cse) OR (fsm_output(57));
  for_for_and_1_nl <= (out_c_3_3_0_sva_2_0(2)) AND (NOT((fsm_output(1)) OR (fsm_output(53))));
  for_mux_1_nl <= MUX_s_1_2_2((i_1_13_0_sva(13)), (out_c_3_3_0_sva_2_0(1)), fsm_output(24));
  for_for_and_2_nl <= for_mux_1_nl AND (NOT (fsm_output(53)));
  for_mux1h_1_nl <= MUX1HOT_s_1_3_2((i_1_13_0_sva(12)), (out_c_3_3_0_sva_2_0(0)),
      (out_c_3_3_0_sva_2_0(2)), STD_LOGIC_VECTOR'( (fsm_output(1)) & (fsm_output(24))
      & (fsm_output(53))));
  for_mux1h_14_nl <= MUX1HOT_v_2_3_2((i_1_13_0_sva(11 DOWNTO 10)), (i_10_12_0_sva_11_0(11
      DOWNTO 10)), (out_c_3_3_0_sva_2_0(1 DOWNTO 0)), STD_LOGIC_VECTOR'( (fsm_output(1))
      & (fsm_output(24)) & (fsm_output(53))));
  for_mux1h_15_nl <= MUX1HOT_v_5_3_2((i_1_13_0_sva(9 DOWNTO 5)), (i_10_12_0_sva_11_0(9
      DOWNTO 5)), ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_itm,
      STD_LOGIC_VECTOR'( (fsm_output(1)) & (fsm_output(24)) & (fsm_output(53))));
  for_mux1h_16_nl <= MUX1HOT_v_5_3_2((i_1_13_0_sva(4 DOWNTO 0)), (i_10_12_0_sva_11_0(4
      DOWNTO 0)), ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0,
      STD_LOGIC_VECTOR'( (fsm_output(1)) & (fsm_output(24)) & (fsm_output(53))));
  buf1_rsci_wadr_d <= for_for_and_1_nl & for_for_and_2_nl & for_mux1h_1_nl & for_mux1h_14_nl
      & for_mux1h_15_nl & for_mux1h_16_nl;
  buf1_rsci_we_d_pff <= (fsm_output(1)) OR (fsm_output(24)) OR (fsm_output(53));
  for_2_for_for_for_for_for_mux_12_nl <= MUX_v_8_2_2(for_2_for_for_for_for_for_acc_itm_1_13_6,
      for_5_for_for_for_for_for_acc_25_itm_1_13_6, fsm_output(30));
  for_2_for_for_for_for_for_for_2_for_for_for_for_for_and_3_nl <= (for_5_for_for_for_for_for_mul_itm_1_8_6(2))
      AND (fsm_output(30));
  for_2_for_for_for_for_for_for_2_for_for_for_for_for_and_4_nl <= (for_5_for_for_for_for_for_mul_itm_1_2_0(2))
      AND (fsm_output(30));
  for_2_for_for_for_for_for_acc_30_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_2_for_for_for_for_for_mux_12_nl
      & (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm(5
      DOWNTO 2))) + UNSIGNED(reg_for_2_for_for_for_for_for_mul_itm_1_cse & '0' &
      for_2_for_for_for_for_for_for_2_for_for_for_for_for_and_3_nl & (for_5_for_for_for_for_for_mul_itm_1_8_6(1
      DOWNTO 0)) & STD_LOGIC_VECTOR'( "000") & for_2_for_for_for_for_for_for_2_for_for_for_for_for_and_4_nl
      & (for_5_for_for_for_for_for_mul_itm_1_2_0(1 DOWNTO 0))), 12));
  padded_input_rsci_radr_d <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_2_for_for_for_for_for_acc_30_nl),
      12)) & (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm(1
      DOWNTO 0));
  padded_input_rsci_re_d_pff <= for_2_for_for_for_for_for_stage_0_2 AND for_1_for_for_or_1_cse;
  padded_input_rsci_wadr_d <= reg_for_1_for_for_acc_1_itm_1_cse;
  padded_input_rsci_we_d_pff <= for_1_for_for_stage_0_2 AND for_1_for_for_or_cse;
  buf2_rsci_d_d <= MUX_v_12_2_2(temp_11_0_1_sva_1, temp_11_0_sva_1, fsm_output(32));
  or_379_nl <= or_dcpl_4 OR (fsm_output(15)) OR or_dcpl_94;
  for_2_for_for_for_for_2_for_for_for_mux_2_nl <= MUX_v_12_2_2(i_11_12_0_sva_1_11_0,
      i_10_12_0_sva_11_0, or_379_nl);
  buf2_rsci_radr_d <= out_c_3_3_0_sva_2_0 & for_2_for_for_for_for_2_for_for_for_mux_2_nl;
  buf2_rsci_re_d_pff <= ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_or_3_cse
      OR (ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp AND
      (or_dcpl_4 OR for_1_for_for_or_3_cse));
  for_2_for_for_for_mux_6_nl <= MUX_v_3_2_2(out_c_2_3_0_sva_2_0, out_c_3_3_0_sva_2_0,
      fsm_output(32));
  for_2_for_for_for_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_SIGNED(SIGNED((NOT
      (i_3_6_0_sva(6))) & (i_3_6_0_sva(5 DOWNTO 0))), 7), 9) + UNSIGNED(for_2_for_for_for_mux_6_nl
      & STD_LOGIC_VECTOR'( "111111")), 9));
  buf2_rsci_wadr_d <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_2_for_for_for_acc_nl),
      9)) & (z_out_7(5 DOWNTO 0));
  buf2_rsci_we_d_pff <= or_tmp_64;
  enc1_rsci_d_d <= MUX_v_12_2_2(STD_LOGIC_VECTOR'("000000000000"), (for_6_for_2_acc_9_psp_1_sva(11
      DOWNTO 0)), z_out_8_32);
  enc1_rsci_radr_d <= out_c_3_3_0_sva_2_0 & ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_itm
      & ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm &
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0
      & for_2_for_for_for_for_for_stage_0_2;
  enc1_rsci_re_d_pff <= ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp
      AND (fsm_output(51));
  enc1_rsci_wadr_d <= out_c_3_3_0_sva_2_0 & i_10_12_0_sva_11_0;
  enc1_rsci_we_d_pff <= fsm_output(48);
  operator_22_0_false_AC_TRN_AC_WRAP_mux_cse <= MUX_v_9_2_2(reg_var_tmp_33_6_1_1_ftd,
      reg_var_tmp_33_6_1_ftd, fsm_output(39));
  for_5_for_for_for_for_for_acc_15_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_5_for_for_for_for_for_acc_7_sdt_sva_1_9_6
      & (for_5_for_for_for_for_for_acc_7_sdt_sva_1_5_2(3 DOWNTO 1))) + UNSIGNED'(
      "0011011"), 7));
  or_601_itm <= (fsm_output(30)) OR (fsm_output(27));
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        output_rsci_idat <= STD_LOGIC_VECTOR'( "000000000000");
      ELSIF ( (run_wen AND (fsm_output(58))) = '1' ) THEN
        output_rsci_idat <= buf1_rsci_q_d;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        i_1_13_0_sva <= STD_LOGIC_VECTOR'( "00000000000000");
        for_3_for_2_div_cmp_b_13_11 <= STD_LOGIC_VECTOR'( "000");
        for_3_for_2_div_cmp_b_10_0 <= STD_LOGIC_VECTOR'( "00000000000");
        for_3_for_2_div_cmp_a_18_6 <= STD_LOGIC_VECTOR'( "0000000000000");
        reg_output_rsci_iswt0_cse <= '0';
        reg_input_rsci_iswt0_cse <= '0';
        ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm <=
            '0';
        for_1_for_for_stage_0_2 <= '0';
        reg_for_1_for_for_acc_1_itm_1_cse <= STD_LOGIC_VECTOR'( "00000000000000");
        reg_j_2_ftd <= '0';
        y_asn_1_itm_3 <= '0';
        temp_11_0_1_lpi_7 <= STD_LOGIC_VECTOR'( "000000000000");
        y_1_1_0_sva_0 <= '0';
        y_1_1_0_sva_1 <= '0';
        for_2_for_for_for_for_for_stage_0_2 <= '0';
        for_2_for_for_for_for_for_stage_0_3 <= '0';
        for_2_for_for_for_for_for_stage_0_4 <= '0';
        for_2_for_for_for_for_for_acc_itm_1_13_6 <= STD_LOGIC_VECTOR'( "00000000");
        reg_for_2_for_for_for_for_for_mul_itm_1_cse <= STD_LOGIC_VECTOR'( "00");
        y_asn_1_itm_2 <= '0';
        for_2_for_for_for_for_for_acc_7_itm_1_7_0 <= STD_LOGIC_VECTOR'( "00000000");
        ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_itm
            <= STD_LOGIC_VECTOR'( "00000");
        for_7_for_for_for_for_land_lpi_6_dfm_st_1 <= '0';
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_9_5
            <= STD_LOGIC_VECTOR'( "00000");
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0
            <= STD_LOGIC_VECTOR'( "00000");
        for_2_for_for_for_slc_for_2_for_for_for_acc_6_itm <= '0';
        for_3_for_2_asn_itm_18_13 <= STD_LOGIC_VECTOR'( "000000");
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva
            <= STD_LOGIC_VECTOR'( "0000000000000");
        reg_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_qr_cse
            <= STD_LOGIC_VECTOR'( "00000000000000");
        for_3_for_2_acc_9_psp_1_sva <= STD_LOGIC_VECTOR'( "0000000000000000000");
        for_3_for_2_mul_1_psp_1_sva_5_0 <= STD_LOGIC_VECTOR'( "000000");
        temp_11_0_lpi_7 <= STD_LOGIC_VECTOR'( "000000000000");
        for_5_for_for_for_for_for_acc_25_itm_1_13_6 <= STD_LOGIC_VECTOR'( "00000000");
        for_5_for_for_for_for_for_mul_itm_1_8_6 <= STD_LOGIC_VECTOR'( "000");
        for_5_for_for_for_for_for_mul_itm_1_2_0 <= STD_LOGIC_VECTOR'( "000");
        for_5_for_for_for_for_for_acc_7_sdt_sva_1_9_6 <= STD_LOGIC_VECTOR'( "0000");
        for_5_for_for_for_for_for_acc_7_sdt_sva_1_5_2 <= STD_LOGIC_VECTOR'( "0000");
        for_6_for_2_acc_9_psp_1_sva <= STD_LOGIC_VECTOR'( "0000000000000000000");
        for_6_for_2_mul_1_psp_1_sva_5_0 <= STD_LOGIC_VECTOR'( "000000");
      ELSIF ( run_wen = '1' ) THEN
        i_1_13_0_sva <= MUX_v_14_2_2(STD_LOGIC_VECTOR'("00000000000000"), i_i_mux_1_nl,
            nor_63_nl);
        for_3_for_2_div_cmp_b_13_11 <= MUX_v_3_2_2((ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_itm_mx0w0(13
            DOWNTO 11)), ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_13_11,
            or_329_ssc);
        for_3_for_2_div_cmp_b_10_0 <= MUX_v_11_2_2((ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_itm_mx0w0(10
            DOWNTO 0)), ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_10_0,
            or_329_ssc);
        for_3_for_2_div_cmp_a_18_6 <= for_3_for_2_asn_itm_12_0;
        reg_output_rsci_iswt0_cse <= fsm_output(58);
        reg_input_rsci_iswt0_cse <= NOT((NOT((fsm_output(0)) OR (fsm_output(2))))
            OR ((NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm)
            AND (fsm_output(2))));
        ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm <=
            (operator_20_false_mux1h_nl AND (NOT (fsm_output(31))) AND (NOT(CONV_SL_1_1(fsm_output(55
            DOWNTO 54)/=STD_LOGIC_VECTOR'("00")) OR or_dcpl_151))) OR or_tmp_134
            OR ((NOT((fsm_output(58)) OR (fsm_output(1)) OR (fsm_output(54)))) AND
            (NOT((fsm_output(31)) OR (fsm_output(55)))) AND (NOT((fsm_output(56))
            OR (fsm_output(33)) OR (fsm_output(35)))) AND (NOT((fsm_output(34)) OR
            (fsm_output(57)))) AND (NOT((fsm_output(16)) OR (fsm_output(40)) OR (fsm_output(36))))
            AND (NOT((fsm_output(29)) OR (fsm_output(51)))) AND (NOT((fsm_output(30))
            OR (fsm_output(15)))) AND (NOT((fsm_output(39)) OR (fsm_output(50)))));
        for_1_for_for_stage_0_2 <= (for_1_for_for_mux_8_nl OR or_dcpl_170 OR or_dcpl_163
            OR (fsm_output(13)) OR (fsm_output(37)) OR (fsm_output(51)) OR and_409_cse
            OR and_410_cse OR ((NOT (out_c_2_3_0_sva_2(3))) AND (fsm_output(12)))
            OR ((NOT (out_c_3_3_0_sva_2(3))) AND (fsm_output(36)))) AND (NOT(or_dcpl_159
            OR or_dcpl_157 OR (fsm_output(52)) OR (fsm_output(2)) OR (fsm_output(26))
            OR (fsm_output(50)) OR and_399_cse OR and_400_cse OR ((out_c_2_3_0_sva_2(3))
            AND (fsm_output(12))) OR ((out_c_3_3_0_sva_2(3)) AND (fsm_output(36)))));
        reg_for_1_for_for_acc_1_itm_1_cse <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out_12
            & STD_LOGIC_VECTOR'( "11")) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_1_for_for_acc_17_nl),
            7)) & (for_1_for_for_acc_14_psp_1(4 DOWNTO 0)) & (reg_j_2_ftd_1(0))),
            13), 14), 14));
        reg_j_2_ftd <= j_j_mux_nl AND (NOT or_481_itm);
        y_asn_1_itm_3 <= y_asn_1_itm_2;
        temp_11_0_1_lpi_7 <= MUX_v_12_2_2(STD_LOGIC_VECTOR'("000000000000"), temp_temp_mux1h_nl,
            nor_66_nl);
        y_1_1_0_sva_0 <= y_mux_nl OR (NOT for_1_for_for_or_1_cse);
        y_1_1_0_sva_1 <= NOT((NOT(y_1_1_0_sva_1 AND (NOT for_1_for_for_stage_0_2)))
            AND for_1_for_for_or_1_cse);
        for_2_for_for_for_for_for_stage_0_2 <= (for_1_for_for_mux_9_nl OR (fsm_output(51)))
            AND (NOT((fsm_output(54)) OR (fsm_output(11)) OR (fsm_output(10)) OR
            or_dcpl_216 OR or_dcpl_157 OR (fsm_output(33)) OR or_dcpl_239 OR (fsm_output(34))
            OR (fsm_output(52)) OR (fsm_output(13)) OR (fsm_output(37)) OR (fsm_output(36))
            OR or_dcpl_231 OR or_dcpl_173));
        for_2_for_for_for_for_for_stage_0_3 <= for_2_for_for_for_for_for_stage_0_2
            AND ((fsm_output(6)) OR (fsm_output(51)) OR (fsm_output(30)) OR for_1_for_for_or_3_cse);
        for_2_for_for_for_for_for_stage_0_4 <= for_1_for_for_mux1h_44_nl AND (NOT(or_dcpl_170
            OR or_dcpl_163 OR (fsm_output(36)) OR or_dcpl_232));
        for_2_for_for_for_for_for_acc_itm_1_13_6 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED(for_2_for_for_for_for_for_acc_28_nl),
            8) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(i_3_6_0_sva), 7), 8), 8));
        reg_for_2_for_for_for_for_for_mul_itm_1_cse <= z_out_12(11 DOWNTO 10);
        y_asn_1_itm_2 <= for_7_for_for_for_for_land_lpi_6_dfm_st_1;
        for_2_for_for_for_for_for_acc_7_itm_1_7_0 <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_2_for_for_for_for_for_acc_27_nl),
            4)) & (for_2_for_for_for_for_for_acc_21_sdt_3_0_1(1 DOWNTO 0))), 6),
            8) + CONV_SIGNED(UNSIGNED(for_2_for_for_for_for_for_mul_7_nl), 8), 8));
        ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_itm
            <= MUX_v_5_2_2(STD_LOGIC_VECTOR'("00000"), ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_mux1h_16_nl,
            nor_69_nl);
        for_7_for_for_for_for_land_lpi_6_dfm_st_1 <= MUX1HOT_s_1_3_2(for_5_for_for_for_for_for_xor_cse,
            for_2_for_for_for_for_for_stage_0_4, for_7_for_for_for_for_land_lpi_6_dfm_st_1_mx0w4,
            STD_LOGIC_VECTOR'( for_1_for_for_or_1_cse & for_1_for_for_or_3_cse &
            (fsm_output(51))));
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_9_5
            <= z_out_2(9 DOWNTO 5);
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0
            <= MUX1HOT_v_5_3_2(for_2_for_for_for_for_for_asn_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_1_4_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_nl,
            (z_out_2(4 DOWNTO 0)), ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_itm,
            STD_LOGIC_VECTOR'( nor_71_nl & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_or_3_cse
            & for_1_for_for_or_1_cse));
        for_2_for_for_for_slc_for_2_for_for_for_acc_6_itm <= for_2_for_for_for_acc_13_nl(6);
        for_3_for_2_asn_itm_18_13 <= for_3_for_2_div_cmp_z(18 DOWNTO 13);
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva
            <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(z_out_11(19
            DOWNTO 11)), 9), 13) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED('1' & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_9_5
            & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0
            & '1'), 12), 13), 13));
        reg_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_qr_cse
            <= z_out_10(31 DOWNTO 18);
        for_3_for_2_acc_9_psp_1_sva <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_3_for_2_mul_1_psp_1_sva_2(24
            DOWNTO 6)) + CONV_SIGNED(CONV_SIGNED(for_3_for_2_or_1_nl, 1), 19), 19));
        for_3_for_2_mul_1_psp_1_sva_5_0 <= for_3_for_2_mul_1_psp_1_sva_2(5 DOWNTO
            0);
        temp_11_0_lpi_7 <= MUX_v_12_2_2(STD_LOGIC_VECTOR'("000000000000"), temp_temp_mux1h_1_nl,
            not_220_nl);
        for_5_for_for_for_for_for_acc_25_itm_1_13_6 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED(for_5_for_for_for_for_for_acc_36_nl),
            8) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(i_3_6_0_sva), 7), 8), 8));
        for_5_for_for_for_for_for_mul_itm_1_8_6 <= z_out_12(8 DOWNTO 6);
        for_5_for_for_for_for_for_mul_itm_1_2_0 <= z_out_12(2 DOWNTO 0);
        for_5_for_for_for_for_for_acc_7_sdt_sva_1_9_6 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_SIGNED(SIGNED(for_5_for_for_for_for_for_acc_sdt_1(5
            DOWNTO 4)), 2), 4) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(out_c_3_3_0_sva_2_0),
            3), 4), 4));
        for_5_for_for_for_for_for_acc_7_sdt_sva_1_5_2 <= for_5_for_for_for_for_for_acc_sdt_1(3
            DOWNTO 0);
        for_6_for_2_acc_9_psp_1_sva <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_6_for_2_mul_1_psp_1_sva_1(24
            DOWNTO 6)) + CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(for_3_for_2_and_3_cse_1,
            1), 1), 19), 19));
        for_6_for_2_mul_1_psp_1_sva_5_0 <= for_6_for_2_mul_1_psp_1_sva_1(5 DOWNTO
            0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp <= '0';
      ELSIF ( (run_wen AND (ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp_mx0c0
          OR (fsm_output(3)) OR (fsm_output(6)) OR ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp_mx0c3
          OR (fsm_output(14)) OR (fsm_output(15)) OR (fsm_output(27)) OR (fsm_output(30))
          OR (fsm_output(38)) OR (fsm_output(39)) OR (fsm_output(51)))) = '1' ) THEN
        ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp <= NOT((NOT(for_1_for_for_mux1h_42_nl
            OR ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp_mx0c0))
            OR ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp_mx0c3);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm
            <= STD_LOGIC_VECTOR'( "000000");
      ELSIF ( (run_wen AND (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm_mx0c0
          OR ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm_mx0c1
          OR (fsm_output(6)) OR (fsm_output(15)) OR (fsm_output(30)) OR (fsm_output(39))))
          = '1' ) THEN
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm
            <= MUX_v_6_2_2(STD_LOGIC_VECTOR'("000000"), (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux1h_6_nl
            & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux1h_25_nl),
            ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_not_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        in_c_1_1_0_sva <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( (run_wen AND (in_c_1_1_0_sva_mx0c0 OR (fsm_output(11)) OR and_400_cse
          OR (fsm_output(30)))) = '1' ) THEN
        in_c_1_1_0_sva <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), in_c_mux_nl, in_c_not_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_j_2_ftd_1 <= STD_LOGIC_VECTOR'( "000000");
      ELSIF ( (run_wen AND (NOT or_480_itm)) = '1' ) THEN
        reg_j_2_ftd_1 <= MUX1HOT_v_6_3_2(for_1_for_for_1_for_and_nl, (z_out_3(5 DOWNTO
            0)), STD_LOGIC_VECTOR'( "000001"), STD_LOGIC_VECTOR'( or_478_nl & or_tmp_64
            & or_481_itm));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        temp_11_0_1_sva_1 <= STD_LOGIC_VECTOR'( "000000000000");
      ELSIF ( (run_wen AND (NOT (fsm_output(7))) AND for_2_for_for_for_for_for_stage_0_4)
          = '1' ) THEN
        temp_11_0_1_sva_1 <= temp_11_0_1_sva_1_mx1w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_c_2_3_0_sva_2_0 <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( (run_wen AND (and_409_cse OR or_dcpl_228 OR (fsm_output(5)) OR out_c_2_3_0_sva_2_0_mx0c1))
          = '1' ) THEN
        out_c_2_3_0_sva_2_0 <= MUX_v_3_2_2(STD_LOGIC_VECTOR'("000"), (out_c_2_3_0_sva_2(2
            DOWNTO 0)), out_c_2_3_0_sva_2_0_mx0c1);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        i_3_6_0_sva <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( (run_wen AND (i_3_6_0_sva_mx0c0 OR i_3_6_0_sva_mx0c1 OR (fsm_output(39))))
          = '1' ) THEN
        i_3_6_0_sva <= MUX1HOT_v_7_4_2(STD_LOGIC_VECTOR'( "0000001"), i_3_6_0_sva_2,
            STD_LOGIC_VECTOR'( "1000000"), STD_LOGIC_VECTOR'( "0111111"), STD_LOGIC_VECTOR'(
            i_3_6_0_sva_mx0c0 & i_3_6_0_sva_mx0c1 & j_and_nl & j_or_1_nl));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_x_1_sva_1_0_ftd <= '0';
        reg_x_1_sva_1_0_ftd_1 <= '0';
      ELSIF ( x_and_ssc = '1' ) THEN
        reg_x_1_sva_1_0_ftd <= x_1_sva_1_0_mx0c0;
        reg_x_1_sva_1_0_ftd_1 <= (NOT reg_x_1_sva_1_0_ftd_1) OR x_1_sva_1_0_mx0c0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        i_10_12_0_sva_11_0 <= STD_LOGIC_VECTOR'( "000000000000");
      ELSIF ( (run_wen AND (for_1_for_for_or_1_cse OR i_10_12_0_sva_11_0_mx0c1 OR
          (fsm_output(13)) OR i_10_12_0_sva_11_0_mx0c3 OR (fsm_output(37)) OR (fsm_output(38))
          OR (fsm_output(51)))) = '1' ) THEN
        i_10_12_0_sva_11_0 <= MUX_v_12_2_2(STD_LOGIC_VECTOR'("000000000000"), i_mux1h_19_nl,
            nor_70_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        var_tmp_33_6_1_sva <= STD_LOGIC_VECTOR'( "0000000000000000000000000000");
      ELSIF ( (run_wen AND (or_dcpl_122 OR (fsm_output(14)))) = '1' ) THEN
        var_tmp_33_6_1_sva <= MUX_v_28_2_2(STD_LOGIC_VECTOR'("0000000000000000000000000000"),
            var_tmp_mux_nl, (fsm_output(14)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_c_3_3_0_sva_2_0 <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( (run_wen AND (or_dcpl_231 OR ((out_c_3_3_0_sva_2(3)) AND or_dcpl_278)
          OR out_c_3_3_0_sva_2_0_mx0c1)) = '1' ) THEN
        out_c_3_3_0_sva_2_0 <= MUX_v_3_2_2(STD_LOGIC_VECTOR'("000"), (out_c_3_3_0_sva_2(2
            DOWNTO 0)), out_c_3_3_0_sva_2_0_mx0c1);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_3_for_2_asn_itm_12_0 <= STD_LOGIC_VECTOR'( "0000000000000");
      ELSIF ( (run_wen AND (NOT(or_dcpl_115 OR (fsm_output(20)) OR (fsm_output(44))
          OR or_dcpl_109 OR (fsm_output(18)) OR (fsm_output(42))))) = '1' ) THEN
        for_3_for_2_asn_itm_12_0 <= MUX_v_13_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_3_for_1_acc_4_nl),
            13)), (for_3_for_2_div_cmp_z(12 DOWNTO 0)), or_544_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        i_11_12_0_sva_1_12 <= '0';
        i_11_12_0_sva_1_11_0 <= STD_LOGIC_VECTOR'( "000000000000");
      ELSIF ( i_and_2_ssc = '1' ) THEN
        i_11_12_0_sva_1_12 <= z_out_4(12);
        i_11_12_0_sva_1_11_0 <= MUX_v_12_2_2(for_2_for_for_for_for_2_for_for_for_and_1_nl,
            (z_out_4(11 DOWNTO 0)), ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_or_3_cse);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_13_11
            <= STD_LOGIC_VECTOR'( "000");
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_10_0
            <= STD_LOGIC_VECTOR'( "00000000000");
      ELSIF ( ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_2_cse
          = '1' ) THEN
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_13_11
            <= MUX_v_3_2_2((z_out_9(20 DOWNTO 18)), (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_itm_mx0w0(13
            DOWNTO 11)), ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_or_cse);
        ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_10_0
            <= MUX1HOT_v_11_3_2((z_out_9(17 DOWNTO 7)), (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_itm_mx0w0(10
            DOWNTO 0)), (z_out_11(10 DOWNTO 0)), STD_LOGIC_VECTOR'( ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_nor_nl
            & ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_or_cse
            & or_203_cse));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        temp_11_0_sva_1 <= STD_LOGIC_VECTOR'( "000000000000");
      ELSIF ( (run_wen AND (NOT (fsm_output(31))) AND for_2_for_for_for_for_for_stage_0_4)
          = '1' ) THEN
        temp_11_0_sva_1 <= temp_11_0_sva_1_mx1w0;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        var_tmp_33_6_sva <= STD_LOGIC_VECTOR'( "0000000000000000000000000000");
      ELSIF ( (run_wen AND ((fsm_output(38)) OR or_dcpl_278)) = '1' ) THEN
        var_tmp_33_6_sva <= MUX_v_28_2_2(STD_LOGIC_VECTOR'("0000000000000000000000000000"),
            var_tmp_mux_3_nl, (fsm_output(38)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_var_tmp_33_6_1_1_ftd <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( (run_wen AND for_2_for_for_for_for_for_stage_0_3 AND (NOT(or_dcpl_115
          OR (fsm_output(20)) OR (fsm_output(23)) OR (fsm_output(22)) OR (fsm_output(21))
          OR (fsm_output(25)) OR (fsm_output(18)) OR (fsm_output(24)) OR (fsm_output(16))
          OR (fsm_output(15))))) = '1' ) THEN
        reg_var_tmp_33_6_1_1_ftd <= var_tmp_33_6_1_sva_1_mx1w0(27 DOWNTO 19);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_var_tmp_33_6_1_ftd <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( (run_wen AND for_2_for_for_for_for_for_stage_0_3 AND (NOT((fsm_output(44))
          OR (fsm_output(41)) OR (fsm_output(43)) OR or_dcpl_108 OR (fsm_output(47))
          OR (fsm_output(45)) OR (fsm_output(48)) OR (fsm_output(42)) OR (fsm_output(40))
          OR (fsm_output(39))))) = '1' ) THEN
        reg_var_tmp_33_6_1_ftd <= var_tmp_33_6_sva_1_mx1w0(27 DOWNTO 19);
      END IF;
    END IF;
  END PROCESS;
  or_325_nl <= or_dcpl_115 OR (fsm_output(20)) OR (fsm_output(23)) OR (fsm_output(22))
      OR (fsm_output(21)) OR (fsm_output(44)) OR or_dcpl_109 OR or_dcpl_108 OR (fsm_output(47))
      OR (fsm_output(45)) OR (fsm_output(25)) OR (fsm_output(59)) OR (fsm_output(48))
      OR (fsm_output(58)) OR (fsm_output(18)) OR (fsm_output(42)) OR (fsm_output(24))
      OR (fsm_output(16)) OR (fsm_output(40)) OR (fsm_output(2)) OR (fsm_output(15))
      OR or_dcpl_94 OR (fsm_output(14)) OR ((NOT((NOT(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp
      AND for_2_for_for_for_for_for_stage_0_4)) AND for_1_for_for_stage_0_2)) AND
      or_dcpl_4);
  i_i_mux_1_nl <= MUX_v_14_2_2(z_out_14, i_1_13_0_sva, or_325_nl);
  nor_63_nl <= NOT((fsm_output(0)) OR (fsm_output(56)) OR (fsm_output(36)) OR or_dcpl_122
      OR (fsm_output(50)));
  operator_20_false_acc_1_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (z_out_14(13
      DOWNTO 12))) + SIGNED'( "001"), 3));
  ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_1_nl
      <= (NOT (rtn_out(0))) AND or_79_cse;
  ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_1_nl
      <= (NOT (rtn_out(0))) AND or_cse;
  or_442_nl <= (fsm_output(58)) OR (fsm_output(16)) OR (fsm_output(40)) OR (fsm_output(51))
      OR (fsm_output(30));
  operator_20_false_mux1h_nl <= MUX1HOT_s_1_4_2((operator_20_false_acc_1_nl(2)),
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_1_nl,
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm, ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_1_nl,
      STD_LOGIC_VECTOR'( or_324_cse & (fsm_output(15)) & or_442_nl & (fsm_output(39))));
  for_1_for_for_mux_8_nl <= MUX_s_1_2_2(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp,
      for_1_for_for_stage_0_2_mx0w2, for_1_for_for_or_1_cse);
  for_1_for_for_acc_17_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm),
      6), 7) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_1_for_for_acc_14_psp_1(6
      DOWNTO 5)), 2), 7), 7));
  j_j_mux_nl <= MUX_s_1_2_2((z_out_3(6)), reg_j_2_ftd, or_480_itm);
  temp_temp_nor_nl <= NOT(or_242_cse OR (fsm_output(7)));
  temp_and_3_nl <= or_242_cse AND (NOT (fsm_output(7)));
  temp_temp_mux1h_nl <= MUX1HOT_v_12_3_2(temp_11_0_1_sva_1_mx1w0, temp_11_0_1_lpi_7,
      temp_11_0_1_sva_1, STD_LOGIC_VECTOR'( temp_temp_nor_nl & temp_and_3_nl & (fsm_output(7))));
  nor_66_nl <= NOT(or_dcpl_168 OR (fsm_output(9)) OR or_dcpl_223);
  y_mux_nl <= MUX_s_1_2_2(y_1_1_0_sva_0, (NOT y_1_1_0_sva_0), for_1_for_for_stage_0_2);
  for_1_for_for_mux_9_nl <= MUX_s_1_2_2(for_1_for_for_stage_0_2, ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp,
      for_1_for_for_or_3_cse);
  or_510_nl <= or_dcpl_4 OR (fsm_output(38));
  for_1_for_for_mux1h_44_nl <= MUX1HOT_s_1_4_2(for_2_for_for_for_for_for_stage_0_3,
      (z_out_4(12)), (z_out_4(12)), for_7_for_for_for_for_land_lpi_6_dfm_st_1_mx0w4,
      STD_LOGIC_VECTOR'( for_1_for_for_or_1_cse & or_510_nl & (fsm_output(14)) &
      (fsm_output(51))));
  for_2_for_for_for_for_for_acc_28_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(for_2_for_for_for_for_for_acc_17_sdt_1_8_1(7
      DOWNTO 5)), 3), 4) + CONV_SIGNED(CONV_SIGNED(SIGNED'( reg_x_1_sva_1_0_ftd &
      reg_x_1_sva_1_0_ftd_1), 2), 4), 4));
  for_2_for_for_for_for_for_acc_27_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(for_2_for_for_for_for_for_acc_21_sdt_3_0_1(3
      DOWNTO 2)), 2), 4) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(in_c_1_1_0_sva & '1'),
      3), 4), 4));
  for_2_for_for_for_for_for_mul_7_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
      UNSIGNED(out_c_2_3_0_sva_2_0) * UNSIGNED'( "11011")), 8));
  ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qif_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1'
      & (NOT (rtn_out(4 DOWNTO 1)))) + UNSIGNED'( "01001"), 5));
  ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qif_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1'
      & (NOT (rtn_out(4 DOWNTO 1)))) + UNSIGNED'( "01001"), 5));
  or_515_nl <= (fsm_output(54)) OR (fsm_output(16)) OR (fsm_output(40)) OR (fsm_output(52))
      OR (fsm_output(51)) OR (fsm_output(53));
  ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_mux1h_16_nl <= MUX1HOT_v_5_5_2(data_out_out,
      STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qif_acc_nl),
      5)), ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_itm,
      STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qif_acc_nl),
      5)), (i_12_5_0_sva_2(4 DOWNTO 0)), STD_LOGIC_VECTOR'( for_1_for_for_or_1_cse
      & (fsm_output(15)) & or_515_nl & (fsm_output(39)) & (fsm_output(55))));
  nor_69_nl <= NOT(or_dcpl_151 OR ((NOT or_79_cse) AND (fsm_output(15))) OR ((NOT
      or_cse) AND (fsm_output(39))));
  ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_mux_nl
      <= MUX_v_5_2_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0,
      (reg_j_2_ftd_1(4 DOWNTO 0)), fsm_output(54));
  nand_17_nl <= NOT((NOT((fsm_output(54)) OR (fsm_output(6)))) AND (NOT(CONV_SL_1_1(fsm_output(52
      DOWNTO 51)/=STD_LOGIC_VECTOR'("00")))));
  for_2_for_for_for_for_for_asn_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_1_4_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_and_nl
      <= MUX_v_5_2_2(STD_LOGIC_VECTOR'("00000"), ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_mux_nl,
      nand_17_nl);
  nor_71_nl <= NOT(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_or_3_cse
      OR for_1_for_for_or_1_cse);
  for_2_for_for_for_acc_13_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(z_out_3(6 DOWNTO
      0)) + SIGNED'( "0111111"), 7));
  for_3_for_2_or_1_nl <= (NOT(CONV_SL_1_1(out_c_3_3_0_sva_2_0/=STD_LOGIC_VECTOR'("000"))))
      OR for_3_for_2_and_cse_1 OR for_3_for_2_and_2_cse_1 OR for_3_for_2_and_3_cse_1;
  temp_temp_nor_1_nl <= NOT(or_242_cse OR (fsm_output(31)));
  temp_and_5_nl <= or_242_cse AND (NOT (fsm_output(31)));
  temp_temp_mux1h_1_nl <= MUX1HOT_v_12_3_2(temp_11_0_sva_1_mx1w0, temp_11_0_lpi_7,
      temp_11_0_sva_1, STD_LOGIC_VECTOR'( temp_temp_nor_1_nl & temp_and_5_nl & (fsm_output(31))));
  not_220_nl <= NOT or_tmp_134;
  for_5_for_for_for_for_for_acc_37_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(for_5_for_for_for_for_for_acc_23_sdt_1(8),
      1), 1), 2) + CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_qr_0_lpi_3_dfm,
      1), 1), 2), 2));
  for_5_for_for_for_for_for_acc_36_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_5_for_for_for_for_for_acc_37_nl),
      2)) & (for_5_for_for_for_for_for_acc_23_sdt_1(7 DOWNTO 6))) + CONV_SIGNED(CONV_SIGNED(SIGNED'(
      '1' & reg_x_1_sva_1_0_ftd & reg_x_1_sva_1_0_ftd_1), 3), 4), 4));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_1_nl
      <= ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp AND
      (NOT (z_out_7(6)));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_2_nl
      <= ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp AND
      (NOT (z_out_4(12)));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_4_nl
      <= ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp AND
      (NOT for_2_for_for_for_for_for_stage_0_2);
  for_1_for_for_mux1h_42_nl <= MUX1HOT_s_1_6_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_1_nl,
      for_1_for_for_stage_0_2_mx0w2, ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_2_nl,
      or_79_cse, or_cse, ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_and_4_nl,
      STD_LOGIC_VECTOR'( for_1_for_for_or_cse & for_1_for_for_or_1_cse & for_1_for_for_or_3_cse
      & (fsm_output(15)) & (fsm_output(39)) & (fsm_output(51))));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux1h_6_nl
      <= MUX1HOT_v_5_4_2((i_2_6_0_sva_2(5 DOWNTO 1)), (for_2_for_for_for_for_for_acc_17_sdt_1_8_1(4
      DOWNTO 0)), (z_out_1(5 DOWNTO 1)), (for_5_for_for_for_for_for_acc_23_sdt_1(5
      DOWNTO 1)), STD_LOGIC_VECTOR'( ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm_mx0c1
      & (fsm_output(6)) & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_or_3_cse
      & (fsm_output(30))));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux1h_25_nl
      <= MUX1HOT_s_1_4_2((i_2_6_0_sva_2(0)), (z_out_3(0)), (z_out_1(0)), (for_5_for_for_for_for_for_acc_23_sdt_1(0)),
      STD_LOGIC_VECTOR'( ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm_mx0c1
      & (fsm_output(6)) & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_or_3_cse
      & (fsm_output(30))));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_not_nl
      <= NOT ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm_mx0c0;
  in_c_mux_nl <= MUX_v_2_2_2(out_c_1_1_0_sva_2, (for_5_for_for_for_for_for_acc_19_sdt_1(1
      DOWNTO 0)), fsm_output(30));
  in_c_not_nl <= NOT in_c_1_1_0_sva_mx0c0;
  for_7_for_for_acc_3_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0),
      5), 6) + UNSIGNED'( "000001"), 6));
  for_1_for_mux_nl <= MUX_v_6_2_2((z_out_7(5 DOWNTO 0)), STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_7_for_for_acc_3_nl),
      6)), fsm_output(53));
  j_or_nl <= (fsm_output(3)) OR (fsm_output(27)) OR (fsm_output(53));
  for_1_for_for_1_for_and_nl <= MUX_v_6_2_2(STD_LOGIC_VECTOR'("000000"), for_1_for_mux_nl,
      j_or_nl);
  or_478_nl <= (fsm_output(3)) OR (fsm_output(28)) OR (fsm_output(27)) OR (fsm_output(4))
      OR (fsm_output(53)) OR (fsm_output(2)) OR (fsm_output(26)) OR and_399_cse OR
      and_400_cse;
  j_and_nl <= j_j_nor_cse AND (fsm_output(39));
  j_or_1_nl <= (CONV_SL_1_1(out_c_3_3_0_sva_2_0(1 DOWNTO 0)=STD_LOGIC_VECTOR'("01"))
      AND (fsm_output(39))) OR (CONV_SL_1_1(out_c_3_3_0_sva_2_0(1 DOWNTO 0)=STD_LOGIC_VECTOR'("10"))
      AND (fsm_output(39))) OR (CONV_SL_1_1(out_c_3_3_0_sva_2_0(1 DOWNTO 0)=STD_LOGIC_VECTOR'("11"))
      AND (fsm_output(39)));
  i_or_8_nl <= (fsm_output(13)) OR i_or_7_cse;
  i_and_4_nl <= (NOT or_288_tmp) AND (fsm_output(51));
  i_and_5_nl <= or_288_tmp AND (fsm_output(51));
  i_mux1h_19_nl <= MUX1HOT_v_12_5_2(padded_input_rsci_q_d, (z_out_4(11 DOWNTO 0)),
      i_11_12_0_sva_1_11_0, enc1_rsci_q_d, i_10_12_0_sva_11_0, STD_LOGIC_VECTOR'(
      for_1_for_for_or_1_cse & i_or_8_nl & i_10_12_0_sva_11_0_mx0c3 & i_and_4_nl
      & i_and_5_nl));
  nor_70_nl <= NOT(i_10_12_0_sva_11_0_mx0c1 OR ((NOT ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_1_expret_unequal_tmp)
      AND i_or_7_cse));
  var_tmp_mux_nl <= MUX_v_28_2_2(var_tmp_33_6_1_sva_1_mx1w0, var_tmp_33_6_1_sva,
      or_dcpl_277);
  for_3_for_1_acc_4_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(buf2_rsci_q_d),
      12), 13) + CONV_SIGNED(CONV_SIGNED(SIGNED('1' & (NOT (i_1_13_0_sva(13 DOWNTO
      12)))), 3), 13) + SIGNED'( "0000000000001"), 13));
  or_544_nl <= (fsm_output(22)) OR (fsm_output(46));
  for_2_for_for_for_for_2_for_for_for_and_1_nl <= MUX_v_12_2_2(STD_LOGIC_VECTOR'("000000000000"),
      (z_out_4(11 DOWNTO 0)), (fsm_output(14)));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_nor_nl
      <= NOT(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_or_cse
      OR or_203_cse);
  var_tmp_mux_3_nl <= MUX_v_28_2_2(var_tmp_33_6_sva_1_mx1w0, var_tmp_33_6_sva, or_dcpl_277);
  for_2_for_for_for_for_2_for_for_for_and_4_nl <= ((reg_x_1_sva_1_0_ftd_1 AND y_1_1_0_sva_1)
      XOR reg_x_1_sva_1_0_ftd XOR y_1_1_0_sva_1) AND (fsm_output(6));
  for_2_for_for_for_for_2_for_for_for_and_5_nl <= (reg_x_1_sva_1_0_ftd_1 XOR y_1_1_0_sva_1)
      AND (fsm_output(6));
  for_2_for_for_for_for_2_for_for_for_or_1_nl <= y_1_1_0_sva_0 OR (NOT (fsm_output(6)));
  z_out_3 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(reg_j_2_ftd
      & reg_j_2_ftd_1), 7), 8) + CONV_UNSIGNED(CONV_SIGNED(SIGNED'( for_2_for_for_for_for_2_for_for_for_and_4_nl
      & for_2_for_for_for_for_2_for_for_for_and_5_nl & for_2_for_for_for_for_2_for_for_for_or_1_nl),
      3), 8), 8));
  for_3_for_mux_3_nl <= MUX_v_12_2_2(i_10_12_0_sva_11_0, i_11_12_0_sva_1_11_0, fsm_output(14));
  z_out_4 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_3_for_mux_3_nl),
      13) + UNSIGNED'( "0000000000001"), 13));
  z_out_7 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(reg_j_2_ftd_1),
      6), 7) + CONV_UNSIGNED(CONV_SIGNED(SIGNED'( or_tmp_64 & '1'), 2), 7), 7));
  operator_40_20_false_AC_TRN_AC_WRAP_mux_4_nl <= MUX_v_19_2_2((NOT for_3_for_2_acc_9_psp_1_sva),
      (NOT for_6_for_2_acc_9_psp_1_sva), fsm_output(48));
  operator_40_20_false_AC_TRN_AC_WRAP_mux_5_nl <= MUX_v_6_2_2((NOT for_3_for_2_mul_1_psp_1_sva_5_0),
      (NOT for_6_for_2_mul_1_psp_1_sva_5_0), fsm_output(48));
  operator_40_20_false_AC_TRN_AC_WRAP_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1'
      & STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(operator_40_20_false_AC_TRN_AC_WRAP_mux_4_nl),26))
      & operator_40_20_false_AC_TRN_AC_WRAP_mux_5_nl) + UNSIGNED'( "000000000000000000000000000000001"),
      33));
  z_out_8_32 <= operator_40_20_false_AC_TRN_AC_WRAP_acc_nl(32);
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_3_nl
      <= MUX_s_1_2_2((i_10_12_0_sva_11_0(11)), (for_3_for_2_asn_itm_12_0(12)), for_1_for_for_or_3_cse);
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_and_1_nl
      <= ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_3_nl
      AND (NOT or_203_cse);
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_6_nl
      <= MUX1HOT_s_1_3_2((ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_13_11(0)),
      (i_10_12_0_sva_11_0(11)), (for_3_for_2_asn_itm_12_0(11)), STD_LOGIC_VECTOR'(
      or_203_cse & for_1_for_for_or_1_cse & for_1_for_for_or_3_cse));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_7_nl
      <= MUX1HOT_v_11_3_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mul_psp_sva_10_0,
      (i_10_12_0_sva_11_0(10 DOWNTO 0)), (for_3_for_2_asn_itm_12_0(10 DOWNTO 0)),
      STD_LOGIC_VECTOR'( or_203_cse & for_1_for_for_or_1_cse & for_1_for_for_or_3_cse));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_8_nl
      <= MUX1HOT_v_7_3_2(STD_LOGIC_VECTOR'( "0000010"), STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0(4),
      1),7)), (for_3_for_2_asn_itm_12_0(12 DOWNTO 6)), STD_LOGIC_VECTOR'( or_203_cse
      & for_1_for_for_or_1_cse & for_1_for_for_or_3_cse));
  ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_9_nl
      <= MUX1HOT_v_6_3_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_itm,
      STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_1_normalized_output_mux_1_itm_4_0),6)),
      (for_3_for_2_asn_itm_12_0(5 DOWNTO 0)), STD_LOGIC_VECTOR'( or_203_cse & for_1_for_for_or_1_cse
      & for_1_for_for_or_3_cse));
  z_out_11 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(SIGNED'( SIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_and_1_nl
      & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_6_nl
      & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_7_nl)
      * SIGNED(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_8_nl
      & ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux1h_9_nl)),
      24));
  for_1_for_for_for_1_for_for_and_2_atp <= (out_c_2_3_0_sva_2_0(2)) AND or_601_itm;
  for_1_for_for_mux_11_nl <= MUX_v_2_2_2(in_c_1_1_0_sva, (out_c_2_3_0_sva_2_0(1 DOWNTO
      0)), or_601_itm);
  for_1_for_for_mul_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(for_1_for_for_mux_11_nl)
      * UNSIGNED'( "10001000001")), 12));
  z_out_12 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_1_for_for_mul_nl),
      12) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_1_for_for_for_1_for_for_and_2_atp
      & STD_LOGIC_VECTOR'( "00000") & for_1_for_for_for_1_for_for_and_2_atp & STD_LOGIC_VECTOR'(
      "00")), 9), 12), 12));
  for_3_for_mux_4_nl <= MUX_v_12_2_2(buf2_rsci_q_d, STD_LOGIC_VECTOR'( "000000000001"),
      or_324_cse);
  z_out_14 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(i_1_13_0_sva) + CONV_UNSIGNED(SIGNED(for_3_for_mux_4_nl),
      14), 14));
  z_out_1 <= MUX_v_6_4_2(STD_LOGIC_VECTOR'( "101011"), STD_LOGIC_VECTOR'( "011010"),
      STD_LOGIC_VECTOR'( "001110"), STD_LOGIC_VECTOR'( "000100"), z_out_9(20 DOWNTO
      19));
  z_out_2 <= MUX_v_10_4_2(STD_LOGIC_VECTOR'( "0110101001"), STD_LOGIC_VECTOR'( "1001010100"),
      STD_LOGIC_VECTOR'( "1011101110"), STD_LOGIC_VECTOR'( "1101111100"), z_out_9(20
      DOWNTO 19));
END v4;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_main
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_wait_pkg_v1.ALL;
USE mgc_hls.ccs_out_wait_pkg_v1.ALL;
USE mgc_hls.mgc_comps.ALL;
USE mgc_hls.mgc_shift_comps_v5.ALL;
USE mgc_hls.BLOCK_1R1W_RBW_pkg.ALL;


ENTITY UNET_IP_main IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    input_rsc_dat : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    input_rsc_vld : IN STD_LOGIC;
    input_rsc_rdy : OUT STD_LOGIC;
    output_rsc_dat : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    output_rsc_vld : OUT STD_LOGIC;
    output_rsc_rdy : IN STD_LOGIC
  );
END UNET_IP_main;

ARCHITECTURE v4 OF UNET_IP_main IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL buf1_rsci_clken_d : STD_LOGIC;
  SIGNAL buf1_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf1_rsci_wadr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL padded_input_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_radr_d : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL padded_input_rsci_wadr_d : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL buf2_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf2_rsci_wadr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL enc1_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL enc1_rsci_wadr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf1_rsc_clken : STD_LOGIC;
  SIGNAL buf1_rsc_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsc_re : STD_LOGIC;
  SIGNAL buf1_rsc_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf1_rsc_we : STD_LOGIC;
  SIGNAL buf1_rsc_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsc_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL padded_input_rsc_clken : STD_LOGIC;
  SIGNAL padded_input_rsc_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsc_re : STD_LOGIC;
  SIGNAL padded_input_rsc_radr : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL padded_input_rsc_we : STD_LOGIC;
  SIGNAL padded_input_rsc_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsc_wadr : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL buf2_rsc_clken : STD_LOGIC;
  SIGNAL buf2_rsc_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsc_re : STD_LOGIC;
  SIGNAL buf2_rsc_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf2_rsc_we : STD_LOGIC;
  SIGNAL buf2_rsc_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsc_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL enc1_rsc_clken : STD_LOGIC;
  SIGNAL enc1_rsc_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsc_re : STD_LOGIC;
  SIGNAL enc1_rsc_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL enc1_rsc_we : STD_LOGIC;
  SIGNAL enc1_rsc_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsc_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf1_rsci_re_d_iff : STD_LOGIC;
  SIGNAL buf1_rsci_we_d_iff : STD_LOGIC;
  SIGNAL padded_input_rsci_re_d_iff : STD_LOGIC;
  SIGNAL padded_input_rsci_we_d_iff : STD_LOGIC;
  SIGNAL buf2_rsci_re_d_iff : STD_LOGIC;
  SIGNAL buf2_rsci_we_d_iff : STD_LOGIC;
  SIGNAL enc1_rsci_re_d_iff : STD_LOGIC;
  SIGNAL enc1_rsci_we_d_iff : STD_LOGIC;

  SIGNAL buf1_rsc_comp_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsc_comp_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsc_comp_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf1_rsc_comp_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);

  SIGNAL padded_input_rsc_comp_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsc_comp_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsc_comp_radr : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL padded_input_rsc_comp_wadr : STD_LOGIC_VECTOR (13 DOWNTO 0);

  SIGNAL buf2_rsc_comp_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsc_comp_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsc_comp_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf2_rsc_comp_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);

  SIGNAL enc1_rsc_comp_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsc_comp_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsc_comp_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL enc1_rsc_comp_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);

  COMPONENT UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_3_15_12_32768_1_32768_12_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      re : OUT STD_LOGIC;
      radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      re_d : IN STD_LOGIC;
      wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL buf1_rsci_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsci_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf1_rsci_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsci_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf1_rsci_d_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsci_q_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf1_rsci_radr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf1_rsci_wadr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);

  COMPONENT UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_4_14_12_13068_1_13068_12_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      re : OUT STD_LOGIC;
      radr : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (13 DOWNTO 0);
      re_d : IN STD_LOGIC;
      wadr_d : IN STD_LOGIC_VECTOR (13 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL padded_input_rsci_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_radr : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL padded_input_rsci_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_wadr : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL padded_input_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_q_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_radr_d_1 : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL padded_input_rsci_wadr_d_1 : STD_LOGIC_VECTOR (13 DOWNTO 0);

  COMPONENT UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_15_12_32768_1_32768_12_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      re : OUT STD_LOGIC;
      radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      re_d : IN STD_LOGIC;
      wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL buf2_rsci_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsci_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf2_rsci_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsci_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf2_rsci_d_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsci_q_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL buf2_rsci_radr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL buf2_rsci_wadr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);

  COMPONENT UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_15_12_32768_1_32768_12_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      re : OUT STD_LOGIC;
      radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      re_d : IN STD_LOGIC;
      wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL enc1_rsci_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsci_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL enc1_rsci_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsci_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL enc1_rsci_d_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsci_q_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL enc1_rsci_radr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL enc1_rsci_wadr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);

  COMPONENT UNET_IP_main_run
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      input_rsc_dat : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      input_rsc_vld : IN STD_LOGIC;
      input_rsc_rdy : OUT STD_LOGIC;
      output_rsc_dat : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      output_rsc_vld : OUT STD_LOGIC;
      output_rsc_rdy : IN STD_LOGIC;
      buf1_rsci_clken_d : OUT STD_LOGIC;
      buf1_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      buf1_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      buf1_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      buf1_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      padded_input_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      padded_input_rsci_radr_d : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
      padded_input_rsci_wadr_d : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
      buf2_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      buf2_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      buf2_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      buf2_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      enc1_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      enc1_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      enc1_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      enc1_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      buf1_rsci_re_d_pff : OUT STD_LOGIC;
      buf1_rsci_we_d_pff : OUT STD_LOGIC;
      padded_input_rsci_re_d_pff : OUT STD_LOGIC;
      padded_input_rsci_we_d_pff : OUT STD_LOGIC;
      buf2_rsci_re_d_pff : OUT STD_LOGIC;
      buf2_rsci_we_d_pff : OUT STD_LOGIC;
      enc1_rsci_re_d_pff : OUT STD_LOGIC;
      enc1_rsci_we_d_pff : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL UNET_IP_main_run_inst_input_rsc_dat : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_output_rsc_dat : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_buf1_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_buf1_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_buf1_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_buf1_rsci_wadr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_padded_input_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO
      0);
  SIGNAL UNET_IP_main_run_inst_padded_input_rsci_radr_d : STD_LOGIC_VECTOR (13 DOWNTO
      0);
  SIGNAL UNET_IP_main_run_inst_padded_input_rsci_wadr_d : STD_LOGIC_VECTOR (13 DOWNTO
      0);
  SIGNAL UNET_IP_main_run_inst_buf2_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_buf2_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_buf2_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_buf2_rsci_wadr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_enc1_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_enc1_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_enc1_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL UNET_IP_main_run_inst_enc1_rsci_wadr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);

BEGIN
  buf1_rsc_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 15,
      data_width => 12,
      depth => 32768,
      latency => 1,
      suppress_sim_read_addr_range_errs => 1
      )
    PORT MAP(
      clk => clk,
      clken => buf1_rsc_clken,
      d => buf1_rsc_comp_d,
      q => buf1_rsc_comp_q,
      radr => buf1_rsc_comp_radr,
      re => buf1_rsc_re,
      wadr => buf1_rsc_comp_wadr,
      we => buf1_rsc_we
    );
  buf1_rsc_comp_d <= buf1_rsc_d;
  buf1_rsc_q <= buf1_rsc_comp_q;
  buf1_rsc_comp_radr <= buf1_rsc_radr;
  buf1_rsc_comp_wadr <= buf1_rsc_wadr;

  padded_input_rsc_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 14,
      data_width => 12,
      depth => 13068,
      latency => 1,
      suppress_sim_read_addr_range_errs => 1
      )
    PORT MAP(
      clk => clk,
      clken => padded_input_rsc_clken,
      d => padded_input_rsc_comp_d,
      q => padded_input_rsc_comp_q,
      radr => padded_input_rsc_comp_radr,
      re => padded_input_rsc_re,
      wadr => padded_input_rsc_comp_wadr,
      we => padded_input_rsc_we
    );
  padded_input_rsc_comp_d <= padded_input_rsc_d;
  padded_input_rsc_q <= padded_input_rsc_comp_q;
  padded_input_rsc_comp_radr <= padded_input_rsc_radr;
  padded_input_rsc_comp_wadr <= padded_input_rsc_wadr;

  buf2_rsc_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 15,
      data_width => 12,
      depth => 32768,
      latency => 1,
      suppress_sim_read_addr_range_errs => 1
      )
    PORT MAP(
      clk => clk,
      clken => buf2_rsc_clken,
      d => buf2_rsc_comp_d,
      q => buf2_rsc_comp_q,
      radr => buf2_rsc_comp_radr,
      re => buf2_rsc_re,
      wadr => buf2_rsc_comp_wadr,
      we => buf2_rsc_we
    );
  buf2_rsc_comp_d <= buf2_rsc_d;
  buf2_rsc_q <= buf2_rsc_comp_q;
  buf2_rsc_comp_radr <= buf2_rsc_radr;
  buf2_rsc_comp_wadr <= buf2_rsc_wadr;

  enc1_rsc_comp : mgc_hls.block_1r1w_rbw_pkg.BLOCK_1R1W_RBW
    GENERIC MAP(
      addr_width => 15,
      data_width => 12,
      depth => 32768,
      latency => 1,
      suppress_sim_read_addr_range_errs => 1
      )
    PORT MAP(
      clk => clk,
      clken => enc1_rsc_clken,
      d => enc1_rsc_comp_d,
      q => enc1_rsc_comp_q,
      radr => enc1_rsc_comp_radr,
      re => enc1_rsc_re,
      wadr => enc1_rsc_comp_wadr,
      we => enc1_rsc_we
    );
  enc1_rsc_comp_d <= enc1_rsc_d;
  enc1_rsc_q <= enc1_rsc_comp_q;
  enc1_rsc_comp_radr <= enc1_rsc_radr;
  enc1_rsc_comp_wadr <= enc1_rsc_wadr;

  buf1_rsci : UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_3_15_12_32768_1_32768_12_1_gen
    PORT MAP(
      clken => buf1_rsc_clken,
      q => buf1_rsci_q,
      re => buf1_rsc_re,
      radr => buf1_rsci_radr,
      we => buf1_rsc_we,
      d => buf1_rsci_d,
      wadr => buf1_rsci_wadr,
      clken_d => buf1_rsci_clken_d,
      d_d => buf1_rsci_d_d_1,
      q_d => buf1_rsci_q_d_1,
      radr_d => buf1_rsci_radr_d_1,
      re_d => buf1_rsci_re_d_iff,
      wadr_d => buf1_rsci_wadr_d_1,
      we_d => buf1_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => buf1_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => buf1_rsci_re_d_iff
    );
  buf1_rsci_q <= buf1_rsc_q;
  buf1_rsc_radr <= buf1_rsci_radr;
  buf1_rsc_d <= buf1_rsci_d;
  buf1_rsc_wadr <= buf1_rsci_wadr;
  buf1_rsci_d_d_1 <= buf1_rsci_d_d;
  buf1_rsci_q_d <= buf1_rsci_q_d_1;
  buf1_rsci_radr_d_1 <= buf1_rsci_radr_d;
  buf1_rsci_wadr_d_1 <= buf1_rsci_wadr_d;

  padded_input_rsci : UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_4_14_12_13068_1_13068_12_1_gen
    PORT MAP(
      clken => padded_input_rsc_clken,
      q => padded_input_rsci_q,
      re => padded_input_rsc_re,
      radr => padded_input_rsci_radr,
      we => padded_input_rsc_we,
      d => padded_input_rsci_d,
      wadr => padded_input_rsci_wadr,
      clken_d => buf1_rsci_clken_d,
      d_d => padded_input_rsci_d_d,
      q_d => padded_input_rsci_q_d_1,
      radr_d => padded_input_rsci_radr_d_1,
      re_d => padded_input_rsci_re_d_iff,
      wadr_d => padded_input_rsci_wadr_d_1,
      we_d => padded_input_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => padded_input_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => padded_input_rsci_re_d_iff
    );
  padded_input_rsci_q <= padded_input_rsc_q;
  padded_input_rsc_radr <= padded_input_rsci_radr;
  padded_input_rsc_d <= padded_input_rsci_d;
  padded_input_rsc_wadr <= padded_input_rsci_wadr;
  padded_input_rsci_d_d <= buf1_rsci_q_d;
  padded_input_rsci_q_d <= padded_input_rsci_q_d_1;
  padded_input_rsci_radr_d_1 <= padded_input_rsci_radr_d;
  padded_input_rsci_wadr_d_1 <= padded_input_rsci_wadr_d;

  buf2_rsci : UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_5_15_12_32768_1_32768_12_1_gen
    PORT MAP(
      clken => buf2_rsc_clken,
      q => buf2_rsci_q,
      re => buf2_rsc_re,
      radr => buf2_rsci_radr,
      we => buf2_rsc_we,
      d => buf2_rsci_d,
      wadr => buf2_rsci_wadr,
      clken_d => buf1_rsci_clken_d,
      d_d => buf2_rsci_d_d_1,
      q_d => buf2_rsci_q_d_1,
      radr_d => buf2_rsci_radr_d_1,
      re_d => buf2_rsci_re_d_iff,
      wadr_d => buf2_rsci_wadr_d_1,
      we_d => buf2_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => buf2_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => buf2_rsci_re_d_iff
    );
  buf2_rsci_q <= buf2_rsc_q;
  buf2_rsc_radr <= buf2_rsci_radr;
  buf2_rsc_d <= buf2_rsci_d;
  buf2_rsc_wadr <= buf2_rsci_wadr;
  buf2_rsci_d_d_1 <= buf2_rsci_d_d;
  buf2_rsci_q_d <= buf2_rsci_q_d_1;
  buf2_rsci_radr_d_1 <= buf2_rsci_radr_d;
  buf2_rsci_wadr_d_1 <= buf2_rsci_wadr_d;

  enc1_rsci : UNET_IP_main_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_6_15_12_32768_1_32768_12_1_gen
    PORT MAP(
      clken => enc1_rsc_clken,
      q => enc1_rsci_q,
      re => enc1_rsc_re,
      radr => enc1_rsci_radr,
      we => enc1_rsc_we,
      d => enc1_rsci_d,
      wadr => enc1_rsci_wadr,
      clken_d => buf1_rsci_clken_d,
      d_d => enc1_rsci_d_d_1,
      q_d => enc1_rsci_q_d_1,
      radr_d => enc1_rsci_radr_d_1,
      re_d => enc1_rsci_re_d_iff,
      wadr_d => enc1_rsci_wadr_d_1,
      we_d => enc1_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => enc1_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => enc1_rsci_re_d_iff
    );
  enc1_rsci_q <= enc1_rsc_q;
  enc1_rsc_radr <= enc1_rsci_radr;
  enc1_rsc_d <= enc1_rsci_d;
  enc1_rsc_wadr <= enc1_rsci_wadr;
  enc1_rsci_d_d_1 <= enc1_rsci_d_d;
  enc1_rsci_q_d <= enc1_rsci_q_d_1;
  enc1_rsci_radr_d_1 <= enc1_rsci_radr_d;
  enc1_rsci_wadr_d_1 <= enc1_rsci_wadr_d;

  UNET_IP_main_run_inst : UNET_IP_main_run
    PORT MAP(
      clk => clk,
      rst => rst,
      input_rsc_dat => UNET_IP_main_run_inst_input_rsc_dat,
      input_rsc_vld => input_rsc_vld,
      input_rsc_rdy => input_rsc_rdy,
      output_rsc_dat => UNET_IP_main_run_inst_output_rsc_dat,
      output_rsc_vld => output_rsc_vld,
      output_rsc_rdy => output_rsc_rdy,
      buf1_rsci_clken_d => buf1_rsci_clken_d,
      buf1_rsci_d_d => UNET_IP_main_run_inst_buf1_rsci_d_d,
      buf1_rsci_q_d => UNET_IP_main_run_inst_buf1_rsci_q_d,
      buf1_rsci_radr_d => UNET_IP_main_run_inst_buf1_rsci_radr_d,
      buf1_rsci_wadr_d => UNET_IP_main_run_inst_buf1_rsci_wadr_d,
      padded_input_rsci_q_d => UNET_IP_main_run_inst_padded_input_rsci_q_d,
      padded_input_rsci_radr_d => UNET_IP_main_run_inst_padded_input_rsci_radr_d,
      padded_input_rsci_wadr_d => UNET_IP_main_run_inst_padded_input_rsci_wadr_d,
      buf2_rsci_d_d => UNET_IP_main_run_inst_buf2_rsci_d_d,
      buf2_rsci_q_d => UNET_IP_main_run_inst_buf2_rsci_q_d,
      buf2_rsci_radr_d => UNET_IP_main_run_inst_buf2_rsci_radr_d,
      buf2_rsci_wadr_d => UNET_IP_main_run_inst_buf2_rsci_wadr_d,
      enc1_rsci_d_d => UNET_IP_main_run_inst_enc1_rsci_d_d,
      enc1_rsci_q_d => UNET_IP_main_run_inst_enc1_rsci_q_d,
      enc1_rsci_radr_d => UNET_IP_main_run_inst_enc1_rsci_radr_d,
      enc1_rsci_wadr_d => UNET_IP_main_run_inst_enc1_rsci_wadr_d,
      buf1_rsci_re_d_pff => buf1_rsci_re_d_iff,
      buf1_rsci_we_d_pff => buf1_rsci_we_d_iff,
      padded_input_rsci_re_d_pff => padded_input_rsci_re_d_iff,
      padded_input_rsci_we_d_pff => padded_input_rsci_we_d_iff,
      buf2_rsci_re_d_pff => buf2_rsci_re_d_iff,
      buf2_rsci_we_d_pff => buf2_rsci_we_d_iff,
      enc1_rsci_re_d_pff => enc1_rsci_re_d_iff,
      enc1_rsci_we_d_pff => enc1_rsci_we_d_iff
    );
  UNET_IP_main_run_inst_input_rsc_dat <= input_rsc_dat;
  output_rsc_dat <= UNET_IP_main_run_inst_output_rsc_dat;
  buf1_rsci_d_d <= UNET_IP_main_run_inst_buf1_rsci_d_d;
  UNET_IP_main_run_inst_buf1_rsci_q_d <= buf1_rsci_q_d;
  buf1_rsci_radr_d <= UNET_IP_main_run_inst_buf1_rsci_radr_d;
  buf1_rsci_wadr_d <= UNET_IP_main_run_inst_buf1_rsci_wadr_d;
  UNET_IP_main_run_inst_padded_input_rsci_q_d <= padded_input_rsci_q_d;
  padded_input_rsci_radr_d <= UNET_IP_main_run_inst_padded_input_rsci_radr_d;
  padded_input_rsci_wadr_d <= UNET_IP_main_run_inst_padded_input_rsci_wadr_d;
  buf2_rsci_d_d <= UNET_IP_main_run_inst_buf2_rsci_d_d;
  UNET_IP_main_run_inst_buf2_rsci_q_d <= buf2_rsci_q_d;
  buf2_rsci_radr_d <= UNET_IP_main_run_inst_buf2_rsci_radr_d;
  buf2_rsci_wadr_d <= UNET_IP_main_run_inst_buf2_rsci_wadr_d;
  enc1_rsci_d_d <= UNET_IP_main_run_inst_enc1_rsci_d_d;
  UNET_IP_main_run_inst_enc1_rsci_q_d <= enc1_rsci_q_d;
  enc1_rsci_radr_d <= UNET_IP_main_run_inst_enc1_rsci_radr_d;
  enc1_rsci_wadr_d <= UNET_IP_main_run_inst_enc1_rsci_wadr_d;

END v4;



