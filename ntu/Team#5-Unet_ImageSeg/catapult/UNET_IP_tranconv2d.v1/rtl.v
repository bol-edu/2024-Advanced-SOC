// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r12016@cad40
//  Generated date: Thu Jun 13 03:36:11 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_2_15_12_32768_1_32768_12_1_gen
// ------------------------------------------------------------------


module UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_2_15_12_32768_1_32768_12_1_gen
    (
  q, re, radr, we, d, wadr, d_d, q_d, radr_d, re_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d,
      readA_r_ram_ir_internal_RMASK_B_d
);
  input [11:0] q;
  output re;
  output [14:0] radr;
  output we;
  output [11:0] d;
  output [14:0] wadr;
  input [11:0] d_d;
  output [11:0] q_d;
  input [14:0] radr_d;
  input re_d;
  input [14:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_1_15_12_32768_1_32768_12_1_gen
// ------------------------------------------------------------------


module UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_1_15_12_32768_1_32768_12_1_gen
    (
  q, re, radr, q_d, radr_d, re_d, readA_r_ram_ir_internal_RMASK_B_d
);
  input [11:0] q;
  output re;
  output [14:0] radr;
  output [11:0] q_d;
  input [14:0] radr_d;
  input re_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_tranconv2d_run_tran_run_tran_fsm
//  FSM Module
// ------------------------------------------------------------------


module UNET_IP_tranconv2d_run_tran_run_tran_fsm (
  clk, rst, arst_n, fsm_output, LOOP_RESET_C_0_tr0, main_C_1_tr0, LOOP_IN_C_0_tr0,
      LOOP_IN_C_0_tr1, LOOP_HEIGHT_C_0_tr0, LOOP_WIDTH_C_0_tr0, LOOP_X_C_0_tr0, LOOP_Y_C_7_tr0,
      LOOP_X_C_1_tr0, LOOP_WIDTH_C_1_tr0, LOOP_HEIGHT_C_1_tr0, LOOP_OUT_C_0_tr0
);
  input clk;
  input rst;
  input arst_n;
  output [20:0] fsm_output;
  reg [20:0] fsm_output;
  input LOOP_RESET_C_0_tr0;
  input main_C_1_tr0;
  input LOOP_IN_C_0_tr0;
  input LOOP_IN_C_0_tr1;
  input LOOP_HEIGHT_C_0_tr0;
  input LOOP_WIDTH_C_0_tr0;
  input LOOP_X_C_0_tr0;
  input LOOP_Y_C_7_tr0;
  input LOOP_X_C_1_tr0;
  input LOOP_WIDTH_C_1_tr0;
  input LOOP_HEIGHT_C_1_tr0;
  input LOOP_OUT_C_0_tr0;


  // FSM State Type Declaration for UNET_IP_tranconv2d_run_tran_run_tran_fsm_1
  parameter
    main_C_0 = 5'd0,
    LOOP_RESET_C_0 = 5'd1,
    main_C_1 = 5'd2,
    LOOP_IN_C_0 = 5'd3,
    LOOP_HEIGHT_C_0 = 5'd4,
    LOOP_WIDTH_C_0 = 5'd5,
    LOOP_X_C_0 = 5'd6,
    LOOP_Y_C_0 = 5'd7,
    LOOP_Y_C_1 = 5'd8,
    LOOP_Y_C_2 = 5'd9,
    LOOP_Y_C_3 = 5'd10,
    LOOP_Y_C_4 = 5'd11,
    LOOP_Y_C_5 = 5'd12,
    LOOP_Y_C_6 = 5'd13,
    LOOP_Y_C_7 = 5'd14,
    LOOP_X_C_1 = 5'd15,
    LOOP_WIDTH_C_1 = 5'd16,
    LOOP_HEIGHT_C_1 = 5'd17,
    LOOP_IN_C_1 = 5'd18,
    LOOP_OUT_C_0 = 5'd19,
    main_C_2 = 5'd20;

  reg [4:0] state_var;
  reg [4:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : UNET_IP_tranconv2d_run_tran_run_tran_fsm_1
    case (state_var)
      LOOP_RESET_C_0 : begin
        fsm_output = 21'b000000000000000000010;
        if ( LOOP_RESET_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = LOOP_RESET_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 21'b000000000000000000100;
        if ( main_C_1_tr0 ) begin
          state_var_NS = main_C_2;
        end
        else begin
          state_var_NS = LOOP_IN_C_0;
        end
      end
      LOOP_IN_C_0 : begin
        fsm_output = 21'b000000000000000001000;
        if ( LOOP_IN_C_0_tr0 ) begin
          state_var_NS = LOOP_OUT_C_0;
        end
        else if ( LOOP_IN_C_0_tr1 ) begin
          state_var_NS = LOOP_IN_C_1;
        end
        else begin
          state_var_NS = LOOP_HEIGHT_C_0;
        end
      end
      LOOP_HEIGHT_C_0 : begin
        fsm_output = 21'b000000000000000010000;
        if ( LOOP_HEIGHT_C_0_tr0 ) begin
          state_var_NS = LOOP_HEIGHT_C_1;
        end
        else begin
          state_var_NS = LOOP_WIDTH_C_0;
        end
      end
      LOOP_WIDTH_C_0 : begin
        fsm_output = 21'b000000000000000100000;
        if ( LOOP_WIDTH_C_0_tr0 ) begin
          state_var_NS = LOOP_WIDTH_C_1;
        end
        else begin
          state_var_NS = LOOP_X_C_0;
        end
      end
      LOOP_X_C_0 : begin
        fsm_output = 21'b000000000000001000000;
        if ( LOOP_X_C_0_tr0 ) begin
          state_var_NS = LOOP_X_C_1;
        end
        else begin
          state_var_NS = LOOP_Y_C_0;
        end
      end
      LOOP_Y_C_0 : begin
        fsm_output = 21'b000000000000010000000;
        state_var_NS = LOOP_Y_C_1;
      end
      LOOP_Y_C_1 : begin
        fsm_output = 21'b000000000000100000000;
        state_var_NS = LOOP_Y_C_2;
      end
      LOOP_Y_C_2 : begin
        fsm_output = 21'b000000000001000000000;
        state_var_NS = LOOP_Y_C_3;
      end
      LOOP_Y_C_3 : begin
        fsm_output = 21'b000000000010000000000;
        state_var_NS = LOOP_Y_C_4;
      end
      LOOP_Y_C_4 : begin
        fsm_output = 21'b000000000100000000000;
        state_var_NS = LOOP_Y_C_5;
      end
      LOOP_Y_C_5 : begin
        fsm_output = 21'b000000001000000000000;
        state_var_NS = LOOP_Y_C_6;
      end
      LOOP_Y_C_6 : begin
        fsm_output = 21'b000000010000000000000;
        state_var_NS = LOOP_Y_C_7;
      end
      LOOP_Y_C_7 : begin
        fsm_output = 21'b000000100000000000000;
        if ( LOOP_Y_C_7_tr0 ) begin
          state_var_NS = LOOP_X_C_1;
        end
        else begin
          state_var_NS = LOOP_Y_C_0;
        end
      end
      LOOP_X_C_1 : begin
        fsm_output = 21'b000001000000000000000;
        if ( LOOP_X_C_1_tr0 ) begin
          state_var_NS = LOOP_WIDTH_C_1;
        end
        else begin
          state_var_NS = LOOP_X_C_0;
        end
      end
      LOOP_WIDTH_C_1 : begin
        fsm_output = 21'b000010000000000000000;
        if ( LOOP_WIDTH_C_1_tr0 ) begin
          state_var_NS = LOOP_HEIGHT_C_1;
        end
        else begin
          state_var_NS = LOOP_WIDTH_C_0;
        end
      end
      LOOP_HEIGHT_C_1 : begin
        fsm_output = 21'b000100000000000000000;
        if ( LOOP_HEIGHT_C_1_tr0 ) begin
          state_var_NS = LOOP_IN_C_1;
        end
        else begin
          state_var_NS = LOOP_HEIGHT_C_0;
        end
      end
      LOOP_IN_C_1 : begin
        fsm_output = 21'b001000000000000000000;
        state_var_NS = LOOP_IN_C_0;
      end
      LOOP_OUT_C_0 : begin
        fsm_output = 21'b010000000000000000000;
        if ( LOOP_OUT_C_0_tr0 ) begin
          state_var_NS = main_C_2;
        end
        else begin
          state_var_NS = LOOP_IN_C_0;
        end
      end
      main_C_2 : begin
        fsm_output = 21'b100000000000000000000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 21'b000000000000000000001;
        state_var_NS = LOOP_RESET_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= main_C_0;
    end
    else if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_tranconv2d_run_tran
// ------------------------------------------------------------------


module UNET_IP_tranconv2d_run_tran (
  clk, rst, arst_n, input_triosy_lz, output_triosy_lz, height_rsc_dat, height_triosy_lz,
      width_rsc_dat, width_triosy_lz, kernel_size_rsc_dat, kernel_size_triosy_lz,
      filter_offset_rsc_dat, filter_offset_triosy_lz, in_channels_rsc_dat, in_channels_triosy_lz,
      out_channels_rsc_dat, out_channels_triosy_lz, stride_rsc_dat, stride_triosy_lz,
      input_rsci_q_d, input_rsci_radr_d, output_rsci_d_d, output_rsci_q_d, output_rsci_radr_d,
      output_rsci_wadr_d, input_rsci_re_d_pff, output_rsci_re_d_pff, output_rsci_we_d_pff
);
  input clk;
  input rst;
  input arst_n;
  output input_triosy_lz;
  output output_triosy_lz;
  input [6:0] height_rsc_dat;
  output height_triosy_lz;
  input [6:0] width_rsc_dat;
  output width_triosy_lz;
  input [1:0] kernel_size_rsc_dat;
  output kernel_size_triosy_lz;
  input [19:0] filter_offset_rsc_dat;
  output filter_offset_triosy_lz;
  input [6:0] in_channels_rsc_dat;
  output in_channels_triosy_lz;
  input [6:0] out_channels_rsc_dat;
  output out_channels_triosy_lz;
  input [2:0] stride_rsc_dat;
  output stride_triosy_lz;
  input [11:0] input_rsci_q_d;
  output [14:0] input_rsci_radr_d;
  wire [15:0] nl_input_rsci_radr_d;
  output [11:0] output_rsci_d_d;
  input [11:0] output_rsci_q_d;
  output [14:0] output_rsci_radr_d;
  output [14:0] output_rsci_wadr_d;
  output input_rsci_re_d_pff;
  output output_rsci_re_d_pff;
  output output_rsci_we_d_pff;


  // Interconnect Declarations
  wire [6:0] height_rsci_idat;
  wire [6:0] width_rsci_idat;
  wire [1:0] kernel_size_rsci_idat;
  wire [19:0] filter_offset_rsci_idat;
  wire [6:0] in_channels_rsci_idat;
  wire [6:0] out_channels_rsci_idat;
  wire [2:0] stride_rsci_idat;
  wire [20:0] fsm_output;
  wire and_dcpl_18;
  wire or_dcpl_22;
  wire or_dcpl_27;
  reg exit_LOOP_Y_sva;
  wire exit_LOOP_OUT_sva_mx0;
  wire exit_LOOP_HEIGHT_sva_mx0;
  wire exit_LOOP_WIDTH_sva_mx0;
  reg LOOP_RESET_stage_0_2;
  reg LOOP_RESET_stage_0_1;
  reg LOOP_RESET_stage_0_3;
  wire [13:0] LOOP_Y_mul_4_sdt;
  wire [14:0] nl_LOOP_Y_mul_4_sdt;
  wire or_97_ssc;
  reg reg_exit_LOOP_RESET_sva_1_cse;
  reg reg_stride_triosy_obj_ld_cse;
  wire LOOP_Y_and_rgt;
  reg [13:0] LOOP_Y_acc_15_itm;
  wire [14:0] nl_LOOP_Y_acc_15_itm;
  reg [13:0] LOOP_Y_mul_1_itm;
  reg [6:0] out_width_io_read_width_rsc_cse_sva;
  reg [11:0] LOOP_Y_mul_4_itm_11_0;
  reg [4:0] LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0;
  wire [14:0] out_idx_14_0_sva_1;
  wire [15:0] nl_out_idx_14_0_sva_1;
  reg [19:0] out_idx_1_sva;
  reg [14:0] out_idx_14_0_sva;
  wire [4:0] LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm;
  wire [9:0] z_out;
  wire [9:0] z_out_1;
  wire [17:0] z_out_2;
  wire [3:0] z_out_3;
  wire [16:0] z_out_4;
  wire signed [19:0] nl_z_out_4;
  wire [14:0] z_out_5;
  wire [24:0] nl_z_out_5;
  reg [1:0] filter_size_io_read_kernel_size_rsc_cse_sva;
  reg [3:0] filter_size_3_0_sva;
  reg [2:0] out_height_io_read_stride_rsc_cse_sva;
  reg [6:0] out_height_io_read_height_rsc_cse_sva;
  reg [9:0] out_height_sva;
  reg [9:0] out_width_sva;
  reg [7:0] out_c_sva;
  reg [6:0] LOOP_OUT_io_read_out_channels_rsc_1_cse_sva;
  reg [7:0] in_c_sva;
  reg [6:0] LOOP_IN_io_read_in_channels_rsc_cse_sva;
  reg [6:0] i_sva;
  reg [6:0] j_sva;
  reg [1:0] x_sva;
  reg [1:0] y_sva;
  reg [16:0] LOOP_RESET_mul_1_itm_1;
  reg [9:0] LOOP_Y_acc_7_itm;
  wire [10:0] nl_LOOP_Y_acc_7_itm;
  reg [9:0] LOOP_Y_acc_13_itm;
  wire [10:0] nl_LOOP_Y_acc_13_itm;
  reg [14:0] LOOP_Y_acc_14_itm;
  wire [15:0] nl_LOOP_Y_acc_14_itm;
  reg [14:0] LOOP_Y_mul_10_itm;
  wire [16:0] nl_LOOP_Y_mul_10_itm;
  reg [10:0] LOOP_Y_acc_17_itm;
  wire [11:0] nl_LOOP_Y_acc_17_itm;
  reg [17:0] LOOP_Y_acc_18_itm;
  wire [18:0] nl_LOOP_Y_acc_18_itm;
  wire [19:0] out_idx_1_sva_mx1;
  wire LOOP_RESET_stage_0_1_mx0w1;
  wire [7:0] out_c_sva_2;
  wire [8:0] nl_out_c_sva_2;
  wire [6:0] i_sva_2;
  wire [7:0] nl_i_sva_2;
  wire [6:0] j_sva_2;
  wire [7:0] nl_j_sva_2;
  wire [1:0] x_sva_2;
  wire [2:0] nl_x_sva_2;
  wire [1:0] y_sva_2;
  wire [2:0] nl_y_sva_2;
  reg [1:0] LOOP_Y_mul_4_itm_13_12;
  wire out_c_or_cse;
  wire [2:0] out_width_mux_3_cse;
  wire LOOP_Y_nor_cse;
  wire LOOP_RESET_acc_2_itm_27_1;
  wire LOOP_X_acc_2_itm_2_1;
  wire LOOP_IN_acc_2_itm_8_1;

  wire LOOP_RESET_mux1h_6_nl;
  wire or_63_nl;
  wire[7:0] LOOP_IN_acc_1_nl;
  wire[8:0] nl_LOOP_IN_acc_1_nl;
  wire not_69_nl;
  wire[2:0] LOOP_Y_acc_19_nl;
  wire[3:0] nl_LOOP_Y_acc_19_nl;
  wire not_71_nl;
  wire[3:0] LOOP_Y_acc_16_nl;
  wire[4:0] nl_LOOP_Y_acc_16_nl;
  wire[14:0] LOOP_Y_mul_11_nl;
  wire[19:0] nl_LOOP_Y_mul_11_nl;
  wire[19:0] LOOP_RESET_acc_1_nl;
  wire[20:0] nl_LOOP_RESET_acc_1_nl;
  wire or_24_nl;
  wire[27:0] LOOP_RESET_acc_2_nl;
  wire[28:0] nl_LOOP_RESET_acc_2_nl;
  wire[26:0] LOOP_RESET_mul_nl;
  wire[2:0] LOOP_X_acc_2_nl;
  wire[3:0] nl_LOOP_X_acc_2_nl;
  wire[7:0] LOOP_OUT_acc_2_nl;
  wire[8:0] nl_LOOP_OUT_acc_2_nl;
  wire[8:0] LOOP_OUT_acc_3_nl;
  wire[9:0] nl_LOOP_OUT_acc_3_nl;
  wire[7:0] LOOP_HEIGHT_acc_2_nl;
  wire[8:0] nl_LOOP_HEIGHT_acc_2_nl;
  wire[7:0] LOOP_HEIGHT_acc_3_nl;
  wire[8:0] nl_LOOP_HEIGHT_acc_3_nl;
  wire[7:0] LOOP_WIDTH_acc_2_nl;
  wire[8:0] nl_LOOP_WIDTH_acc_2_nl;
  wire[7:0] LOOP_WIDTH_acc_3_nl;
  wire[8:0] nl_LOOP_WIDTH_acc_3_nl;
  wire[8:0] LOOP_IN_acc_2_nl;
  wire[9:0] nl_LOOP_IN_acc_2_nl;
  wire[11:0] LOOP_Y_LOOP_Y_acc_3_nl;
  wire[12:0] nl_LOOP_Y_LOOP_Y_acc_3_nl;
  wire[6:0] out_width_mux_4_nl;
  wire[6:0] out_height_mux_5_nl;
  wire[1:0] LOOP_Y_LOOP_Y_and_5_nl;
  wire[4:0] LOOP_Y_LOOP_Y_and_6_nl;
  wire[6:0] LOOP_Y_mux_10_nl;
  wire[1:0] filter_size_mux_4_nl;
  wire[1:0] filter_size_mux_5_nl;
  wire LOOP_RESET_LOOP_RESET_and_6_nl;
  wire[6:0] LOOP_RESET_mux_11_nl;
  wire[1:0] LOOP_RESET_LOOP_RESET_and_7_nl;
  wire[9:0] LOOP_RESET_mux_12_nl;
  wire[2:0] LOOP_Y_LOOP_Y_and_7_nl;
  wire[6:0] LOOP_Y_mux1h_2_nl;
  wire LOOP_Y_or_3_nl;
  wire LOOP_Y_LOOP_Y_and_8_nl;
  wire[6:0] LOOP_Y_LOOP_Y_and_9_nl;
  wire[6:0] LOOP_Y_mux_11_nl;
  wire LOOP_Y_nor_3_nl;
  wire[6:0] LOOP_Y_mux1h_3_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [19:0] nl_LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr;
  assign nl_LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr = conv_u2u_18_19(LOOP_Y_acc_18_itm)
      + (filter_offset_rsci_idat[18:0]);
  wire  nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_RESET_C_0_tr0;
  assign nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_RESET_C_0_tr0 = ~(LOOP_RESET_stage_0_3
      | LOOP_RESET_stage_0_1 | LOOP_RESET_stage_0_2);
  wire  nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr0;
  assign nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr0 = ~ LOOP_IN_acc_2_itm_8_1;
  wire  nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr1;
  assign nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr1 = exit_LOOP_HEIGHT_sva_mx0
      & LOOP_IN_acc_2_itm_8_1;
  wire  nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_WIDTH_C_0_tr0;
  assign nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_WIDTH_C_0_tr0 = ~
      LOOP_X_acc_2_itm_2_1;
  wire  nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_0_tr0;
  assign nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_0_tr0 = ~ LOOP_RESET_stage_0_3;
  wire[2:0] LOOP_X_acc_3_nl;
  wire[3:0] nl_LOOP_X_acc_3_nl;
  wire  nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_1_tr0;
  assign nl_LOOP_X_acc_3_nl = ({1'b1 , x_sva_2}) + conv_u2u_2_3(~ filter_size_io_read_kernel_size_rsc_cse_sva)
      + 3'b001;
  assign LOOP_X_acc_3_nl = nl_LOOP_X_acc_3_nl[2:0];
  assign nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_1_tr0 = ~ (readslicef_3_1_2(LOOP_X_acc_3_nl));
  ccs_in_v1 #(.rscid(32'sd3),
  .width(32'sd7)) height_rsci (
      .dat(height_rsc_dat),
      .idat(height_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd4),
  .width(32'sd7)) width_rsci (
      .dat(width_rsc_dat),
      .idat(width_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd5),
  .width(32'sd2)) kernel_size_rsci (
      .dat(kernel_size_rsc_dat),
      .idat(kernel_size_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd6),
  .width(32'sd20)) filter_offset_rsci (
      .dat(filter_offset_rsc_dat),
      .idat(filter_offset_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd7),
  .width(32'sd7)) in_channels_rsci (
      .dat(in_channels_rsc_dat),
      .idat(in_channels_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd8),
  .width(32'sd7)) out_channels_rsci (
      .dat(out_channels_rsc_dat),
      .idat(out_channels_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd9),
  .width(32'sd3)) stride_rsci (
      .dat(stride_rsc_dat),
      .idat(stride_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) input_triosy_obj (
      .ld(reg_stride_triosy_obj_ld_cse),
      .lz(input_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) output_triosy_obj (
      .ld(reg_stride_triosy_obj_ld_cse),
      .lz(output_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) height_triosy_obj (
      .ld(reg_stride_triosy_obj_ld_cse),
      .lz(height_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) width_triosy_obj (
      .ld(reg_stride_triosy_obj_ld_cse),
      .lz(width_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) kernel_size_triosy_obj (
      .ld(reg_stride_triosy_obj_ld_cse),
      .lz(kernel_size_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) filter_offset_triosy_obj (
      .ld(reg_stride_triosy_obj_ld_cse),
      .lz(filter_offset_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) in_channels_triosy_obj (
      .ld(reg_stride_triosy_obj_ld_cse),
      .lz(in_channels_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) out_channels_triosy_obj (
      .ld(reg_stride_triosy_obj_ld_cse),
      .lz(out_channels_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) stride_triosy_obj (
      .ld(reg_stride_triosy_obj_ld_cse),
      .lz(stride_triosy_lz)
    );
  UNET_IP_tranconv2dmgc_rom_11_485120_5_1  LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg
      (
      .addr(nl_LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr[18:0]),
      .data_out(LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm)
    );
  UNET_IP_tranconv2d_run_tran_run_tran_fsm UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .fsm_output(fsm_output),
      .LOOP_RESET_C_0_tr0(nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_RESET_C_0_tr0),
      .main_C_1_tr0(exit_LOOP_OUT_sva_mx0),
      .LOOP_IN_C_0_tr0(nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr0),
      .LOOP_IN_C_0_tr1(nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr1),
      .LOOP_HEIGHT_C_0_tr0(exit_LOOP_WIDTH_sva_mx0),
      .LOOP_WIDTH_C_0_tr0(nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_WIDTH_C_0_tr0),
      .LOOP_X_C_0_tr0(nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_0_tr0),
      .LOOP_Y_C_7_tr0(exit_LOOP_Y_sva),
      .LOOP_X_C_1_tr0(nl_UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_1_tr0),
      .LOOP_WIDTH_C_1_tr0(exit_LOOP_WIDTH_sva_mx0),
      .LOOP_HEIGHT_C_1_tr0(exit_LOOP_HEIGHT_sva_mx0),
      .LOOP_OUT_C_0_tr0(exit_LOOP_OUT_sva_mx0)
    );
  assign out_c_or_cse = (fsm_output[2]) | (fsm_output[19]);
  assign nl_LOOP_Y_mul_4_sdt = out_c_sva * LOOP_IN_io_read_in_channels_rsc_cse_sva;
  assign LOOP_Y_mul_4_sdt = nl_LOOP_Y_mul_4_sdt[13:0];
  assign or_97_ssc = (fsm_output[12:11]!=2'b00);
  assign LOOP_Y_and_rgt = (~ (fsm_output[12])) & or_97_ssc;
  assign nl_LOOP_RESET_acc_1_nl = out_idx_1_sva + 20'b00000000000000000001;
  assign LOOP_RESET_acc_1_nl = nl_LOOP_RESET_acc_1_nl[19:0];
  assign or_24_nl = (~ LOOP_RESET_stage_0_3) | reg_exit_LOOP_RESET_sva_1_cse;
  assign out_idx_1_sva_mx1 = MUX_v_20_2_2(LOOP_RESET_acc_1_nl, out_idx_1_sva, or_24_nl);
  assign LOOP_RESET_mul_nl = LOOP_RESET_mul_1_itm_1 * out_width_sva;
  assign nl_LOOP_RESET_acc_2_nl = ({8'b10000000 , out_idx_1_sva_mx1}) + conv_u2u_27_28(~
      LOOP_RESET_mul_nl) + 28'b0000000000000000000000000001;
  assign LOOP_RESET_acc_2_nl = nl_LOOP_RESET_acc_2_nl[27:0];
  assign LOOP_RESET_acc_2_itm_27_1 = readslicef_28_1_27(LOOP_RESET_acc_2_nl);
  assign LOOP_RESET_stage_0_1_mx0w1 = (LOOP_RESET_acc_2_itm_27_1 | (~ LOOP_RESET_stage_0_2))
      & LOOP_RESET_stage_0_1;
  assign nl_LOOP_X_acc_2_nl = ({1'b1 , (~ filter_size_io_read_kernel_size_rsc_cse_sva)})
      + 3'b001;
  assign LOOP_X_acc_2_nl = nl_LOOP_X_acc_2_nl[2:0];
  assign LOOP_X_acc_2_itm_2_1 = readslicef_3_1_2(LOOP_X_acc_2_nl);
  assign nl_out_idx_14_0_sva_1 = LOOP_Y_acc_14_itm + z_out_5;
  assign out_idx_14_0_sva_1 = nl_out_idx_14_0_sva_1[14:0];
  assign nl_LOOP_OUT_acc_2_nl = ({1'b1 , (~ LOOP_OUT_io_read_out_channels_rsc_1_cse_sva)})
      + 8'b00000001;
  assign LOOP_OUT_acc_2_nl = nl_LOOP_OUT_acc_2_nl[7:0];
  assign nl_LOOP_OUT_acc_3_nl = ({1'b1 , out_c_sva_2}) + conv_u2u_8_9({1'b1 , (~
      LOOP_OUT_io_read_out_channels_rsc_1_cse_sva)}) + 9'b000000001;
  assign LOOP_OUT_acc_3_nl = nl_LOOP_OUT_acc_3_nl[8:0];
  assign exit_LOOP_OUT_sva_mx0 = MUX_s_1_2_2((~ (readslicef_8_1_7(LOOP_OUT_acc_2_nl))),
      (~ (readslicef_9_1_8(LOOP_OUT_acc_3_nl))), fsm_output[19]);
  assign nl_out_c_sva_2 = conv_u2u_7_8(out_c_sva[6:0]) + 8'b00000001;
  assign out_c_sva_2 = nl_out_c_sva_2[7:0];
  assign nl_LOOP_HEIGHT_acc_2_nl = ({1'b1 , (~ out_height_io_read_height_rsc_cse_sva)})
      + 8'b00000001;
  assign LOOP_HEIGHT_acc_2_nl = nl_LOOP_HEIGHT_acc_2_nl[7:0];
  assign nl_LOOP_HEIGHT_acc_3_nl = ({1'b1 , i_sva_2}) + conv_u2u_7_8(~ out_height_io_read_height_rsc_cse_sva)
      + 8'b00000001;
  assign LOOP_HEIGHT_acc_3_nl = nl_LOOP_HEIGHT_acc_3_nl[7:0];
  assign exit_LOOP_HEIGHT_sva_mx0 = MUX_s_1_2_2((~ (readslicef_8_1_7(LOOP_HEIGHT_acc_2_nl))),
      (~ (readslicef_8_1_7(LOOP_HEIGHT_acc_3_nl))), fsm_output[17]);
  assign nl_i_sva_2 = i_sva + 7'b0000001;
  assign i_sva_2 = nl_i_sva_2[6:0];
  assign nl_LOOP_WIDTH_acc_2_nl = ({1'b1 , (~ out_width_io_read_width_rsc_cse_sva)})
      + 8'b00000001;
  assign LOOP_WIDTH_acc_2_nl = nl_LOOP_WIDTH_acc_2_nl[7:0];
  assign nl_LOOP_WIDTH_acc_3_nl = ({1'b1 , j_sva_2}) + conv_u2u_7_8(~ out_width_io_read_width_rsc_cse_sva)
      + 8'b00000001;
  assign LOOP_WIDTH_acc_3_nl = nl_LOOP_WIDTH_acc_3_nl[7:0];
  assign exit_LOOP_WIDTH_sva_mx0 = MUX_s_1_2_2((~ (readslicef_8_1_7(LOOP_WIDTH_acc_2_nl))),
      (~ (readslicef_8_1_7(LOOP_WIDTH_acc_3_nl))), fsm_output[16]);
  assign nl_j_sva_2 = j_sva + 7'b0000001;
  assign j_sva_2 = nl_j_sva_2[6:0];
  assign nl_x_sva_2 = x_sva + 2'b01;
  assign x_sva_2 = nl_x_sva_2[1:0];
  assign nl_y_sva_2 = y_sva + 2'b01;
  assign y_sva_2 = nl_y_sva_2[1:0];
  assign and_dcpl_18 = ~((fsm_output[0]) | (fsm_output[20]));
  assign or_dcpl_22 = (fsm_output[11:10]!=2'b00);
  assign or_dcpl_27 = (fsm_output[14:13]!=2'b00);
  assign nl_LOOP_IN_acc_2_nl = ({1'b1 , in_c_sva}) + conv_u2u_8_9({1'b1 , (~ in_channels_rsci_idat)})
      + 9'b000000001;
  assign LOOP_IN_acc_2_nl = nl_LOOP_IN_acc_2_nl[8:0];
  assign LOOP_IN_acc_2_itm_8_1 = readslicef_9_1_8(LOOP_IN_acc_2_nl);
  assign nl_input_rsci_radr_d = conv_u2u_14_15(LOOP_Y_acc_15_itm) + z_out_5;
  assign input_rsci_radr_d = nl_input_rsci_radr_d[14:0];
  assign input_rsci_re_d_pff = fsm_output[11];
  assign nl_LOOP_Y_LOOP_Y_acc_3_nl = LOOP_Y_mul_4_itm_11_0 + ({(LOOP_RESET_mul_1_itm_1[15:9])
      , LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0});
  assign LOOP_Y_LOOP_Y_acc_3_nl = nl_LOOP_Y_LOOP_Y_acc_3_nl[11:0];
  assign output_rsci_d_d = MUX_v_12_2_2(12'b000000000000, LOOP_Y_LOOP_Y_acc_3_nl,
      (fsm_output[13]));
  assign output_rsci_radr_d = out_idx_14_0_sva_1;
  assign output_rsci_re_d_pff = fsm_output[10];
  assign output_rsci_wadr_d = MUX_v_15_2_2((out_idx_1_sva[14:0]), out_idx_14_0_sva,
      fsm_output[13]);
  assign output_rsci_we_d_pff = (fsm_output[13]) | (LOOP_RESET_stage_0_3 & (~ reg_exit_LOOP_RESET_sva_1_cse)
      & (fsm_output[1]));
  assign out_width_mux_3_cse = MUX_v_3_2_2(stride_rsci_idat, out_height_io_read_stride_rsc_cse_sva,
      fsm_output[7]);
  assign LOOP_Y_nor_cse = ~((fsm_output[8]) | (fsm_output[9]) | (fsm_output[11]));
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      out_idx_1_sva <= 20'b00000000000000000000;
      reg_exit_LOOP_RESET_sva_1_cse <= 1'b0;
      LOOP_RESET_stage_0_1 <= 1'b0;
      LOOP_RESET_mul_1_itm_1 <= 17'b00000000000000000;
      LOOP_RESET_stage_0_2 <= 1'b0;
      LOOP_RESET_stage_0_3 <= 1'b0;
      reg_stride_triosy_obj_ld_cse <= 1'b0;
      LOOP_Y_mul_4_itm_13_12 <= 2'b00;
      LOOP_Y_acc_17_itm <= 11'b00000000000;
      LOOP_Y_acc_18_itm <= 18'b000000000000000000;
      LOOP_Y_acc_14_itm <= 15'b000000000000000;
    end
    else if ( rst ) begin
      out_idx_1_sva <= 20'b00000000000000000000;
      reg_exit_LOOP_RESET_sva_1_cse <= 1'b0;
      LOOP_RESET_stage_0_1 <= 1'b0;
      LOOP_RESET_mul_1_itm_1 <= 17'b00000000000000000;
      LOOP_RESET_stage_0_2 <= 1'b0;
      LOOP_RESET_stage_0_3 <= 1'b0;
      reg_stride_triosy_obj_ld_cse <= 1'b0;
      LOOP_Y_mul_4_itm_13_12 <= 2'b00;
      LOOP_Y_acc_17_itm <= 11'b00000000000;
      LOOP_Y_acc_18_itm <= 18'b000000000000000000;
      LOOP_Y_acc_14_itm <= 15'b000000000000000;
    end
    else begin
      out_idx_1_sva <= MUX_v_20_2_2(20'b00000000000000000000, out_idx_1_sva_mx1,
          (fsm_output[1]));
      reg_exit_LOOP_RESET_sva_1_cse <= ~ LOOP_RESET_acc_2_itm_27_1;
      LOOP_RESET_stage_0_1 <= LOOP_RESET_stage_0_1_mx0w1 | (~ (fsm_output[1]));
      LOOP_RESET_mul_1_itm_1 <= z_out_4;
      LOOP_RESET_stage_0_2 <= LOOP_RESET_stage_0_1_mx0w1 & (fsm_output[1]);
      LOOP_RESET_stage_0_3 <= LOOP_RESET_mux1h_6_nl & (~((fsm_output[0]) | (fsm_output[20])
          | (fsm_output[16]) | (fsm_output[17]) | (fsm_output[4]) | (fsm_output[18])
          | (fsm_output[19]) | (fsm_output[2]) | (fsm_output[3])));
      reg_stride_triosy_obj_ld_cse <= exit_LOOP_OUT_sva_mx0 & out_c_or_cse;
      LOOP_Y_mul_4_itm_13_12 <= LOOP_Y_mul_4_sdt[13:12];
      LOOP_Y_acc_17_itm <= nl_LOOP_Y_acc_17_itm[10:0];
      LOOP_Y_acc_18_itm <= nl_LOOP_Y_acc_18_itm[17:0];
      LOOP_Y_acc_14_itm <= nl_LOOP_Y_acc_14_itm[14:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      out_height_io_read_height_rsc_cse_sva <= 7'b0000000;
    end
    else if ( rst ) begin
      out_height_io_read_height_rsc_cse_sva <= 7'b0000000;
    end
    else if ( ~ and_dcpl_18 ) begin
      out_height_io_read_height_rsc_cse_sva <= height_rsci_idat;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      out_width_io_read_width_rsc_cse_sva <= 7'b0000000;
    end
    else if ( rst ) begin
      out_width_io_read_width_rsc_cse_sva <= 7'b0000000;
    end
    else if ( ~ and_dcpl_18 ) begin
      out_width_io_read_width_rsc_cse_sva <= width_rsci_idat;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      filter_size_io_read_kernel_size_rsc_cse_sva <= 2'b00;
    end
    else if ( rst ) begin
      filter_size_io_read_kernel_size_rsc_cse_sva <= 2'b00;
    end
    else if ( ~ and_dcpl_18 ) begin
      filter_size_io_read_kernel_size_rsc_cse_sva <= kernel_size_rsci_idat;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      out_width_sva <= 10'b0000000000;
    end
    else if ( rst ) begin
      out_width_sva <= 10'b0000000000;
    end
    else if ( ~ and_dcpl_18 ) begin
      out_width_sva <= z_out;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      filter_size_3_0_sva <= 4'b0000;
    end
    else if ( rst ) begin
      filter_size_3_0_sva <= 4'b0000;
    end
    else if ( ~ and_dcpl_18 ) begin
      filter_size_3_0_sva <= z_out_3;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      out_height_sva <= 10'b0000000000;
    end
    else if ( rst ) begin
      out_height_sva <= 10'b0000000000;
    end
    else if ( ~ and_dcpl_18 ) begin
      out_height_sva <= z_out_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      out_height_io_read_stride_rsc_cse_sva <= 3'b000;
    end
    else if ( rst ) begin
      out_height_io_read_stride_rsc_cse_sva <= 3'b000;
    end
    else if ( ~ and_dcpl_18 ) begin
      out_height_io_read_stride_rsc_cse_sva <= stride_rsci_idat;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_io_read_out_channels_rsc_1_cse_sva <= 7'b0000000;
    end
    else if ( rst ) begin
      LOOP_OUT_io_read_out_channels_rsc_1_cse_sva <= 7'b0000000;
    end
    else if ( ~(and_dcpl_18 & (~ (fsm_output[1]))) ) begin
      LOOP_OUT_io_read_out_channels_rsc_1_cse_sva <= out_channels_rsci_idat;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      out_c_sva <= 8'b00000000;
    end
    else if ( rst ) begin
      out_c_sva <= 8'b00000000;
    end
    else if ( out_c_or_cse ) begin
      out_c_sva <= MUX_v_8_2_2(8'b00000000, out_c_sva_2, (fsm_output[19]));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      in_c_sva <= 8'b00000000;
    end
    else if ( rst ) begin
      in_c_sva <= 8'b00000000;
    end
    else if ( (~(and_dcpl_18 & (~((fsm_output[19]) | (fsm_output[2]))) & (~ (fsm_output[1]))))
        | (fsm_output[18]) ) begin
      in_c_sva <= MUX_v_8_2_2(8'b00000000, LOOP_IN_acc_1_nl, not_69_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_IN_io_read_in_channels_rsc_cse_sva <= 7'b0000000;
    end
    else if ( rst ) begin
      LOOP_IN_io_read_in_channels_rsc_cse_sva <= 7'b0000000;
    end
    else if ( ~(and_dcpl_18 & (~((fsm_output[19:18]!=2'b00))) & (~((fsm_output[3:1]!=3'b000))))
        ) begin
      LOOP_IN_io_read_in_channels_rsc_cse_sva <= in_channels_rsci_idat;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      i_sva <= 7'b0000000;
    end
    else if ( rst ) begin
      i_sva <= 7'b0000000;
    end
    else if ( (fsm_output[17]) | (fsm_output[3]) ) begin
      i_sva <= MUX_v_7_2_2(7'b0000000, i_sva_2, (fsm_output[17]));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      j_sva <= 7'b0000000;
    end
    else if ( rst ) begin
      j_sva <= 7'b0000000;
    end
    else if ( (fsm_output[16]) | (fsm_output[4]) ) begin
      j_sva <= MUX_v_7_2_2(7'b0000000, j_sva_2, (fsm_output[16]));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      x_sva <= 2'b00;
    end
    else if ( rst ) begin
      x_sva <= 2'b00;
    end
    else if ( (fsm_output[15]) | (fsm_output[5]) ) begin
      x_sva <= MUX_v_2_2_2(2'b00, x_sva_2, (fsm_output[15]));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      exit_LOOP_Y_sva <= 1'b0;
    end
    else if ( rst ) begin
      exit_LOOP_Y_sva <= 1'b0;
    end
    else if ( fsm_output[7] ) begin
      exit_LOOP_Y_sva <= ~ (readslicef_3_1_2(LOOP_Y_acc_19_nl));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      y_sva <= 2'b00;
    end
    else if ( rst ) begin
      y_sva <= 2'b00;
    end
    else if ( ~(or_dcpl_27 | (fsm_output[12:8]!=5'b00000)) ) begin
      y_sva <= MUX_v_2_2_2(2'b00, y_sva_2, not_71_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_Y_mul_10_itm <= 15'b000000000000000;
    end
    else if ( rst ) begin
      LOOP_Y_mul_10_itm <= 15'b000000000000000;
    end
    else if ( fsm_output[7] ) begin
      LOOP_Y_mul_10_itm <= nl_LOOP_Y_mul_10_itm[14:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_Y_acc_7_itm <= 10'b0000000000;
    end
    else if ( rst ) begin
      LOOP_Y_acc_7_itm <= 10'b0000000000;
    end
    else if ( fsm_output[7] ) begin
      LOOP_Y_acc_7_itm <= nl_LOOP_Y_acc_7_itm[9:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_Y_acc_13_itm <= 10'b0000000000;
    end
    else if ( rst ) begin
      LOOP_Y_acc_13_itm <= 10'b0000000000;
    end
    else if ( fsm_output[7] ) begin
      LOOP_Y_acc_13_itm <= nl_LOOP_Y_acc_13_itm[9:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_Y_mul_4_itm_11_0 <= 12'b000000000000;
    end
    else if ( rst ) begin
      LOOP_Y_mul_4_itm_11_0 <= 12'b000000000000;
    end
    else if ( (~ or_97_ssc) | LOOP_Y_and_rgt ) begin
      LOOP_Y_mul_4_itm_11_0 <= MUX_v_12_2_2((LOOP_Y_mul_4_sdt[11:0]), output_rsci_q_d,
          LOOP_Y_and_rgt);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_Y_mul_1_itm <= 14'b00000000000000;
    end
    else if ( rst ) begin
      LOOP_Y_mul_1_itm <= 14'b00000000000000;
    end
    else if ( fsm_output[8] ) begin
      LOOP_Y_mul_1_itm <= z_out_5[13:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_Y_acc_15_itm <= 14'b00000000000000;
    end
    else if ( rst ) begin
      LOOP_Y_acc_15_itm <= 14'b00000000000000;
    end
    else if ( fsm_output[9] ) begin
      LOOP_Y_acc_15_itm <= nl_LOOP_Y_acc_15_itm[13:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0 <= 5'b00000;
    end
    else if ( rst ) begin
      LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0 <= 5'b00000;
    end
    else if ( ~ or_dcpl_22 ) begin
      LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0 <= MUX_v_5_2_2(LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm,
          (z_out_4[8:4]), fsm_output[12]);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      out_idx_14_0_sva <= 15'b000000000000000;
    end
    else if ( rst ) begin
      out_idx_14_0_sva <= 15'b000000000000000;
    end
    else if ( fsm_output[10] ) begin
      out_idx_14_0_sva <= out_idx_14_0_sva_1;
    end
  end
  assign or_63_nl = or_dcpl_27 | (fsm_output[12]) | (fsm_output[9]) | (fsm_output[8])
      | (fsm_output[7]) | (fsm_output[6]) | (fsm_output[15]) | or_dcpl_22;
  assign LOOP_RESET_mux1h_6_nl = MUX1HOT_s_1_3_2(LOOP_RESET_stage_0_2, LOOP_X_acc_2_itm_2_1,
      LOOP_RESET_stage_0_3, {(fsm_output[1]) , (fsm_output[5]) , or_63_nl});
  assign nl_LOOP_Y_acc_16_nl = z_out_3 + conv_u2u_2_4(y_sva);
  assign LOOP_Y_acc_16_nl = nl_LOOP_Y_acc_16_nl[3:0];
  assign nl_LOOP_Y_acc_17_itm  = (z_out_2[10:0]) + conv_u2u_4_11(LOOP_Y_acc_16_nl);
  assign nl_LOOP_Y_acc_18_itm  = z_out_2 + conv_u2u_11_18(LOOP_Y_acc_17_itm);
  assign nl_LOOP_Y_mul_11_nl = LOOP_Y_acc_7_itm * out_width_sva;
  assign LOOP_Y_mul_11_nl = nl_LOOP_Y_mul_11_nl[14:0];
  assign nl_LOOP_Y_acc_14_itm  = LOOP_Y_mul_11_nl + conv_u2u_10_15(LOOP_Y_acc_13_itm);
  assign nl_LOOP_IN_acc_1_nl = conv_u2u_7_8(in_c_sva[6:0]) + 8'b00000001;
  assign LOOP_IN_acc_1_nl = nl_LOOP_IN_acc_1_nl[7:0];
  assign not_69_nl = ~ out_c_or_cse;
  assign nl_LOOP_Y_acc_19_nl = ({1'b1 , y_sva_2}) + conv_u2u_2_3(~ filter_size_io_read_kernel_size_rsc_cse_sva)
      + 3'b001;
  assign LOOP_Y_acc_19_nl = nl_LOOP_Y_acc_19_nl[2:0];
  assign not_71_nl = ~ (fsm_output[6]);
  assign nl_LOOP_Y_mul_10_itm  = (out_c_sva[6:0]) * out_height_sva;
  assign nl_LOOP_Y_acc_7_itm  = z_out + conv_u2u_2_10(x_sva);
  assign nl_LOOP_Y_acc_13_itm  = z_out_1 + conv_u2u_2_10(y_sva);
  assign nl_LOOP_Y_acc_15_itm  = (z_out_5[13:0]) + conv_u2u_7_14(j_sva);
  assign out_width_mux_4_nl = MUX_v_7_2_2(width_rsci_idat, i_sva, fsm_output[7]);
  assign z_out = out_width_mux_3_cse * out_width_mux_4_nl;
  assign out_height_mux_5_nl = MUX_v_7_2_2(height_rsci_idat, j_sva, fsm_output[7]);
  assign z_out_1 = out_width_mux_3_cse * out_height_mux_5_nl;
  assign LOOP_Y_LOOP_Y_and_5_nl = MUX_v_2_2_2(2'b00, LOOP_Y_mul_4_itm_13_12, (fsm_output[8]));
  assign LOOP_Y_LOOP_Y_and_6_nl = MUX_v_5_2_2(5'b00000, (LOOP_Y_mul_4_itm_11_0[11:7]),
      (fsm_output[8]));
  assign LOOP_Y_mux_10_nl = MUX_v_7_2_2((in_c_sva[6:0]), (LOOP_Y_mul_4_itm_11_0[6:0]),
      fsm_output[8]);
  assign z_out_2 = filter_size_3_0_sva * ({LOOP_Y_LOOP_Y_and_5_nl , LOOP_Y_LOOP_Y_and_6_nl
      , LOOP_Y_mux_10_nl});
  assign filter_size_mux_4_nl = MUX_v_2_2_2(kernel_size_rsci_idat, x_sva, fsm_output[7]);
  assign filter_size_mux_5_nl = MUX_v_2_2_2(kernel_size_rsci_idat, filter_size_io_read_kernel_size_rsc_cse_sva,
      fsm_output[7]);
  assign z_out_3 = filter_size_mux_4_nl * filter_size_mux_5_nl;
  assign LOOP_RESET_LOOP_RESET_and_6_nl = (LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0[4])
      & (fsm_output[12]);
  assign LOOP_RESET_mux_11_nl = MUX_v_7_2_2(out_channels_rsci_idat, ({{2{LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0[4]}},
      LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0}), fsm_output[12]);
  assign LOOP_RESET_LOOP_RESET_and_7_nl = MUX_v_2_2_2(2'b00, (input_rsci_q_d[11:10]),
      (fsm_output[12]));
  assign LOOP_RESET_mux_12_nl = MUX_v_10_2_2(out_height_sva, (input_rsci_q_d[9:0]),
      fsm_output[12]);
  assign nl_z_out_4 = $signed(({LOOP_RESET_LOOP_RESET_and_6_nl , LOOP_RESET_mux_11_nl}))
      * $signed(({LOOP_RESET_LOOP_RESET_and_7_nl , LOOP_RESET_mux_12_nl}));
  assign z_out_4 = nl_z_out_4[16:0];
  assign LOOP_Y_LOOP_Y_and_7_nl = MUX_v_3_2_2(3'b000, (out_width_sva[9:7]), LOOP_Y_nor_cse);
  assign LOOP_Y_or_3_nl = (fsm_output[9]) | (fsm_output[11]);
  assign LOOP_Y_mux1h_2_nl = MUX1HOT_v_7_3_2(out_height_io_read_height_rsc_cse_sva,
      out_width_io_read_width_rsc_cse_sva, (out_width_sva[6:0]), {(fsm_output[8])
      , LOOP_Y_or_3_nl , (fsm_output[10])});
  assign LOOP_Y_LOOP_Y_and_8_nl = (LOOP_Y_mul_10_itm[14]) & LOOP_Y_nor_cse;
  assign LOOP_Y_mux_11_nl = MUX_v_7_2_2((LOOP_Y_mul_10_itm[13:7]), (LOOP_Y_mul_1_itm[13:7]),
      fsm_output[11]);
  assign LOOP_Y_nor_3_nl = ~((fsm_output[9:8]!=2'b00));
  assign LOOP_Y_LOOP_Y_and_9_nl = MUX_v_7_2_2(7'b0000000, LOOP_Y_mux_11_nl, LOOP_Y_nor_3_nl);
  assign LOOP_Y_mux1h_3_nl = MUX1HOT_v_7_4_2((in_c_sva[6:0]), i_sva, (LOOP_Y_mul_10_itm[6:0]),
      (LOOP_Y_mul_1_itm[6:0]), {(fsm_output[8]) , (fsm_output[9]) , (fsm_output[10])
      , (fsm_output[11])});
  assign nl_z_out_5 = ({LOOP_Y_LOOP_Y_and_7_nl , LOOP_Y_mux1h_2_nl}) * ({LOOP_Y_LOOP_Y_and_8_nl
      , LOOP_Y_LOOP_Y_and_9_nl , LOOP_Y_mux1h_3_nl});
  assign z_out_5 = nl_z_out_5[14:0];

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_3_2;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [2:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    MUX1HOT_v_7_3_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_4_2;
    input [6:0] input_3;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [3:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    result = result | (input_3 & {7{sel[3]}});
    MUX1HOT_v_7_4_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input  sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input  sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [14:0] MUX_v_15_2_2;
    input [14:0] input_0;
    input [14:0] input_1;
    input  sel;
    reg [14:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_15_2_2 = result;
  end
  endfunction


  function automatic [19:0] MUX_v_20_2_2;
    input [19:0] input_0;
    input [19:0] input_1;
    input  sel;
    reg [19:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_20_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input  sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input  sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_28_1_27;
    input [27:0] vector;
    reg [27:0] tmp;
  begin
    tmp = vector >> 27;
    readslicef_28_1_27 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_2_10 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_10 = {{8{1'b0}}, vector};
  end
  endfunction


  function automatic [10:0] conv_u2u_4_11 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_11 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_7_14 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_14 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_10_15 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_15 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [17:0] conv_u2u_11_18 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_18 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2u_14_15 = {1'b0, vector};
  end
  endfunction


  function automatic [18:0] conv_u2u_18_19 ;
    input [17:0]  vector ;
  begin
    conv_u2u_18_19 = {1'b0, vector};
  end
  endfunction


  function automatic [27:0] conv_u2u_27_28 ;
    input [26:0]  vector ;
  begin
    conv_u2u_27_28 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_tranconv2d
// ------------------------------------------------------------------


module UNET_IP_tranconv2d (
  clk, rst, arst_n, input_rsc_radr, input_rsc_re, input_rsc_q, input_triosy_lz, output_rsc_wadr,
      output_rsc_d, output_rsc_we, output_rsc_radr, output_rsc_re, output_rsc_q,
      output_triosy_lz, height_rsc_dat, height_triosy_lz, width_rsc_dat, width_triosy_lz,
      kernel_size_rsc_dat, kernel_size_triosy_lz, filter_offset_rsc_dat, filter_offset_triosy_lz,
      in_channels_rsc_dat, in_channels_triosy_lz, out_channels_rsc_dat, out_channels_triosy_lz,
      stride_rsc_dat, stride_triosy_lz
);
  input clk;
  input rst;
  input arst_n;
  output [14:0] input_rsc_radr;
  output input_rsc_re;
  input [11:0] input_rsc_q;
  output input_triosy_lz;
  output [14:0] output_rsc_wadr;
  output [11:0] output_rsc_d;
  output output_rsc_we;
  output [14:0] output_rsc_radr;
  output output_rsc_re;
  input [11:0] output_rsc_q;
  output output_triosy_lz;
  input [6:0] height_rsc_dat;
  output height_triosy_lz;
  input [6:0] width_rsc_dat;
  output width_triosy_lz;
  input [1:0] kernel_size_rsc_dat;
  output kernel_size_triosy_lz;
  input [19:0] filter_offset_rsc_dat;
  output filter_offset_triosy_lz;
  input [6:0] in_channels_rsc_dat;
  output in_channels_triosy_lz;
  input [6:0] out_channels_rsc_dat;
  output out_channels_triosy_lz;
  input [2:0] stride_rsc_dat;
  output stride_triosy_lz;


  // Interconnect Declarations
  wire [11:0] input_rsci_q_d;
  wire [14:0] input_rsci_radr_d;
  wire [11:0] output_rsci_d_d;
  wire [11:0] output_rsci_q_d;
  wire [14:0] output_rsci_radr_d;
  wire [14:0] output_rsci_wadr_d;
  wire input_rsci_re_d_iff;
  wire output_rsci_re_d_iff;
  wire output_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_1_15_12_32768_1_32768_12_1_gen
      input_rsci (
      .q(input_rsc_q),
      .re(input_rsc_re),
      .radr(input_rsc_radr),
      .q_d(input_rsci_q_d),
      .radr_d(input_rsci_radr_d),
      .re_d(input_rsci_re_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(input_rsci_re_d_iff)
    );
  UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_2_15_12_32768_1_32768_12_1_gen
      output_rsci (
      .q(output_rsc_q),
      .re(output_rsc_re),
      .radr(output_rsc_radr),
      .we(output_rsc_we),
      .d(output_rsc_d),
      .wadr(output_rsc_wadr),
      .d_d(output_rsci_d_d),
      .q_d(output_rsci_q_d),
      .radr_d(output_rsci_radr_d),
      .re_d(output_rsci_re_d_iff),
      .wadr_d(output_rsci_wadr_d),
      .we_d(output_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(output_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(output_rsci_re_d_iff)
    );
  UNET_IP_tranconv2d_run_tran UNET_IP_tranconv2d_run_tran_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .input_triosy_lz(input_triosy_lz),
      .output_triosy_lz(output_triosy_lz),
      .height_rsc_dat(height_rsc_dat),
      .height_triosy_lz(height_triosy_lz),
      .width_rsc_dat(width_rsc_dat),
      .width_triosy_lz(width_triosy_lz),
      .kernel_size_rsc_dat(kernel_size_rsc_dat),
      .kernel_size_triosy_lz(kernel_size_triosy_lz),
      .filter_offset_rsc_dat(filter_offset_rsc_dat),
      .filter_offset_triosy_lz(filter_offset_triosy_lz),
      .in_channels_rsc_dat(in_channels_rsc_dat),
      .in_channels_triosy_lz(in_channels_triosy_lz),
      .out_channels_rsc_dat(out_channels_rsc_dat),
      .out_channels_triosy_lz(out_channels_triosy_lz),
      .stride_rsc_dat(stride_rsc_dat),
      .stride_triosy_lz(stride_triosy_lz),
      .input_rsci_q_d(input_rsci_q_d),
      .input_rsci_radr_d(input_rsci_radr_d),
      .output_rsci_d_d(output_rsci_d_d),
      .output_rsci_q_d(output_rsci_q_d),
      .output_rsci_radr_d(output_rsci_radr_d),
      .output_rsci_wadr_d(output_rsci_wadr_d),
      .input_rsci_re_d_pff(input_rsci_re_d_iff),
      .output_rsci_re_d_pff(output_rsci_re_d_iff),
      .output_rsci_we_d_pff(output_rsci_we_d_iff)
    );
endmodule



