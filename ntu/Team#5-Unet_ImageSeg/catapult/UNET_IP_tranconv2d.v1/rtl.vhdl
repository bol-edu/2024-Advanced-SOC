-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2023.2/1059873 Production Release
--  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
-- 
--  Generated by:   r12016@cad40
--  Generated date: Thu Jun 13 03:32:36 2024
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_2_15_12_32768_1_32768_12_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_2_15_12_32768_1_32768_12_1_gen
    IS
  PORT(
    q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    re : OUT STD_LOGIC;
    radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    re_d : IN STD_LOGIC;
    wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_2_15_12_32768_1_32768_12_1_gen;

ARCHITECTURE v1 OF UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_2_15_12_32768_1_32768_12_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  re <= (readA_r_ram_ir_internal_RMASK_B_d);
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_1_15_12_32768_1_32768_12_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_1_15_12_32768_1_32768_12_1_gen
    IS
  PORT(
    q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    re : OUT STD_LOGIC;
    radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    re_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_1_15_12_32768_1_32768_12_1_gen;

ARCHITECTURE v1 OF UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_1_15_12_32768_1_32768_12_1_gen
    IS
  -- Default Constants

BEGIN
  q_d <= q;
  re <= (readA_r_ram_ir_internal_RMASK_B_d);
  radr <= (radr_d);
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_tranconv2d_run_tran_run_tran_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_tranconv2d_run_tran_run_tran_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    arst_n : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (20 DOWNTO 0);
    LOOP_RESET_C_0_tr0 : IN STD_LOGIC;
    main_C_1_tr0 : IN STD_LOGIC;
    LOOP_IN_C_0_tr0 : IN STD_LOGIC;
    LOOP_IN_C_0_tr1 : IN STD_LOGIC;
    LOOP_HEIGHT_C_0_tr0 : IN STD_LOGIC;
    LOOP_WIDTH_C_0_tr0 : IN STD_LOGIC;
    LOOP_X_C_0_tr0 : IN STD_LOGIC;
    LOOP_Y_C_7_tr0 : IN STD_LOGIC;
    LOOP_X_C_1_tr0 : IN STD_LOGIC;
    LOOP_WIDTH_C_1_tr0 : IN STD_LOGIC;
    LOOP_HEIGHT_C_1_tr0 : IN STD_LOGIC;
    LOOP_OUT_C_0_tr0 : IN STD_LOGIC
  );
END UNET_IP_tranconv2d_run_tran_run_tran_fsm;

ARCHITECTURE v1 OF UNET_IP_tranconv2d_run_tran_run_tran_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for UNET_IP_tranconv2d_run_tran_run_tran_fsm_1
  TYPE UNET_IP_tranconv2d_run_tran_run_tran_fsm_1_ST IS (main_C_0, LOOP_RESET_C_0,
      main_C_1, LOOP_IN_C_0, LOOP_HEIGHT_C_0, LOOP_WIDTH_C_0, LOOP_X_C_0, LOOP_Y_C_0,
      LOOP_Y_C_1, LOOP_Y_C_2, LOOP_Y_C_3, LOOP_Y_C_4, LOOP_Y_C_5, LOOP_Y_C_6, LOOP_Y_C_7,
      LOOP_X_C_1, LOOP_WIDTH_C_1, LOOP_HEIGHT_C_1, LOOP_IN_C_1, LOOP_OUT_C_0, main_C_2);

  SIGNAL state_var : UNET_IP_tranconv2d_run_tran_run_tran_fsm_1_ST;
  SIGNAL state_var_NS : UNET_IP_tranconv2d_run_tran_run_tran_fsm_1_ST;

BEGIN
  UNET_IP_tranconv2d_run_tran_run_tran_fsm_1 : PROCESS (LOOP_RESET_C_0_tr0, main_C_1_tr0,
      LOOP_IN_C_0_tr0, LOOP_IN_C_0_tr1, LOOP_HEIGHT_C_0_tr0, LOOP_WIDTH_C_0_tr0,
      LOOP_X_C_0_tr0, LOOP_Y_C_7_tr0, LOOP_X_C_1_tr0, LOOP_WIDTH_C_1_tr0, LOOP_HEIGHT_C_1_tr0,
      LOOP_OUT_C_0_tr0, state_var)
  BEGIN
    CASE state_var IS
      WHEN LOOP_RESET_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000010");
        IF ( LOOP_RESET_C_0_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= LOOP_RESET_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000100");
        IF ( main_C_1_tr0 = '1' ) THEN
          state_var_NS <= main_C_2;
        ELSE
          state_var_NS <= LOOP_IN_C_0;
        END IF;
      WHEN LOOP_IN_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000001000");
        IF ( LOOP_IN_C_0_tr0 = '1' ) THEN
          state_var_NS <= LOOP_OUT_C_0;
        ELSIF ( LOOP_IN_C_0_tr1 = '1' ) THEN
          state_var_NS <= LOOP_IN_C_1;
        ELSE
          state_var_NS <= LOOP_HEIGHT_C_0;
        END IF;
      WHEN LOOP_HEIGHT_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000010000");
        IF ( LOOP_HEIGHT_C_0_tr0 = '1' ) THEN
          state_var_NS <= LOOP_HEIGHT_C_1;
        ELSE
          state_var_NS <= LOOP_WIDTH_C_0;
        END IF;
      WHEN LOOP_WIDTH_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000100000");
        IF ( LOOP_WIDTH_C_0_tr0 = '1' ) THEN
          state_var_NS <= LOOP_WIDTH_C_1;
        ELSE
          state_var_NS <= LOOP_X_C_0;
        END IF;
      WHEN LOOP_X_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000001000000");
        IF ( LOOP_X_C_0_tr0 = '1' ) THEN
          state_var_NS <= LOOP_X_C_1;
        ELSE
          state_var_NS <= LOOP_Y_C_0;
        END IF;
      WHEN LOOP_Y_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000010000000");
        state_var_NS <= LOOP_Y_C_1;
      WHEN LOOP_Y_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000100000000");
        state_var_NS <= LOOP_Y_C_2;
      WHEN LOOP_Y_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000001000000000");
        state_var_NS <= LOOP_Y_C_3;
      WHEN LOOP_Y_C_3 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000010000000000");
        state_var_NS <= LOOP_Y_C_4;
      WHEN LOOP_Y_C_4 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000100000000000");
        state_var_NS <= LOOP_Y_C_5;
      WHEN LOOP_Y_C_5 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000001000000000000");
        state_var_NS <= LOOP_Y_C_6;
      WHEN LOOP_Y_C_6 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000010000000000000");
        state_var_NS <= LOOP_Y_C_7;
      WHEN LOOP_Y_C_7 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000100000000000000");
        IF ( LOOP_Y_C_7_tr0 = '1' ) THEN
          state_var_NS <= LOOP_X_C_1;
        ELSE
          state_var_NS <= LOOP_Y_C_0;
        END IF;
      WHEN LOOP_X_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000001000000000000000");
        IF ( LOOP_X_C_1_tr0 = '1' ) THEN
          state_var_NS <= LOOP_WIDTH_C_1;
        ELSE
          state_var_NS <= LOOP_X_C_0;
        END IF;
      WHEN LOOP_WIDTH_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000010000000000000000");
        IF ( LOOP_WIDTH_C_1_tr0 = '1' ) THEN
          state_var_NS <= LOOP_HEIGHT_C_1;
        ELSE
          state_var_NS <= LOOP_WIDTH_C_0;
        END IF;
      WHEN LOOP_HEIGHT_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000100000000000000000");
        IF ( LOOP_HEIGHT_C_1_tr0 = '1' ) THEN
          state_var_NS <= LOOP_IN_C_1;
        ELSE
          state_var_NS <= LOOP_HEIGHT_C_0;
        END IF;
      WHEN LOOP_IN_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "001000000000000000000");
        state_var_NS <= LOOP_IN_C_0;
      WHEN LOOP_OUT_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "010000000000000000000");
        IF ( LOOP_OUT_C_0_tr0 = '1' ) THEN
          state_var_NS <= main_C_2;
        ELSE
          state_var_NS <= LOOP_IN_C_0;
        END IF;
      WHEN main_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "100000000000000000000");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000000001");
        state_var_NS <= LOOP_RESET_C_0;
    END CASE;
  END PROCESS UNET_IP_tranconv2d_run_tran_run_tran_fsm_1;

  UNET_IP_tranconv2d_run_tran_run_tran_fsm_1_REG : PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      state_var <= main_C_0;
    ELSIF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS UNET_IP_tranconv2d_run_tran_run_tran_fsm_1_REG;

END v1;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_tranconv2d_run_tran
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_tranconv2d_run_tran IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    arst_n : IN STD_LOGIC;
    input_triosy_lz : OUT STD_LOGIC;
    output_triosy_lz : OUT STD_LOGIC;
    height_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    height_triosy_lz : OUT STD_LOGIC;
    width_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    width_triosy_lz : OUT STD_LOGIC;
    kernel_size_rsc_dat : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    kernel_size_triosy_lz : OUT STD_LOGIC;
    filter_offset_rsc_dat : IN STD_LOGIC_VECTOR (19 DOWNTO 0);
    filter_offset_triosy_lz : OUT STD_LOGIC;
    in_channels_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    in_channels_triosy_lz : OUT STD_LOGIC;
    out_channels_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    out_channels_triosy_lz : OUT STD_LOGIC;
    stride_rsc_dat : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    stride_triosy_lz : OUT STD_LOGIC;
    input_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    input_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    output_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    output_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    output_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    output_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    input_rsci_re_d_pff : OUT STD_LOGIC;
    output_rsci_re_d_pff : OUT STD_LOGIC;
    output_rsci_we_d_pff : OUT STD_LOGIC
  );
END UNET_IP_tranconv2d_run_tran;

ARCHITECTURE v1 OF UNET_IP_tranconv2d_run_tran IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL height_rsci_idat : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL width_rsci_idat : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL kernel_size_rsci_idat : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL filter_offset_rsci_idat : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL in_channels_rsci_idat : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL out_channels_rsci_idat : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL stride_rsci_idat : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL fsm_output : STD_LOGIC_VECTOR (20 DOWNTO 0);
  SIGNAL and_dcpl_18 : STD_LOGIC;
  SIGNAL or_dcpl_22 : STD_LOGIC;
  SIGNAL or_dcpl_27 : STD_LOGIC;
  SIGNAL exit_LOOP_Y_sva : STD_LOGIC;
  SIGNAL exit_LOOP_OUT_sva_mx0 : STD_LOGIC;
  SIGNAL exit_LOOP_HEIGHT_sva_mx0 : STD_LOGIC;
  SIGNAL exit_LOOP_WIDTH_sva_mx0 : STD_LOGIC;
  SIGNAL LOOP_RESET_stage_0_2 : STD_LOGIC;
  SIGNAL LOOP_RESET_stage_0_1 : STD_LOGIC;
  SIGNAL LOOP_RESET_stage_0_3 : STD_LOGIC;
  SIGNAL LOOP_Y_mul_4_sdt : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL or_97_ssc : STD_LOGIC;
  SIGNAL reg_exit_LOOP_RESET_sva_1_cse : STD_LOGIC;
  SIGNAL reg_stride_triosy_obj_ld_cse : STD_LOGIC;
  SIGNAL LOOP_Y_and_rgt : STD_LOGIC;
  SIGNAL LOOP_Y_acc_15_itm : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL LOOP_Y_mul_1_itm : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL out_width_io_read_width_rsc_cse_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_mul_4_itm_11_0 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL out_idx_14_0_sva_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL out_idx_1_sva : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL out_idx_14_0_sva : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm : STD_LOGIC_VECTOR
      (4 DOWNTO 0);
  SIGNAL z_out : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (17 DOWNTO 0);
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (16 DOWNTO 0);
  SIGNAL z_out_5 : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL filter_size_io_read_kernel_size_rsc_cse_sva : STD_LOGIC_VECTOR (1 DOWNTO
      0);
  SIGNAL filter_size_3_0_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL out_height_io_read_stride_rsc_cse_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL out_height_io_read_height_rsc_cse_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL out_height_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL out_width_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL out_c_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_OUT_io_read_out_channels_rsc_1_cse_sva : STD_LOGIC_VECTOR (6 DOWNTO
      0);
  SIGNAL in_c_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_IN_io_read_in_channels_rsc_cse_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL i_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL j_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL x_sva : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL y_sva : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL LOOP_RESET_mul_1_itm_1 : STD_LOGIC_VECTOR (16 DOWNTO 0);
  SIGNAL LOOP_Y_acc_7_itm : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL LOOP_Y_acc_13_itm : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL LOOP_Y_acc_14_itm : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL LOOP_Y_mul_10_itm : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL LOOP_Y_acc_17_itm : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL LOOP_Y_acc_18_itm : STD_LOGIC_VECTOR (17 DOWNTO 0);
  SIGNAL out_idx_1_sva_mx1 : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL LOOP_RESET_stage_0_1_mx0w1 : STD_LOGIC;
  SIGNAL out_c_sva_2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL i_sva_2 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL j_sva_2 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL x_sva_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL y_sva_2 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL LOOP_Y_mul_4_itm_13_12 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL out_c_or_cse : STD_LOGIC;
  SIGNAL out_width_mux_3_cse : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL LOOP_Y_nor_cse : STD_LOGIC;
  SIGNAL LOOP_RESET_acc_2_itm_27_1 : STD_LOGIC;
  SIGNAL LOOP_X_acc_2_itm_2_1 : STD_LOGIC;
  SIGNAL LOOP_IN_acc_2_itm_8_1 : STD_LOGIC;

  SIGNAL LOOP_RESET_mux1h_6_nl : STD_LOGIC;
  SIGNAL or_63_nl : STD_LOGIC;
  SIGNAL LOOP_IN_acc_1_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL not_69_nl : STD_LOGIC;
  SIGNAL LOOP_Y_acc_19_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL not_71_nl : STD_LOGIC;
  SIGNAL LOOP_Y_acc_16_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL LOOP_Y_mul_11_nl : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL LOOP_RESET_acc_1_nl : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL or_24_nl : STD_LOGIC;
  SIGNAL LOOP_RESET_acc_2_nl : STD_LOGIC_VECTOR (27 DOWNTO 0);
  SIGNAL LOOP_RESET_mul_nl : STD_LOGIC_VECTOR (26 DOWNTO 0);
  SIGNAL LOOP_X_acc_2_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL LOOP_OUT_acc_2_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_OUT_acc_3_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL LOOP_HEIGHT_acc_2_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_HEIGHT_acc_3_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_WIDTH_acc_2_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_WIDTH_acc_3_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_IN_acc_2_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL LOOP_Y_LOOP_Y_acc_3_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL out_width_mux_4_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL out_height_mux_5_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_LOOP_Y_and_5_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL LOOP_Y_LOOP_Y_and_6_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL LOOP_Y_mux_10_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL filter_size_mux_4_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL filter_size_mux_5_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL LOOP_RESET_LOOP_RESET_and_6_nl : STD_LOGIC;
  SIGNAL LOOP_RESET_mux_11_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_RESET_LOOP_RESET_and_7_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL LOOP_RESET_mux_12_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL LOOP_Y_LOOP_Y_and_7_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL LOOP_Y_mux1h_2_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_or_3_nl : STD_LOGIC;
  SIGNAL LOOP_Y_LOOP_Y_and_8_nl : STD_LOGIC;
  SIGNAL LOOP_Y_LOOP_Y_and_9_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_mux_11_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_nor_3_nl : STD_LOGIC;
  SIGNAL LOOP_Y_mux1h_3_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL height_rsci_dat : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL height_rsci_idat_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);

  SIGNAL width_rsci_dat : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL width_rsci_idat_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);

  SIGNAL kernel_size_rsci_dat : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL kernel_size_rsci_idat_1 : STD_LOGIC_VECTOR (1 DOWNTO 0);

  SIGNAL filter_offset_rsci_dat : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL filter_offset_rsci_idat_1 : STD_LOGIC_VECTOR (19 DOWNTO 0);

  SIGNAL in_channels_rsci_dat : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL in_channels_rsci_idat_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);

  SIGNAL out_channels_rsci_dat : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL out_channels_rsci_idat_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);

  SIGNAL stride_rsci_dat : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL stride_rsci_idat_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);

  SIGNAL LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr : STD_LOGIC_VECTOR
      (18 DOWNTO 0);
  SIGNAL LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_data_out : STD_LOGIC_VECTOR
      (4 DOWNTO 0);

  COMPONENT UNET_IP_tranconv2d_run_tran_run_tran_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      arst_n : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (20 DOWNTO 0);
      LOOP_RESET_C_0_tr0 : IN STD_LOGIC;
      main_C_1_tr0 : IN STD_LOGIC;
      LOOP_IN_C_0_tr0 : IN STD_LOGIC;
      LOOP_IN_C_0_tr1 : IN STD_LOGIC;
      LOOP_HEIGHT_C_0_tr0 : IN STD_LOGIC;
      LOOP_WIDTH_C_0_tr0 : IN STD_LOGIC;
      LOOP_X_C_0_tr0 : IN STD_LOGIC;
      LOOP_Y_C_7_tr0 : IN STD_LOGIC;
      LOOP_X_C_1_tr0 : IN STD_LOGIC;
      LOOP_WIDTH_C_1_tr0 : IN STD_LOGIC;
      LOOP_HEIGHT_C_1_tr0 : IN STD_LOGIC;
      LOOP_OUT_C_0_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_fsm_output : STD_LOGIC_VECTOR
      (20 DOWNTO 0);
  SIGNAL UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_RESET_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr1 : STD_LOGIC;
  SIGNAL UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_WIDTH_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_1_tr0 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  FUNCTION MUX1HOT_s_1_3_2(input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_7_3_2(input_2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_7_4_2(input_3 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_10_2_2(input_0 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(9 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(9 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_12_2_2(input_0 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(11 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_15_2_2(input_0 : STD_LOGIC_VECTOR(14 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(14 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(14 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_20_2_2(input_0 : STD_LOGIC_VECTOR(19 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(19 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(19 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_2_2_2(input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_3_2_2(input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_5_2_2(input_0 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(4 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_7_2_2(input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION minimum(arg1,arg2:INTEGER) RETURN INTEGER IS
  BEGIN
    IF(arg1<arg2)THEN
      RETURN arg1;
    ELSE
      RETURN arg2;
    END IF;
  END;

  FUNCTION maximum(arg1,arg2:INTEGER) RETURN INTEGER IS
  BEGIN
    IF(arg1>arg2)THEN
      RETURN arg1;
    ELSE
      RETURN arg2;
    END IF;
  END;

  FUNCTION READSLICE_1_3(input_val:STD_LOGIC_VECTOR(2 DOWNTO 0);index:INTEGER)
  RETURN STD_LOGIC IS
    CONSTANT min_sat_index:INTEGER:= maximum( index, 0 );
    CONSTANT sat_index:INTEGER:= minimum( min_sat_index, 2);
  BEGIN
    RETURN input_val(sat_index);
  END;

BEGIN
  height_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 3,
      width => 7
      )
    PORT MAP(
      dat => height_rsci_dat,
      idat => height_rsci_idat_1
    );
  height_rsci_dat <= height_rsc_dat;
  height_rsci_idat <= height_rsci_idat_1;

  width_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 4,
      width => 7
      )
    PORT MAP(
      dat => width_rsci_dat,
      idat => width_rsci_idat_1
    );
  width_rsci_dat <= width_rsc_dat;
  width_rsci_idat <= width_rsci_idat_1;

  kernel_size_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 5,
      width => 2
      )
    PORT MAP(
      dat => kernel_size_rsci_dat,
      idat => kernel_size_rsci_idat_1
    );
  kernel_size_rsci_dat <= kernel_size_rsc_dat;
  kernel_size_rsci_idat <= kernel_size_rsci_idat_1;

  filter_offset_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 6,
      width => 20
      )
    PORT MAP(
      dat => filter_offset_rsci_dat,
      idat => filter_offset_rsci_idat_1
    );
  filter_offset_rsci_dat <= filter_offset_rsc_dat;
  filter_offset_rsci_idat <= filter_offset_rsci_idat_1;

  in_channels_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 7,
      width => 7
      )
    PORT MAP(
      dat => in_channels_rsci_dat,
      idat => in_channels_rsci_idat_1
    );
  in_channels_rsci_dat <= in_channels_rsc_dat;
  in_channels_rsci_idat <= in_channels_rsci_idat_1;

  out_channels_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 8,
      width => 7
      )
    PORT MAP(
      dat => out_channels_rsci_dat,
      idat => out_channels_rsci_idat_1
    );
  out_channels_rsci_dat <= out_channels_rsc_dat;
  out_channels_rsci_idat <= out_channels_rsci_idat_1;

  stride_rsci : mgc_hls.ccs_in_pkg_v1.ccs_in_v1
    GENERIC MAP(
      rscid => 9,
      width => 3
      )
    PORT MAP(
      dat => stride_rsci_dat,
      idat => stride_rsci_idat_1
    );
  stride_rsci_dat <= stride_rsc_dat;
  stride_rsci_idat <= stride_rsci_idat_1;

  input_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_stride_triosy_obj_ld_cse,
      lz => input_triosy_lz
    );
  output_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_stride_triosy_obj_ld_cse,
      lz => output_triosy_lz
    );
  height_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_stride_triosy_obj_ld_cse,
      lz => height_triosy_lz
    );
  width_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_stride_triosy_obj_ld_cse,
      lz => width_triosy_lz
    );
  kernel_size_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_stride_triosy_obj_ld_cse,
      lz => kernel_size_triosy_lz
    );
  filter_offset_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_stride_triosy_obj_ld_cse,
      lz => filter_offset_triosy_lz
    );
  in_channels_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_stride_triosy_obj_ld_cse,
      lz => in_channels_triosy_lz
    );
  out_channels_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_stride_triosy_obj_ld_cse,
      lz => out_channels_triosy_lz
    );
  stride_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_stride_triosy_obj_ld_cse,
      lz => stride_triosy_lz
    );
  LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg : mgc_hls.unet_ip_tranconv2dmgc_rom_11_485120_5_1_pkg.UNET_IP_tranconv2dmgc_rom_11_485120_5_1
    PORT MAP(
      addr => LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr,
      data_out => LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_data_out
    );
  LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_Y_acc_18_itm),
      18), 19) + UNSIGNED(filter_offset_rsci_idat(18 DOWNTO 0)), 19));
  LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm <= LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_data_out;

  UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst : UNET_IP_tranconv2d_run_tran_run_tran_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      arst_n => arst_n,
      fsm_output => UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_fsm_output,
      LOOP_RESET_C_0_tr0 => UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_RESET_C_0_tr0,
      main_C_1_tr0 => exit_LOOP_OUT_sva_mx0,
      LOOP_IN_C_0_tr0 => UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr0,
      LOOP_IN_C_0_tr1 => UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr1,
      LOOP_HEIGHT_C_0_tr0 => exit_LOOP_WIDTH_sva_mx0,
      LOOP_WIDTH_C_0_tr0 => UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_WIDTH_C_0_tr0,
      LOOP_X_C_0_tr0 => UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_0_tr0,
      LOOP_Y_C_7_tr0 => exit_LOOP_Y_sva,
      LOOP_X_C_1_tr0 => UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_1_tr0,
      LOOP_WIDTH_C_1_tr0 => exit_LOOP_WIDTH_sva_mx0,
      LOOP_HEIGHT_C_1_tr0 => exit_LOOP_HEIGHT_sva_mx0,
      LOOP_OUT_C_0_tr0 => exit_LOOP_OUT_sva_mx0
    );
  fsm_output <= UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_fsm_output;
  UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_RESET_C_0_tr0 <= NOT(LOOP_RESET_stage_0_3
      OR LOOP_RESET_stage_0_1 OR LOOP_RESET_stage_0_2);
  UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr0 <= NOT LOOP_IN_acc_2_itm_8_1;
  UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_IN_C_0_tr1 <= exit_LOOP_HEIGHT_sva_mx0
      AND LOOP_IN_acc_2_itm_8_1;
  UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_WIDTH_C_0_tr0 <= NOT LOOP_X_acc_2_itm_2_1;
  UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_0_tr0 <= NOT LOOP_RESET_stage_0_3;
  UNET_IP_tranconv2d_run_tran_run_tran_fsm_inst_LOOP_X_C_1_tr0 <= NOT (READSLICE_1_3(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1'
      & x_sva_2) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT filter_size_io_read_kernel_size_rsc_cse_sva),
      2), 3) + UNSIGNED'( "001"), 3)), 2));

  out_c_or_cse <= (fsm_output(2)) OR (fsm_output(19));
  LOOP_Y_mul_4_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(out_c_sva)
      * UNSIGNED(LOOP_IN_io_read_in_channels_rsc_cse_sva)), 14));
  or_97_ssc <= CONV_SL_1_1(fsm_output(12 DOWNTO 11)/=STD_LOGIC_VECTOR'("00"));
  LOOP_Y_and_rgt <= (NOT (fsm_output(12))) AND or_97_ssc;
  LOOP_RESET_acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(out_idx_1_sva) +
      UNSIGNED'( "00000000000000000001"), 20));
  or_24_nl <= (NOT LOOP_RESET_stage_0_3) OR reg_exit_LOOP_RESET_sva_1_cse;
  out_idx_1_sva_mx1 <= MUX_v_20_2_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(LOOP_RESET_acc_1_nl),
      20)), out_idx_1_sva, or_24_nl);
  LOOP_RESET_mul_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(LOOP_RESET_mul_1_itm_1)
      * UNSIGNED(out_width_sva)), 27));
  LOOP_RESET_acc_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR'(
      "10000000") & out_idx_1_sva_mx1) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT
      STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(LOOP_RESET_mul_nl), 27))), 27), 28)
      + UNSIGNED'( "0000000000000000000000000001"), 28));
  LOOP_RESET_acc_2_itm_27_1 <= LOOP_RESET_acc_2_nl(27);
  LOOP_RESET_stage_0_1_mx0w1 <= (LOOP_RESET_acc_2_itm_27_1 OR (NOT LOOP_RESET_stage_0_2))
      AND LOOP_RESET_stage_0_1;
  LOOP_X_acc_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & (NOT filter_size_io_read_kernel_size_rsc_cse_sva))
      + UNSIGNED'( "001"), 3));
  LOOP_X_acc_2_itm_2_1 <= LOOP_X_acc_2_nl(2);
  out_idx_14_0_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(LOOP_Y_acc_14_itm)
      + UNSIGNED(z_out_5), 15));
  LOOP_OUT_acc_2_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT LOOP_OUT_io_read_out_channels_rsc_1_cse_sva))
      + SIGNED'( "00000001"), 8));
  LOOP_OUT_acc_3_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & out_c_sva_2)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED('1' & (NOT LOOP_OUT_io_read_out_channels_rsc_1_cse_sva)),
      8), 9) + UNSIGNED'( "000000001"), 9));
  exit_LOOP_OUT_sva_mx0 <= MUX_s_1_2_2((NOT (LOOP_OUT_acc_2_nl(7))), (NOT (LOOP_OUT_acc_3_nl(8))),
      fsm_output(19));
  out_c_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(out_c_sva(6
      DOWNTO 0)), 7), 8) + UNSIGNED'( "00000001"), 8));
  LOOP_HEIGHT_acc_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & (NOT out_height_io_read_height_rsc_cse_sva))
      + UNSIGNED'( "00000001"), 8));
  LOOP_HEIGHT_acc_3_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & i_sva_2)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT out_height_io_read_height_rsc_cse_sva),
      7), 8) + UNSIGNED'( "00000001"), 8));
  exit_LOOP_HEIGHT_sva_mx0 <= MUX_s_1_2_2((NOT (LOOP_HEIGHT_acc_2_nl(7))), (NOT (LOOP_HEIGHT_acc_3_nl(7))),
      fsm_output(17));
  i_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(i_sva) + UNSIGNED'( "0000001"),
      7));
  LOOP_WIDTH_acc_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & (NOT out_width_io_read_width_rsc_cse_sva))
      + UNSIGNED'( "00000001"), 8));
  LOOP_WIDTH_acc_3_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & j_sva_2) +
      CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT out_width_io_read_width_rsc_cse_sva),
      7), 8) + UNSIGNED'( "00000001"), 8));
  exit_LOOP_WIDTH_sva_mx0 <= MUX_s_1_2_2((NOT (LOOP_WIDTH_acc_2_nl(7))), (NOT (LOOP_WIDTH_acc_3_nl(7))),
      fsm_output(16));
  j_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(j_sva) + UNSIGNED'( "0000001"),
      7));
  x_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(x_sva) + UNSIGNED'( "01"), 2));
  y_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(y_sva) + UNSIGNED'( "01"), 2));
  and_dcpl_18 <= NOT((fsm_output(0)) OR (fsm_output(20)));
  or_dcpl_22 <= CONV_SL_1_1(fsm_output(11 DOWNTO 10)/=STD_LOGIC_VECTOR'("00"));
  or_dcpl_27 <= CONV_SL_1_1(fsm_output(14 DOWNTO 13)/=STD_LOGIC_VECTOR'("00"));
  LOOP_IN_acc_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & in_c_sva) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED('1'
      & (NOT in_channels_rsci_idat)), 8), 9) + UNSIGNED'( "000000001"), 9));
  LOOP_IN_acc_2_itm_8_1 <= LOOP_IN_acc_2_nl(8);
  input_rsci_radr_d <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_Y_acc_15_itm),
      14), 15) + UNSIGNED(z_out_5), 15));
  input_rsci_re_d_pff <= fsm_output(11);
  LOOP_Y_LOOP_Y_acc_3_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(LOOP_Y_mul_4_itm_11_0)
      + SIGNED((LOOP_RESET_mul_1_itm_1(15 DOWNTO 9)) & LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0),
      12));
  output_rsci_d_d <= MUX_v_12_2_2(STD_LOGIC_VECTOR'("000000000000"), STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(LOOP_Y_LOOP_Y_acc_3_nl),
      12)), (fsm_output(13)));
  output_rsci_radr_d <= out_idx_14_0_sva_1;
  output_rsci_re_d_pff <= fsm_output(10);
  output_rsci_wadr_d <= MUX_v_15_2_2((out_idx_1_sva(14 DOWNTO 0)), out_idx_14_0_sva,
      fsm_output(13));
  output_rsci_we_d_pff <= (fsm_output(13)) OR (LOOP_RESET_stage_0_3 AND (NOT reg_exit_LOOP_RESET_sva_1_cse)
      AND (fsm_output(1)));
  out_width_mux_3_cse <= MUX_v_3_2_2(stride_rsci_idat, out_height_io_read_stride_rsc_cse_sva,
      fsm_output(7));
  LOOP_Y_nor_cse <= NOT((fsm_output(8)) OR (fsm_output(9)) OR (fsm_output(11)));
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      out_idx_1_sva <= STD_LOGIC_VECTOR'( "00000000000000000000");
      reg_exit_LOOP_RESET_sva_1_cse <= '0';
      LOOP_RESET_stage_0_1 <= '0';
      LOOP_RESET_mul_1_itm_1 <= STD_LOGIC_VECTOR'( "00000000000000000");
      LOOP_RESET_stage_0_2 <= '0';
      LOOP_RESET_stage_0_3 <= '0';
      reg_stride_triosy_obj_ld_cse <= '0';
      LOOP_Y_mul_4_itm_13_12 <= STD_LOGIC_VECTOR'( "00");
      LOOP_Y_acc_17_itm <= STD_LOGIC_VECTOR'( "00000000000");
      LOOP_Y_acc_18_itm <= STD_LOGIC_VECTOR'( "000000000000000000");
      LOOP_Y_acc_14_itm <= STD_LOGIC_VECTOR'( "000000000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_idx_1_sva <= STD_LOGIC_VECTOR'( "00000000000000000000");
        reg_exit_LOOP_RESET_sva_1_cse <= '0';
        LOOP_RESET_stage_0_1 <= '0';
        LOOP_RESET_mul_1_itm_1 <= STD_LOGIC_VECTOR'( "00000000000000000");
        LOOP_RESET_stage_0_2 <= '0';
        LOOP_RESET_stage_0_3 <= '0';
        reg_stride_triosy_obj_ld_cse <= '0';
        LOOP_Y_mul_4_itm_13_12 <= STD_LOGIC_VECTOR'( "00");
        LOOP_Y_acc_17_itm <= STD_LOGIC_VECTOR'( "00000000000");
        LOOP_Y_acc_18_itm <= STD_LOGIC_VECTOR'( "000000000000000000");
        LOOP_Y_acc_14_itm <= STD_LOGIC_VECTOR'( "000000000000000");
      ELSE
        out_idx_1_sva <= MUX_v_20_2_2(STD_LOGIC_VECTOR'("00000000000000000000"),
            out_idx_1_sva_mx1, (fsm_output(1)));
        reg_exit_LOOP_RESET_sva_1_cse <= NOT LOOP_RESET_acc_2_itm_27_1;
        LOOP_RESET_stage_0_1 <= LOOP_RESET_stage_0_1_mx0w1 OR (NOT (fsm_output(1)));
        LOOP_RESET_mul_1_itm_1 <= z_out_4;
        LOOP_RESET_stage_0_2 <= LOOP_RESET_stage_0_1_mx0w1 AND (fsm_output(1));
        LOOP_RESET_stage_0_3 <= LOOP_RESET_mux1h_6_nl AND (NOT((fsm_output(0)) OR
            (fsm_output(20)) OR (fsm_output(16)) OR (fsm_output(17)) OR (fsm_output(4))
            OR (fsm_output(18)) OR (fsm_output(19)) OR (fsm_output(2)) OR (fsm_output(3))));
        reg_stride_triosy_obj_ld_cse <= exit_LOOP_OUT_sva_mx0 AND out_c_or_cse;
        LOOP_Y_mul_4_itm_13_12 <= LOOP_Y_mul_4_sdt(13 DOWNTO 12);
        LOOP_Y_acc_17_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out_2(10 DOWNTO
            0)) + CONV_UNSIGNED(UNSIGNED(LOOP_Y_acc_16_nl), 11), 11));
        LOOP_Y_acc_18_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out_2) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_Y_acc_17_itm),
            11), 18), 18));
        LOOP_Y_acc_14_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_Y_mul_11_nl),
            15) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_Y_acc_13_itm), 10), 15),
            15));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      out_height_io_read_height_rsc_cse_sva <= STD_LOGIC_VECTOR'( "0000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_height_io_read_height_rsc_cse_sva <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( and_dcpl_18 = '0' ) THEN
        out_height_io_read_height_rsc_cse_sva <= height_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      out_width_io_read_width_rsc_cse_sva <= STD_LOGIC_VECTOR'( "0000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_width_io_read_width_rsc_cse_sva <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( and_dcpl_18 = '0' ) THEN
        out_width_io_read_width_rsc_cse_sva <= width_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      filter_size_io_read_kernel_size_rsc_cse_sva <= STD_LOGIC_VECTOR'( "00");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        filter_size_io_read_kernel_size_rsc_cse_sva <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( and_dcpl_18 = '0' ) THEN
        filter_size_io_read_kernel_size_rsc_cse_sva <= kernel_size_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      out_width_sva <= STD_LOGIC_VECTOR'( "0000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_width_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( and_dcpl_18 = '0' ) THEN
        out_width_sva <= z_out;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      filter_size_3_0_sva <= STD_LOGIC_VECTOR'( "0000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        filter_size_3_0_sva <= STD_LOGIC_VECTOR'( "0000");
      ELSIF ( and_dcpl_18 = '0' ) THEN
        filter_size_3_0_sva <= z_out_3;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      out_height_sva <= STD_LOGIC_VECTOR'( "0000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_height_sva <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( and_dcpl_18 = '0' ) THEN
        out_height_sva <= z_out_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      out_height_io_read_stride_rsc_cse_sva <= STD_LOGIC_VECTOR'( "000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_height_io_read_stride_rsc_cse_sva <= STD_LOGIC_VECTOR'( "000");
      ELSIF ( and_dcpl_18 = '0' ) THEN
        out_height_io_read_stride_rsc_cse_sva <= stride_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      LOOP_OUT_io_read_out_channels_rsc_1_cse_sva <= STD_LOGIC_VECTOR'( "0000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        LOOP_OUT_io_read_out_channels_rsc_1_cse_sva <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( (NOT(and_dcpl_18 AND (NOT (fsm_output(1))))) = '1' ) THEN
        LOOP_OUT_io_read_out_channels_rsc_1_cse_sva <= out_channels_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      out_c_sva <= STD_LOGIC_VECTOR'( "00000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_c_sva <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( out_c_or_cse = '1' ) THEN
        out_c_sva <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), out_c_sva_2, (fsm_output(19)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      in_c_sva <= STD_LOGIC_VECTOR'( "00000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        in_c_sva <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( ((NOT(and_dcpl_18 AND (NOT((fsm_output(19)) OR (fsm_output(2)))) AND
          (NOT (fsm_output(1))))) OR (fsm_output(18))) = '1' ) THEN
        in_c_sva <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(LOOP_IN_acc_1_nl),
            8)), not_69_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      LOOP_IN_io_read_in_channels_rsc_cse_sva <= STD_LOGIC_VECTOR'( "0000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        LOOP_IN_io_read_in_channels_rsc_cse_sva <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( (NOT(and_dcpl_18 AND (NOT(CONV_SL_1_1(fsm_output(19 DOWNTO 18)/=STD_LOGIC_VECTOR'("00"))))
          AND (NOT(CONV_SL_1_1(fsm_output(3 DOWNTO 1)/=STD_LOGIC_VECTOR'("000"))))))
          = '1' ) THEN
        LOOP_IN_io_read_in_channels_rsc_cse_sva <= in_channels_rsci_idat;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      i_sva <= STD_LOGIC_VECTOR'( "0000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        i_sva <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( ((fsm_output(17)) OR (fsm_output(3))) = '1' ) THEN
        i_sva <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), i_sva_2, (fsm_output(17)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      j_sva <= STD_LOGIC_VECTOR'( "0000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        j_sva <= STD_LOGIC_VECTOR'( "0000000");
      ELSIF ( ((fsm_output(16)) OR (fsm_output(4))) = '1' ) THEN
        j_sva <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), j_sva_2, (fsm_output(16)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      x_sva <= STD_LOGIC_VECTOR'( "00");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        x_sva <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( ((fsm_output(15)) OR (fsm_output(5))) = '1' ) THEN
        x_sva <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), x_sva_2, (fsm_output(15)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      exit_LOOP_Y_sva <= '0';
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        exit_LOOP_Y_sva <= '0';
      ELSIF ( (fsm_output(7)) = '1' ) THEN
        exit_LOOP_Y_sva <= NOT (LOOP_Y_acc_19_nl(2));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      y_sva <= STD_LOGIC_VECTOR'( "00");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        y_sva <= STD_LOGIC_VECTOR'( "00");
      ELSIF ( (NOT(or_dcpl_27 OR CONV_SL_1_1(fsm_output(12 DOWNTO 8)/=STD_LOGIC_VECTOR'("00000"))))
          = '1' ) THEN
        y_sva <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), y_sva_2, not_71_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      LOOP_Y_mul_10_itm <= STD_LOGIC_VECTOR'( "000000000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        LOOP_Y_mul_10_itm <= STD_LOGIC_VECTOR'( "000000000000000");
      ELSIF ( (fsm_output(7)) = '1' ) THEN
        LOOP_Y_mul_10_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(out_c_sva(6
            DOWNTO 0)) * UNSIGNED(out_height_sva)), 15));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      LOOP_Y_acc_7_itm <= STD_LOGIC_VECTOR'( "0000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        LOOP_Y_acc_7_itm <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (fsm_output(7)) = '1' ) THEN
        LOOP_Y_acc_7_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(x_sva),
            2), 10), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      LOOP_Y_acc_13_itm <= STD_LOGIC_VECTOR'( "0000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        LOOP_Y_acc_13_itm <= STD_LOGIC_VECTOR'( "0000000000");
      ELSIF ( (fsm_output(7)) = '1' ) THEN
        LOOP_Y_acc_13_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out_1) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(y_sva),
            2), 10), 10));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      LOOP_Y_mul_4_itm_11_0 <= STD_LOGIC_VECTOR'( "000000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        LOOP_Y_mul_4_itm_11_0 <= STD_LOGIC_VECTOR'( "000000000000");
      ELSIF ( ((NOT or_97_ssc) OR LOOP_Y_and_rgt) = '1' ) THEN
        LOOP_Y_mul_4_itm_11_0 <= MUX_v_12_2_2((LOOP_Y_mul_4_sdt(11 DOWNTO 0)), output_rsci_q_d,
            LOOP_Y_and_rgt);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      LOOP_Y_mul_1_itm <= STD_LOGIC_VECTOR'( "00000000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        LOOP_Y_mul_1_itm <= STD_LOGIC_VECTOR'( "00000000000000");
      ELSIF ( (fsm_output(8)) = '1' ) THEN
        LOOP_Y_mul_1_itm <= z_out_5(13 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      LOOP_Y_acc_15_itm <= STD_LOGIC_VECTOR'( "00000000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        LOOP_Y_acc_15_itm <= STD_LOGIC_VECTOR'( "00000000000000");
      ELSIF ( (fsm_output(9)) = '1' ) THEN
        LOOP_Y_acc_15_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out_5(13 DOWNTO
            0)) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(j_sva), 7), 14), 14));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0 <= STD_LOGIC_VECTOR'( "00000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0 <= STD_LOGIC_VECTOR'( "00000");
      ELSIF ( or_dcpl_22 = '0' ) THEN
        LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0 <= MUX_v_5_2_2(LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm,
            (z_out_4(8 DOWNTO 4)), fsm_output(12));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      out_idx_14_0_sva <= STD_LOGIC_VECTOR'( "000000000000000");
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        out_idx_14_0_sva <= STD_LOGIC_VECTOR'( "000000000000000");
      ELSIF ( (fsm_output(10)) = '1' ) THEN
        out_idx_14_0_sva <= out_idx_14_0_sva_1;
      END IF;
    END IF;
  END PROCESS;
  or_63_nl <= or_dcpl_27 OR (fsm_output(12)) OR (fsm_output(9)) OR (fsm_output(8))
      OR (fsm_output(7)) OR (fsm_output(6)) OR (fsm_output(15)) OR or_dcpl_22;
  LOOP_RESET_mux1h_6_nl <= MUX1HOT_s_1_3_2(LOOP_RESET_stage_0_2, LOOP_X_acc_2_itm_2_1,
      LOOP_RESET_stage_0_3, STD_LOGIC_VECTOR'( (fsm_output(1)) & (fsm_output(5))
      & or_63_nl));
  LOOP_Y_acc_16_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out_3) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(y_sva),
      2), 4), 4));
  LOOP_Y_mul_11_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(LOOP_Y_acc_7_itm)
      * UNSIGNED(out_width_sva)), 15));
  LOOP_IN_acc_1_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(in_c_sva(6
      DOWNTO 0)), 7), 8) + UNSIGNED'( "00000001"), 8));
  not_69_nl <= NOT out_c_or_cse;
  LOOP_Y_acc_19_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & y_sva_2) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT
      filter_size_io_read_kernel_size_rsc_cse_sva), 2), 3) + UNSIGNED'( "001"), 3));
  not_71_nl <= NOT (fsm_output(6));
  out_width_mux_4_nl <= MUX_v_7_2_2(width_rsci_idat, i_sva, fsm_output(7));
  z_out <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(out_width_mux_3_cse)
      * UNSIGNED(out_width_mux_4_nl)), 10));
  out_height_mux_5_nl <= MUX_v_7_2_2(height_rsci_idat, j_sva, fsm_output(7));
  z_out_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(out_width_mux_3_cse)
      * UNSIGNED(out_height_mux_5_nl)), 10));
  LOOP_Y_LOOP_Y_and_5_nl <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), LOOP_Y_mul_4_itm_13_12,
      (fsm_output(8)));
  LOOP_Y_LOOP_Y_and_6_nl <= MUX_v_5_2_2(STD_LOGIC_VECTOR'("00000"), (LOOP_Y_mul_4_itm_11_0(11
      DOWNTO 7)), (fsm_output(8)));
  LOOP_Y_mux_10_nl <= MUX_v_7_2_2((in_c_sva(6 DOWNTO 0)), (LOOP_Y_mul_4_itm_11_0(6
      DOWNTO 0)), fsm_output(8));
  z_out_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(filter_size_3_0_sva)
      * UNSIGNED(LOOP_Y_LOOP_Y_and_5_nl & LOOP_Y_LOOP_Y_and_6_nl & LOOP_Y_mux_10_nl)),
      18));
  filter_size_mux_4_nl <= MUX_v_2_2_2(kernel_size_rsci_idat, x_sva, fsm_output(7));
  filter_size_mux_5_nl <= MUX_v_2_2_2(kernel_size_rsci_idat, filter_size_io_read_kernel_size_rsc_cse_sva,
      fsm_output(7));
  z_out_3 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(filter_size_mux_4_nl)
      * UNSIGNED(filter_size_mux_5_nl)), 4));
  LOOP_RESET_LOOP_RESET_and_6_nl <= (LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0(4))
      AND (fsm_output(12));
  LOOP_RESET_mux_11_nl <= MUX_v_7_2_2(out_channels_rsci_idat, STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(LOOP_Y_slc_LOOP_Y_LOOP_Y_mul_15_4_itm_4_0),7)),
      fsm_output(12));
  LOOP_RESET_LOOP_RESET_and_7_nl <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), (input_rsci_q_d(11
      DOWNTO 10)), (fsm_output(12)));
  LOOP_RESET_mux_12_nl <= MUX_v_10_2_2(out_height_sva, (input_rsci_q_d(9 DOWNTO 0)),
      fsm_output(12));
  z_out_4 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(SIGNED'( SIGNED(LOOP_RESET_LOOP_RESET_and_6_nl
      & LOOP_RESET_mux_11_nl) * SIGNED(LOOP_RESET_LOOP_RESET_and_7_nl & LOOP_RESET_mux_12_nl)),
      17));
  LOOP_Y_LOOP_Y_and_7_nl <= MUX_v_3_2_2(STD_LOGIC_VECTOR'("000"), (out_width_sva(9
      DOWNTO 7)), LOOP_Y_nor_cse);
  LOOP_Y_or_3_nl <= (fsm_output(9)) OR (fsm_output(11));
  LOOP_Y_mux1h_2_nl <= MUX1HOT_v_7_3_2(out_height_io_read_height_rsc_cse_sva, out_width_io_read_width_rsc_cse_sva,
      (out_width_sva(6 DOWNTO 0)), STD_LOGIC_VECTOR'( (fsm_output(8)) & LOOP_Y_or_3_nl
      & (fsm_output(10))));
  LOOP_Y_LOOP_Y_and_8_nl <= (LOOP_Y_mul_10_itm(14)) AND LOOP_Y_nor_cse;
  LOOP_Y_mux_11_nl <= MUX_v_7_2_2((LOOP_Y_mul_10_itm(13 DOWNTO 7)), (LOOP_Y_mul_1_itm(13
      DOWNTO 7)), fsm_output(11));
  LOOP_Y_nor_3_nl <= NOT(CONV_SL_1_1(fsm_output(9 DOWNTO 8)/=STD_LOGIC_VECTOR'("00")));
  LOOP_Y_LOOP_Y_and_9_nl <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), LOOP_Y_mux_11_nl,
      LOOP_Y_nor_3_nl);
  LOOP_Y_mux1h_3_nl <= MUX1HOT_v_7_4_2((in_c_sva(6 DOWNTO 0)), i_sva, (LOOP_Y_mul_10_itm(6
      DOWNTO 0)), (LOOP_Y_mul_1_itm(6 DOWNTO 0)), STD_LOGIC_VECTOR'( (fsm_output(8))
      & (fsm_output(9)) & (fsm_output(10)) & (fsm_output(11))));
  z_out_5 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(LOOP_Y_LOOP_Y_and_7_nl
      & LOOP_Y_mux1h_2_nl) * UNSIGNED(LOOP_Y_LOOP_Y_and_8_nl & LOOP_Y_LOOP_Y_and_9_nl
      & LOOP_Y_mux1h_3_nl)), 15));
END v1;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_tranconv2d
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.ccs_in_pkg_v1.ALL;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_tranconv2d IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    arst_n : IN STD_LOGIC;
    input_rsc_radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    input_rsc_re : OUT STD_LOGIC;
    input_rsc_q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    input_triosy_lz : OUT STD_LOGIC;
    output_rsc_wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    output_rsc_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    output_rsc_we : OUT STD_LOGIC;
    output_rsc_radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    output_rsc_re : OUT STD_LOGIC;
    output_rsc_q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    output_triosy_lz : OUT STD_LOGIC;
    height_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    height_triosy_lz : OUT STD_LOGIC;
    width_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    width_triosy_lz : OUT STD_LOGIC;
    kernel_size_rsc_dat : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    kernel_size_triosy_lz : OUT STD_LOGIC;
    filter_offset_rsc_dat : IN STD_LOGIC_VECTOR (19 DOWNTO 0);
    filter_offset_triosy_lz : OUT STD_LOGIC;
    in_channels_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    in_channels_triosy_lz : OUT STD_LOGIC;
    out_channels_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    out_channels_triosy_lz : OUT STD_LOGIC;
    stride_rsc_dat : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
    stride_triosy_lz : OUT STD_LOGIC
  );
END UNET_IP_tranconv2d;

ARCHITECTURE v1 OF UNET_IP_tranconv2d IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';

  -- Interconnect Declarations
  SIGNAL input_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL input_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL output_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL output_rsci_wadr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL input_rsci_re_d_iff : STD_LOGIC;
  SIGNAL output_rsci_re_d_iff : STD_LOGIC;
  SIGNAL output_rsci_we_d_iff : STD_LOGIC;

  COMPONENT UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_1_15_12_32768_1_32768_12_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      re : OUT STD_LOGIC;
      radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      re_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL input_rsci_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL input_rsci_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL input_rsci_q_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL input_rsci_radr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);

  COMPONENT UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_2_15_12_32768_1_32768_12_1_gen
    PORT(
      q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      re : OUT STD_LOGIC;
      radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      re_d : IN STD_LOGIC;
      wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL output_rsci_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL output_rsci_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL output_rsci_d_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_q_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_radr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL output_rsci_wadr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);

  COMPONENT UNET_IP_tranconv2d_run_tran
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      arst_n : IN STD_LOGIC;
      input_triosy_lz : OUT STD_LOGIC;
      output_triosy_lz : OUT STD_LOGIC;
      height_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      height_triosy_lz : OUT STD_LOGIC;
      width_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      width_triosy_lz : OUT STD_LOGIC;
      kernel_size_rsc_dat : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      kernel_size_triosy_lz : OUT STD_LOGIC;
      filter_offset_rsc_dat : IN STD_LOGIC_VECTOR (19 DOWNTO 0);
      filter_offset_triosy_lz : OUT STD_LOGIC;
      in_channels_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      in_channels_triosy_lz : OUT STD_LOGIC;
      out_channels_rsc_dat : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      out_channels_triosy_lz : OUT STD_LOGIC;
      stride_rsc_dat : IN STD_LOGIC_VECTOR (2 DOWNTO 0);
      stride_triosy_lz : OUT STD_LOGIC;
      input_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      input_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      output_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      output_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      output_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      output_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      input_rsci_re_d_pff : OUT STD_LOGIC;
      output_rsci_re_d_pff : OUT STD_LOGIC;
      output_rsci_we_d_pff : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_height_rsc_dat : STD_LOGIC_VECTOR (6 DOWNTO
      0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_width_rsc_dat : STD_LOGIC_VECTOR (6 DOWNTO
      0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_kernel_size_rsc_dat : STD_LOGIC_VECTOR
      (1 DOWNTO 0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_filter_offset_rsc_dat : STD_LOGIC_VECTOR
      (19 DOWNTO 0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_in_channels_rsc_dat : STD_LOGIC_VECTOR
      (6 DOWNTO 0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_out_channels_rsc_dat : STD_LOGIC_VECTOR
      (6 DOWNTO 0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_stride_rsc_dat : STD_LOGIC_VECTOR (2 DOWNTO
      0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_input_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO
      0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_input_rsci_radr_d : STD_LOGIC_VECTOR (14
      DOWNTO 0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_output_rsci_d_d : STD_LOGIC_VECTOR (11
      DOWNTO 0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_output_rsci_q_d : STD_LOGIC_VECTOR (11
      DOWNTO 0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_output_rsci_radr_d : STD_LOGIC_VECTOR (14
      DOWNTO 0);
  SIGNAL UNET_IP_tranconv2d_run_tran_inst_output_rsci_wadr_d : STD_LOGIC_VECTOR (14
      DOWNTO 0);

BEGIN
  input_rsci : UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_1_15_12_32768_1_32768_12_1_gen
    PORT MAP(
      q => input_rsci_q,
      re => input_rsc_re,
      radr => input_rsci_radr,
      q_d => input_rsci_q_d_1,
      radr_d => input_rsci_radr_d_1,
      re_d => input_rsci_re_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => input_rsci_re_d_iff
    );
  input_rsci_q <= input_rsc_q;
  input_rsc_radr <= input_rsci_radr;
  input_rsci_q_d <= input_rsci_q_d_1;
  input_rsci_radr_d_1 <= input_rsci_radr_d;

  output_rsci : UNET_IP_tranconv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_2_15_12_32768_1_32768_12_1_gen
    PORT MAP(
      q => output_rsci_q,
      re => output_rsc_re,
      radr => output_rsci_radr,
      we => output_rsc_we,
      d => output_rsci_d,
      wadr => output_rsci_wadr,
      d_d => output_rsci_d_d_1,
      q_d => output_rsci_q_d_1,
      radr_d => output_rsci_radr_d_1,
      re_d => output_rsci_re_d_iff,
      wadr_d => output_rsci_wadr_d_1,
      we_d => output_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => output_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => output_rsci_re_d_iff
    );
  output_rsci_q <= output_rsc_q;
  output_rsc_radr <= output_rsci_radr;
  output_rsc_d <= output_rsci_d;
  output_rsc_wadr <= output_rsci_wadr;
  output_rsci_d_d_1 <= output_rsci_d_d;
  output_rsci_q_d <= output_rsci_q_d_1;
  output_rsci_radr_d_1 <= output_rsci_radr_d;
  output_rsci_wadr_d_1 <= output_rsci_wadr_d;

  UNET_IP_tranconv2d_run_tran_inst : UNET_IP_tranconv2d_run_tran
    PORT MAP(
      clk => clk,
      rst => rst,
      arst_n => arst_n,
      input_triosy_lz => input_triosy_lz,
      output_triosy_lz => output_triosy_lz,
      height_rsc_dat => UNET_IP_tranconv2d_run_tran_inst_height_rsc_dat,
      height_triosy_lz => height_triosy_lz,
      width_rsc_dat => UNET_IP_tranconv2d_run_tran_inst_width_rsc_dat,
      width_triosy_lz => width_triosy_lz,
      kernel_size_rsc_dat => UNET_IP_tranconv2d_run_tran_inst_kernel_size_rsc_dat,
      kernel_size_triosy_lz => kernel_size_triosy_lz,
      filter_offset_rsc_dat => UNET_IP_tranconv2d_run_tran_inst_filter_offset_rsc_dat,
      filter_offset_triosy_lz => filter_offset_triosy_lz,
      in_channels_rsc_dat => UNET_IP_tranconv2d_run_tran_inst_in_channels_rsc_dat,
      in_channels_triosy_lz => in_channels_triosy_lz,
      out_channels_rsc_dat => UNET_IP_tranconv2d_run_tran_inst_out_channels_rsc_dat,
      out_channels_triosy_lz => out_channels_triosy_lz,
      stride_rsc_dat => UNET_IP_tranconv2d_run_tran_inst_stride_rsc_dat,
      stride_triosy_lz => stride_triosy_lz,
      input_rsci_q_d => UNET_IP_tranconv2d_run_tran_inst_input_rsci_q_d,
      input_rsci_radr_d => UNET_IP_tranconv2d_run_tran_inst_input_rsci_radr_d,
      output_rsci_d_d => UNET_IP_tranconv2d_run_tran_inst_output_rsci_d_d,
      output_rsci_q_d => UNET_IP_tranconv2d_run_tran_inst_output_rsci_q_d,
      output_rsci_radr_d => UNET_IP_tranconv2d_run_tran_inst_output_rsci_radr_d,
      output_rsci_wadr_d => UNET_IP_tranconv2d_run_tran_inst_output_rsci_wadr_d,
      input_rsci_re_d_pff => input_rsci_re_d_iff,
      output_rsci_re_d_pff => output_rsci_re_d_iff,
      output_rsci_we_d_pff => output_rsci_we_d_iff
    );
  UNET_IP_tranconv2d_run_tran_inst_height_rsc_dat <= height_rsc_dat;
  UNET_IP_tranconv2d_run_tran_inst_width_rsc_dat <= width_rsc_dat;
  UNET_IP_tranconv2d_run_tran_inst_kernel_size_rsc_dat <= kernel_size_rsc_dat;
  UNET_IP_tranconv2d_run_tran_inst_filter_offset_rsc_dat <= filter_offset_rsc_dat;
  UNET_IP_tranconv2d_run_tran_inst_in_channels_rsc_dat <= in_channels_rsc_dat;
  UNET_IP_tranconv2d_run_tran_inst_out_channels_rsc_dat <= out_channels_rsc_dat;
  UNET_IP_tranconv2d_run_tran_inst_stride_rsc_dat <= stride_rsc_dat;
  UNET_IP_tranconv2d_run_tran_inst_input_rsci_q_d <= input_rsci_q_d;
  input_rsci_radr_d <= UNET_IP_tranconv2d_run_tran_inst_input_rsci_radr_d;
  output_rsci_d_d <= UNET_IP_tranconv2d_run_tran_inst_output_rsci_d_d;
  UNET_IP_tranconv2d_run_tran_inst_output_rsci_q_d <= output_rsci_q_d;
  output_rsci_radr_d <= UNET_IP_tranconv2d_run_tran_inst_output_rsci_radr_d;
  output_rsci_wadr_d <= UNET_IP_tranconv2d_run_tran_inst_output_rsci_wadr_d;

END v1;



