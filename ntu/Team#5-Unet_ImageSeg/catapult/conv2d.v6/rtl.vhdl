-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2023.2/1059873 Production Release
--  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
-- 
--  Generated by:   r12016@cad40
--  Generated date: Thu Jun 13 02:23:54 2024
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_3_15_12_32768_1_32768_12_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_3_15_12_32768_1_32768_12_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC
  );
END UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_3_15_12_32768_1_32768_12_1_gen;

ARCHITECTURE v6 OF UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_3_15_12_32768_1_32768_12_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_2_16_12_34848_1_34848_12_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_2_16_12_34848_1_34848_12_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    re : OUT STD_LOGIC;
    radr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    we : OUT STD_LOGIC;
    d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    wadr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    re_d : IN STD_LOGIC;
    wadr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    we_d : IN STD_LOGIC;
    writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_2_16_12_34848_1_34848_12_1_gen;

ARCHITECTURE v6 OF UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_2_16_12_34848_1_34848_12_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  re <= (readA_r_ram_ir_internal_RMASK_B_d);
  radr <= (radr_d);
  we <= (writeA_w_ram_ir_internal_WMASK_B_d);
  d <= (d_d);
  wadr <= (wadr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_conv2d_Xilinx_RAMS_DIST_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_conv2d_Xilinx_RAMS_DIST_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
    IS
  PORT(
    clken : OUT STD_LOGIC;
    q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    re : OUT STD_LOGIC;
    radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    clken_d : IN STD_LOGIC;
    q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
    re_d : IN STD_LOGIC;
    readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
  );
END UNET_IP_conv2d_Xilinx_RAMS_DIST_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen;

ARCHITECTURE v6 OF UNET_IP_conv2d_Xilinx_RAMS_DIST_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
    IS
  -- Default Constants

BEGIN
  clken <= (clken_d);
  q_d <= q;
  re <= (readA_r_ram_ir_internal_RMASK_B_d);
  radr <= (radr_d);
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_conv2d_run_conv_run_conv_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_conv2d_run_conv_run_conv_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    arst_n : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);
    main_C_0_tr0 : IN STD_LOGIC;
    for_C_0_tr0 : IN STD_LOGIC;
    for_for_for_C_0_tr0 : IN STD_LOGIC;
    for_for_C_0_tr0 : IN STD_LOGIC;
    for_C_1_tr0 : IN STD_LOGIC;
    main_C_1_tr0 : IN STD_LOGIC;
    LOOP_OUT_C_0_tr0 : IN STD_LOGIC;
    LOOP_IN_C_0_tr0 : IN STD_LOGIC;
    LOOP_HEIGHT_C_0_tr0 : IN STD_LOGIC;
    LOOP_Y_C_0_tr0 : IN STD_LOGIC;
    LOOP_X_C_0_tr0 : IN STD_LOGIC;
    LOOP_WIDTH_C_2_tr0 : IN STD_LOGIC;
    LOOP_HEIGHT_C_1_tr0 : IN STD_LOGIC;
    LOOP_IN_C_1_tr0 : IN STD_LOGIC;
    LOOP_OUT_C_1_tr0 : IN STD_LOGIC
  );
END UNET_IP_conv2d_run_conv_run_conv_fsm;

ARCHITECTURE v6 OF UNET_IP_conv2d_run_conv_run_conv_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for UNET_IP_conv2d_run_conv_run_conv_fsm_1
  TYPE UNET_IP_conv2d_run_conv_run_conv_fsm_1_ST IS (main_C_0, for_C_0, for_for_for_C_0,
      for_for_C_0, for_C_1, main_C_1, LOOP_OUT_C_0, LOOP_IN_C_0, LOOP_HEIGHT_C_0,
      LOOP_Y_C_0, LOOP_X_C_0, LOOP_WIDTH_C_0, LOOP_WIDTH_C_1, LOOP_WIDTH_C_2, LOOP_HEIGHT_C_1,
      LOOP_IN_C_1, LOOP_OUT_C_1, main_C_2);

  SIGNAL state_var : UNET_IP_conv2d_run_conv_run_conv_fsm_1_ST;
  SIGNAL state_var_NS : UNET_IP_conv2d_run_conv_run_conv_fsm_1_ST;

BEGIN
  UNET_IP_conv2d_run_conv_run_conv_fsm_1 : PROCESS (main_C_0_tr0, for_C_0_tr0, for_for_for_C_0_tr0,
      for_for_C_0_tr0, for_C_1_tr0, main_C_1_tr0, LOOP_OUT_C_0_tr0, LOOP_IN_C_0_tr0,
      LOOP_HEIGHT_C_0_tr0, LOOP_Y_C_0_tr0, LOOP_X_C_0_tr0, LOOP_WIDTH_C_2_tr0, LOOP_HEIGHT_C_1_tr0,
      LOOP_IN_C_1_tr0, LOOP_OUT_C_1_tr0, state_var)
  BEGIN
    CASE state_var IS
      WHEN for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000010");
        IF ( for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_C_1;
        ELSE
          state_var_NS <= for_for_for_C_0;
        END IF;
      WHEN for_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000100");
        IF ( for_for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_for_C_0;
        ELSE
          state_var_NS <= for_for_for_C_0;
        END IF;
      WHEN for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000001000");
        IF ( for_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_C_1;
        ELSE
          state_var_NS <= for_for_for_C_0;
        END IF;
      WHEN for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000010000");
        IF ( for_C_1_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= for_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000100000");
        IF ( main_C_1_tr0 = '1' ) THEN
          state_var_NS <= main_C_2;
        ELSE
          state_var_NS <= LOOP_OUT_C_0;
        END IF;
      WHEN LOOP_OUT_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000001000000");
        IF ( LOOP_OUT_C_0_tr0 = '1' ) THEN
          state_var_NS <= LOOP_OUT_C_1;
        ELSE
          state_var_NS <= LOOP_IN_C_0;
        END IF;
      WHEN LOOP_IN_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000010000000");
        IF ( LOOP_IN_C_0_tr0 = '1' ) THEN
          state_var_NS <= LOOP_IN_C_1;
        ELSE
          state_var_NS <= LOOP_HEIGHT_C_0;
        END IF;
      WHEN LOOP_HEIGHT_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000100000000");
        IF ( LOOP_HEIGHT_C_0_tr0 = '1' ) THEN
          state_var_NS <= LOOP_HEIGHT_C_1;
        ELSE
          state_var_NS <= LOOP_Y_C_0;
        END IF;
      WHEN LOOP_Y_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000001000000000");
        IF ( LOOP_Y_C_0_tr0 = '1' ) THEN
          state_var_NS <= LOOP_X_C_0;
        ELSE
          state_var_NS <= LOOP_Y_C_0;
        END IF;
      WHEN LOOP_X_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000010000000000");
        IF ( LOOP_X_C_0_tr0 = '1' ) THEN
          state_var_NS <= LOOP_WIDTH_C_0;
        ELSE
          state_var_NS <= LOOP_Y_C_0;
        END IF;
      WHEN LOOP_WIDTH_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000100000000000");
        state_var_NS <= LOOP_WIDTH_C_1;
      WHEN LOOP_WIDTH_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000001000000000000");
        state_var_NS <= LOOP_WIDTH_C_2;
      WHEN LOOP_WIDTH_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000010000000000000");
        IF ( LOOP_WIDTH_C_2_tr0 = '1' ) THEN
          state_var_NS <= LOOP_HEIGHT_C_1;
        ELSE
          state_var_NS <= LOOP_Y_C_0;
        END IF;
      WHEN LOOP_HEIGHT_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "000100000000000000");
        IF ( LOOP_HEIGHT_C_1_tr0 = '1' ) THEN
          state_var_NS <= LOOP_IN_C_1;
        ELSE
          state_var_NS <= LOOP_HEIGHT_C_0;
        END IF;
      WHEN LOOP_IN_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "001000000000000000");
        IF ( LOOP_IN_C_1_tr0 = '1' ) THEN
          state_var_NS <= LOOP_OUT_C_1;
        ELSE
          state_var_NS <= LOOP_IN_C_0;
        END IF;
      WHEN LOOP_OUT_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "010000000000000000");
        IF ( LOOP_OUT_C_1_tr0 = '1' ) THEN
          state_var_NS <= main_C_2;
        ELSE
          state_var_NS <= LOOP_OUT_C_0;
        END IF;
      WHEN main_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "100000000000000000");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "000000000000000001");
        IF ( main_C_0_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= for_C_0;
        END IF;
    END CASE;
  END PROCESS UNET_IP_conv2d_run_conv_run_conv_fsm_1;

  UNET_IP_conv2d_run_conv_run_conv_fsm_1_REG : PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      state_var <= main_C_0;
    ELSIF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS UNET_IP_conv2d_run_conv_run_conv_fsm_1_REG;

END v6;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_conv2d_run_conv
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_conv2d_run_conv IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    arst_n : IN STD_LOGIC;
    input_triosy_lz : OUT STD_LOGIC;
    padded_input_triosy_lz : OUT STD_LOGIC;
    output_triosy_lz : OUT STD_LOGIC;
    height : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    width : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    kernel_size : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    padding : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    filter_offset : IN STD_LOGIC_VECTOR (19 DOWNTO 0);
    in_channels : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    out_channels : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    input_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    padded_input_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    padded_input_rsci_radr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    padded_input_rsci_wadr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    output_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    output_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    input_rsci_re_d_pff : OUT STD_LOGIC;
    padded_input_rsci_re_d_pff : OUT STD_LOGIC;
    padded_input_rsci_we_d_pff : OUT STD_LOGIC;
    output_rsci_we_d_pff : OUT STD_LOGIC
  );
END UNET_IP_conv2d_run_conv;

ARCHITECTURE v6 OF UNET_IP_conv2d_run_conv IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL fsm_output : STD_LOGIC_VECTOR (17 DOWNTO 0);
  SIGNAL and_dcpl_24 : STD_LOGIC;
  SIGNAL or_dcpl_30 : STD_LOGIC;
  SIGNAL or_dcpl_33 : STD_LOGIC;
  SIGNAL exit_LOOP_OUT_sva_mx0 : STD_LOGIC;
  SIGNAL exit_LOOP_HEIGHT_sva_mx0 : STD_LOGIC;
  SIGNAL exit_LOOP_WIDTH_sva_mx0 : STD_LOGIC;
  SIGNAL exit_for_for_sva_mx0 : STD_LOGIC;
  SIGNAL for_acc_2_cse_sva_7 : STD_LOGIC;
  SIGNAL LOOP_Y_stage_0 : STD_LOGIC;
  SIGNAL LOOP_Y_stage_0_4 : STD_LOGIC;
  SIGNAL LOOP_Y_asn_16_itm_3 : STD_LOGIC;
  SIGNAL LOOP_Y_stage_0_3 : STD_LOGIC;
  SIGNAL LOOP_Y_stage_0_2 : STD_LOGIC;
  SIGNAL exit_LOOP_Y_sva_st_2 : STD_LOGIC;
  SIGNAL exit_LOOP_Y_sva_st_1 : STD_LOGIC;
  SIGNAL exit_LOOP_Y_sva_3 : STD_LOGIC;
  SIGNAL reg_input_triosy_obj_ld_cse : STD_LOGIC;
  SIGNAL i_or_cse : STD_LOGIC;
  SIGNAL j_or_cse : STD_LOGIC;
  SIGNAL temp_lpi_7_dfm : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL for_for_for_acc_itm_1 : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL LOOP_Y_mul_2_itm_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL LOOP_Y_acc_14_itm_1_8_7 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL LOOP_Y_acc_14_itm_1_6_0 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_mul_1_itm_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL padded_width_acc_psp_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_mul_3_itm_1_6_0 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL for_for_for_mul_1_itm_1_7_0 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_WIDTH_mul_2_itm : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL j_sva_6_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL j_sva_0 : STD_LOGIC;
  SIGNAL LOOP_WIDTH_mul_1_itm_13_12 : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL LOOP_WIDTH_mul_1_itm_11_7 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL LOOP_WIDTH_mul_1_itm_6_0 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_mul_3_itm : STD_LOGIC_VECTOR (17 DOWNTO 0);
  SIGNAL LOOP_Y_acc_14_itm : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm : STD_LOGIC_VECTOR
      (4 DOWNTO 0);
  SIGNAL z_out : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL z_out_6 : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL padded_height_7_1_sva : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL filter_size_3_0_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL for_c_sva : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL x_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL temp_lpi_7 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL y_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL LOOP_Y_mul_5_itm_1 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL LOOP_Y_asn_12_itm_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL LOOP_Y_acc_15_itm_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm_1 : STD_LOGIC_VECTOR
      (4 DOWNTO 0);
  SIGNAL i_sva_6_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL i_sva_0 : STD_LOGIC;
  SIGNAL for_c_sva_mx0c1 : STD_LOGIC;
  SIGNAL for_c_sva_2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_for_h_sva_1_mx0w2 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL for_for_for_mul_1_itm_1_mx0w0 : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL out_c_sva_1_mx0w2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL x_sva_3 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL temp_sva_2 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL i_sva_2 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_mul_3_itm_1_17_7 : STD_LOGIC_VECTOR (10 DOWNTO 0);
  SIGNAL LOOP_Y_mul_5_itm_2_10_7 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL LOOP_Y_mul_5_itm_2_6_0 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL reg_for_for_for_mul_4_itm_1_cse : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL x_or_cse : STD_LOGIC;
  SIGNAL LOOP_WIDTH_acc_9_itm : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_Y_acc_10_itm : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL LOOP_Y_or_itm : STD_LOGIC;
  SIGNAL LOOP_Y_acc_4_itm : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_acc_2_itm_7_1 : STD_LOGIC;
  SIGNAL for_for_for_acc_10_itm_7_1 : STD_LOGIC;
  SIGNAL for_acc_4_itm_8_1 : STD_LOGIC;
  SIGNAL z_out_4_3 : STD_LOGIC;
  SIGNAL z_out_5_7 : STD_LOGIC;

  SIGNAL for_c_for_c_and_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_c_mux_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL out_c_nor_nl : STD_LOGIC;
  SIGNAL and_109_nl : STD_LOGIC;
  SIGNAL for_for_for_mux_13_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL for_for_for_mux_14_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_Y_mux_15_nl : STD_LOGIC;
  SIGNAL LOOP_Y_LOOP_Y_and_nl : STD_LOGIC;
  SIGNAL LOOP_Y_mux_16_nl : STD_LOGIC;
  SIGNAL LOOP_Y_LOOP_Y_and_1_nl : STD_LOGIC;
  SIGNAL LOOP_Y_mux_17_nl : STD_LOGIC;
  SIGNAL for_for_h_for_for_h_and_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL for_for_h_mux_1_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL for_for_h_or_nl : STD_LOGIC;
  SIGNAL for_for_h_for_for_h_and_1_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL for_for_for_acc_7_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_WIDTH_acc_6_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_LOOP_Y_nor_nl : STD_LOGIC;
  SIGNAL and_60_nl : STD_LOGIC;
  SIGNAL temp_mux_nl : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL not_89_nl : STD_LOGIC;
  SIGNAL LOOP_Y_acc_13_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL for_for_for_for_for_for_and_3_nl : STD_LOGIC;
  SIGNAL for_for_for_mux_12_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_for_for_acc_13_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_acc_2_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_for_acc_3_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_for_for_acc_10_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_OUT_acc_2_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_OUT_acc_3_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL LOOP_HEIGHT_acc_5_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_WIDTH_acc_8_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_WIDTH_acc_12_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_acc_4_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL LOOP_Y_acc_nl : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL for_for_for_acc_12_nl : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL LOOP_WIDTH_acc_11_nl : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL LOOP_WIDTH_acc_10_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_for_for_for_for_for_and_2_nl : STD_LOGIC;
  SIGNAL for_for_for_mux_11_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL filter_size_filter_size_and_1_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL filter_size_mux_3_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL LOOP_WIDTH_LOOP_WIDTH_and_2_nl : STD_LOGIC;
  SIGNAL LOOP_WIDTH_mux_5_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_WIDTH_LOOP_WIDTH_and_3_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL LOOP_WIDTH_mux_6_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_mux_19_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL acc_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL LOOP_Y_mux_20_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL for_for_acc_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL LOOP_Y_LOOP_Y_and_8_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL LOOP_Y_mux_21_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL LOOP_Y_LOOP_Y_and_9_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL LOOP_Y_mux_22_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL not_93_nl : STD_LOGIC;
  SIGNAL LOOP_Y_LOOP_Y_and_10_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL LOOP_Y_mux_23_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL LOOP_Y_not_3_nl : STD_LOGIC;
  SIGNAL LOOP_Y_mux1h_55_nl : STD_LOGIC;
  SIGNAL LOOP_Y_mux1h_56_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr : STD_LOGIC_VECTOR
      (18 DOWNTO 0);
  SIGNAL LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_data_out : STD_LOGIC_VECTOR
      (4 DOWNTO 0);

  COMPONENT UNET_IP_conv2d_run_conv_run_conv_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      arst_n : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (17 DOWNTO 0);
      main_C_0_tr0 : IN STD_LOGIC;
      for_C_0_tr0 : IN STD_LOGIC;
      for_for_for_C_0_tr0 : IN STD_LOGIC;
      for_for_C_0_tr0 : IN STD_LOGIC;
      for_C_1_tr0 : IN STD_LOGIC;
      main_C_1_tr0 : IN STD_LOGIC;
      LOOP_OUT_C_0_tr0 : IN STD_LOGIC;
      LOOP_IN_C_0_tr0 : IN STD_LOGIC;
      LOOP_HEIGHT_C_0_tr0 : IN STD_LOGIC;
      LOOP_Y_C_0_tr0 : IN STD_LOGIC;
      LOOP_X_C_0_tr0 : IN STD_LOGIC;
      LOOP_WIDTH_C_2_tr0 : IN STD_LOGIC;
      LOOP_HEIGHT_C_1_tr0 : IN STD_LOGIC;
      LOOP_IN_C_1_tr0 : IN STD_LOGIC;
      LOOP_OUT_C_1_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL UNET_IP_conv2d_run_conv_run_conv_fsm_inst_fsm_output : STD_LOGIC_VECTOR
      (17 DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_run_conv_fsm_inst_main_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_for_for_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_C_1_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_OUT_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_Y_C_0_tr0 : STD_LOGIC;
  SIGNAL UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_IN_C_1_tr0 : STD_LOGIC;

  FUNCTION CONV_SL_1_1(input_val:BOOLEAN)
  RETURN STD_LOGIC IS
  BEGIN
    IF input_val THEN RETURN '1';ELSE RETURN '0';END IF;
  END;

  FUNCTION MUX1HOT_s_1_3_2(input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_7_3_2(input_2 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_12_2_2(input_0 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(11 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(11 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_2_2_2(input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_3_2_2(input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_2_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_5_2_2(input_0 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(4 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_6_2_2(input_0 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(5 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_7_2_2(input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  input_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_input_triosy_obj_ld_cse,
      lz => input_triosy_lz
    );
  padded_input_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_input_triosy_obj_ld_cse,
      lz => padded_input_triosy_lz
    );
  output_triosy_obj : mgc_hls.mgc_io_sync_pkg_v2.mgc_io_sync_v2
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_input_triosy_obj_ld_cse,
      lz => output_triosy_lz
    );
  LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg : mgc_hls.unet_ip_conv2dmgc_rom_12_485120_5_1_pkg.UNET_IP_conv2dmgc_rom_12_485120_5_1
    PORT MAP(
      addr => LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr,
      data_out => LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_data_out
    );
  LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_Y_mul_3_itm_1_17_7
      & LOOP_Y_mul_3_itm_1_6_0), 18), 19) + CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_Y_mul_5_itm_2_10_7
      & LOOP_Y_mul_5_itm_2_6_0), 11), 12) + CONV_SIGNED(CONV_SIGNED(SIGNED(LOOP_Y_acc_15_itm_1),
      6), 12), 12), 19), 19), 19) + UNSIGNED(filter_offset(18 DOWNTO 0)), 19));
  LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm <= LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_data_out;

  UNET_IP_conv2d_run_conv_run_conv_fsm_inst : UNET_IP_conv2d_run_conv_run_conv_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      arst_n => arst_n,
      fsm_output => UNET_IP_conv2d_run_conv_run_conv_fsm_inst_fsm_output,
      main_C_0_tr0 => UNET_IP_conv2d_run_conv_run_conv_fsm_inst_main_C_0_tr0,
      for_C_0_tr0 => exit_for_for_sva_mx0,
      for_for_for_C_0_tr0 => UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_for_for_C_0_tr0,
      for_for_C_0_tr0 => exit_for_for_sva_mx0,
      for_C_1_tr0 => UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_C_1_tr0,
      main_C_1_tr0 => exit_LOOP_OUT_sva_mx0,
      LOOP_OUT_C_0_tr0 => UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_OUT_C_0_tr0,
      LOOP_IN_C_0_tr0 => exit_LOOP_HEIGHT_sva_mx0,
      LOOP_HEIGHT_C_0_tr0 => exit_LOOP_WIDTH_sva_mx0,
      LOOP_Y_C_0_tr0 => UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_Y_C_0_tr0,
      LOOP_X_C_0_tr0 => z_out_4_3,
      LOOP_WIDTH_C_2_tr0 => exit_LOOP_WIDTH_sva_mx0,
      LOOP_HEIGHT_C_1_tr0 => exit_LOOP_HEIGHT_sva_mx0,
      LOOP_IN_C_1_tr0 => UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_IN_C_1_tr0,
      LOOP_OUT_C_1_tr0 => exit_LOOP_OUT_sva_mx0
    );
  fsm_output <= UNET_IP_conv2d_run_conv_run_conv_fsm_inst_fsm_output;
  UNET_IP_conv2d_run_conv_run_conv_fsm_inst_main_C_0_tr0 <= NOT for_acc_2_itm_7_1;
  UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_for_for_C_0_tr0 <= NOT(LOOP_Y_stage_0_3
      OR LOOP_Y_stage_0_4 OR LOOP_Y_asn_16_itm_3);
  UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_C_1_tr0 <= NOT for_acc_4_itm_8_1;
  UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_OUT_C_0_tr0 <= NOT for_acc_2_cse_sva_7;
  UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_Y_C_0_tr0 <= NOT(LOOP_Y_stage_0
      OR LOOP_Y_stage_0_2 OR LOOP_Y_stage_0_3);
  UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_IN_C_1_tr0 <= NOT for_acc_4_itm_8_1;

  LOOP_Y_mul_3_itm <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(reg_for_for_for_mul_4_itm_1_cse)
      * UNSIGNED(filter_size_3_0_sva)), 18));
  LOOP_Y_acc_14_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(j_sva_6_1
      & j_sva_0), 7), 9) + CONV_SIGNED(CONV_SIGNED(SIGNED(y_sva), 3), 9), 9));
  i_or_cse <= (fsm_output(7)) OR (fsm_output(14));
  j_or_cse <= (fsm_output(8)) OR (fsm_output(13));
  x_or_cse <= j_or_cse OR (fsm_output(10));
  for_acc_2_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT in_channels)) +
      SIGNED'( "00000001"), 8));
  for_acc_2_itm_7_1 <= for_acc_2_nl(7);
  for_c_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_c_sva(6
      DOWNTO 0)), 7), 8) + UNSIGNED'( "00000001"), 8));
  for_for_acc_3_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & for_for_h_sva_1_mx0w2)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT height), 7), 8) + UNSIGNED'( "00000001"),
      8));
  exit_for_for_sva_mx0 <= MUX_s_1_2_2((NOT z_out_5_7), (NOT (for_for_acc_3_nl(7))),
      fsm_output(3));
  for_for_h_sva_1_mx0w2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(LOOP_WIDTH_mul_1_itm_6_0)
      + UNSIGNED'( "0000001"), 7));
  for_for_for_mul_1_itm_1_mx0w0 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(for_c_sva)
      * UNSIGNED(padded_height_7_1_sva & (height(0)))), 15));
  for_for_for_acc_10_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & LOOP_Y_acc_14_itm_1_6_0)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(NOT width), 7), 8) + UNSIGNED'( "00000001"),
      8));
  for_for_for_acc_10_itm_7_1 <= for_for_for_acc_10_nl(7);
  LOOP_OUT_acc_2_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT out_channels))
      + SIGNED'( "00000001"), 8));
  LOOP_OUT_acc_3_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & out_c_sva_1_mx0w2)
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED('1' & (NOT out_channels)), 8), 9) +
      UNSIGNED'( "000000001"), 9));
  exit_LOOP_OUT_sva_mx0 <= MUX_s_1_2_2((NOT (LOOP_OUT_acc_2_nl(7))), (NOT (LOOP_OUT_acc_3_nl(8))),
      fsm_output(16));
  out_c_sva_1_mx0w2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_for_for_mul_1_itm_1_7_0(6
      DOWNTO 0)), 7), 8) + UNSIGNED'( "00000001"), 8));
  LOOP_HEIGHT_acc_5_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & i_sva_2) + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(NOT
      height), 7), 8) + CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(NOT (kernel_size(1)),
      1), 1), 8), 8));
  exit_LOOP_HEIGHT_sva_mx0 <= MUX_s_1_2_2((NOT z_out_5_7), (NOT (LOOP_HEIGHT_acc_5_nl(7))),
      fsm_output(14));
  LOOP_WIDTH_acc_8_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT width)) +
      SIGNED'( "00000001"), 8));
  LOOP_WIDTH_acc_12_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & LOOP_Y_mul_5_itm_2_6_0)
      + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(NOT width), 7), 8) + CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(NOT
      (kernel_size(1)), 1), 1), 8), 8));
  exit_LOOP_WIDTH_sva_mx0 <= MUX_s_1_2_2((NOT (LOOP_WIDTH_acc_8_nl(7))), (NOT (LOOP_WIDTH_acc_12_nl(7))),
      fsm_output(13));
  x_sva_3 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(x_sva) + SIGNED'( "001"), 3));
  temp_sva_2 <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(temp_lpi_7) + SIGNED(z_out_2(11
      DOWNTO 0)), 12));
  i_sva_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(i_sva_6_1 & i_sva_0) + UNSIGNED'(
      "0000001"), 7));
  for_acc_4_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & for_c_sva_2) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED('1'
      & (NOT in_channels)), 8), 9) + UNSIGNED'( "000000001"), 9));
  for_acc_4_itm_8_1 <= for_acc_4_nl(8);
  and_dcpl_24 <= NOT((fsm_output(0)) OR (fsm_output(17)));
  or_dcpl_30 <= (fsm_output(1)) OR (fsm_output(3));
  or_dcpl_33 <= or_dcpl_30 OR (fsm_output(2));
  for_c_sva_mx0c1 <= (fsm_output(15)) OR (fsm_output(4));
  input_rsci_radr_d <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_for_for_acc_itm_1),
      14), 15) + UNSIGNED(z_out_6), 15));
  input_rsci_re_d_pff <= (NOT LOOP_Y_stage_0) AND LOOP_Y_stage_0_4 AND (fsm_output(2));
  LOOP_Y_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(LOOP_Y_mul_2_itm_1) + CONV_SIGNED(CONV_SIGNED(SIGNED(LOOP_Y_acc_14_itm_1_8_7
      & LOOP_Y_acc_14_itm_1_6_0), 9), 16), 16));
  padded_input_rsci_radr_d <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED(LOOP_Y_acc_nl),
      16) + UNSIGNED(z_out_3), 16));
  padded_input_rsci_re_d_pff <= LOOP_Y_stage_0_2 AND (NOT exit_LOOP_Y_sva_st_1) AND
      (fsm_output(9));
  for_for_for_acc_12_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(LOOP_Y_mul_2_itm_1(14
      DOWNTO 0)) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_Y_mul_3_itm_1_6_0),
      7), 15) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(padding), 2), 15), 15));
  padded_input_rsci_wadr_d <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_for_for_acc_12_nl),
      16) + UNSIGNED(z_out_3), 16));
  padded_input_rsci_we_d_pff <= (NOT LOOP_Y_stage_0_2) AND LOOP_Y_asn_16_itm_3 AND
      (fsm_output(2));
  output_rsci_d_d <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(temp_lpi_7_dfm(11 DOWNTO
      4)),12));
  LOOP_WIDTH_acc_10_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(j_sva_6_1
      & j_sva_0), 7), 8) + CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(kernel_size(1), 1),
      1), 8), 8));
  LOOP_WIDTH_acc_11_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(LOOP_WIDTH_mul_2_itm)
      + CONV_SIGNED(SIGNED(LOOP_WIDTH_acc_10_nl), 15), 15));
  output_rsci_wadr_d <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED(LOOP_WIDTH_acc_11_nl),
      15) + UNSIGNED(z_out_6), 15));
  output_rsci_we_d_pff <= fsm_output(12);
  LOOP_WIDTH_acc_9_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & i_sva_6_1 & i_sva_0)
      + CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR'( "111111") & (NOT (kernel_size(1)))),
      7), 8) + SIGNED'( "00000001"), 8));
  LOOP_Y_acc_10_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(x_sva),
      3), 4) + CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(kernel_size(1), 1), 1), 4),
      4));
  LOOP_Y_or_itm <= (fsm_output(2)) OR (fsm_output(12));
  LOOP_Y_acc_4_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(i_sva_6_1
      & i_sva_0), 7), 9) + CONV_SIGNED(CONV_SIGNED(SIGNED(x_sva), 3), 9), 9));
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( and_dcpl_24 = '0' ) THEN
        padded_width_acc_psp_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(width(6
            DOWNTO 1)), 6), 7) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(padding), 2),
            7), 7));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( and_dcpl_24 = '0' ) THEN
        filter_size_3_0_sva <= z_out_1(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( and_dcpl_24 = '0' ) THEN
        padded_height_7_1_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(height(6
            DOWNTO 1)), 6), 7) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(padding), 2),
            7), 7));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      for_acc_2_cse_sva_7 <= '0';
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_acc_2_cse_sva_7 <= '0';
      ELSIF ( and_dcpl_24 = '0' ) THEN
        for_acc_2_cse_sva_7 <= for_acc_2_itm_7_1;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      reg_input_triosy_obj_ld_cse <= '0';
      LOOP_Y_stage_0 <= '0';
      LOOP_Y_stage_0_2 <= '0';
      LOOP_Y_stage_0_3 <= '0';
      LOOP_Y_stage_0_4 <= '0';
      LOOP_Y_asn_16_itm_3 <= '0';
      exit_LOOP_Y_sva_3 <= '0';
      exit_LOOP_Y_sva_st_2 <= '0';
      exit_LOOP_Y_sva_st_1 <= '0';
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reg_input_triosy_obj_ld_cse <= '0';
        LOOP_Y_stage_0 <= '0';
        LOOP_Y_stage_0_2 <= '0';
        LOOP_Y_stage_0_3 <= '0';
        LOOP_Y_stage_0_4 <= '0';
        LOOP_Y_asn_16_itm_3 <= '0';
        exit_LOOP_Y_sva_3 <= '0';
        exit_LOOP_Y_sva_st_2 <= '0';
        exit_LOOP_Y_sva_st_1 <= '0';
      ELSE
        reg_input_triosy_obj_ld_cse <= exit_LOOP_OUT_sva_mx0 AND ((fsm_output(5))
            OR (fsm_output(16)));
        LOOP_Y_stage_0 <= LOOP_Y_mux_15_nl OR x_or_cse;
        LOOP_Y_stage_0_2 <= LOOP_Y_stage_0 AND (NOT x_or_cse);
        LOOP_Y_stage_0_3 <= (LOOP_Y_mux_16_nl AND (NOT x_or_cse)) OR or_dcpl_30;
        LOOP_Y_stage_0_4 <= LOOP_Y_stage_0_3 AND ((fsm_output(9)) OR (fsm_output(2)));
        LOOP_Y_asn_16_itm_3 <= LOOP_Y_mux_17_nl AND (NOT or_dcpl_30);
        exit_LOOP_Y_sva_3 <= exit_LOOP_Y_sva_st_2;
        exit_LOOP_Y_sva_st_2 <= exit_LOOP_Y_sva_st_1;
        exit_LOOP_Y_sva_st_1 <= z_out_4_3;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((fsm_output(6)) OR (fsm_output(0)) OR for_c_sva_mx0c1) = '1' ) THEN
        for_c_sva <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), for_c_sva_2, for_c_sva_mx0c1);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      for_for_for_mul_1_itm_1_7_0 <= MUX_v_8_2_2((for_for_for_mul_1_itm_1_mx0w0(7
          DOWNTO 0)), for_c_for_c_and_nl, and_109_nl);
      for_for_for_acc_itm_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out(13 DOWNTO
          0)) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_Y_acc_14_itm_1_6_0), 7),
          14), 14));
      reg_for_for_for_mul_4_itm_1_cse <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'(
          UNSIGNED(for_for_for_mux_13_nl) * UNSIGNED(for_for_for_mux_14_nl)), 14));
      LOOP_WIDTH_mul_1_itm_13_12 <= z_out_2(13 DOWNTO 12);
      LOOP_WIDTH_mul_1_itm_11_7 <= MUX_v_5_2_2((padded_input_rsci_q_d(11 DOWNTO 7)),
          (z_out_2(11 DOWNTO 7)), fsm_output(11));
      LOOP_WIDTH_mul_1_itm_6_0 <= MUX1HOT_v_7_3_2(for_for_h_for_for_h_and_nl, (padded_input_rsci_q_d(6
          DOWNTO 0)), (z_out_2(6 DOWNTO 0)), STD_LOGIC_VECTOR'( or_dcpl_33 & (fsm_output(9))
          & (fsm_output(11))));
      LOOP_Y_mul_3_itm_1_17_7 <= LOOP_Y_mul_3_itm(17 DOWNTO 7);
      LOOP_Y_mul_3_itm_1_6_0 <= MUX_v_7_2_2(LOOP_Y_mul_5_itm_2_6_0, (LOOP_Y_mul_3_itm(6
          DOWNTO 0)), fsm_output(9));
      LOOP_Y_acc_14_itm_1_8_7 <= LOOP_Y_acc_14_itm(8 DOWNTO 7);
      LOOP_Y_acc_14_itm_1_6_0 <= MUX_v_7_2_2(for_for_h_for_for_h_and_1_nl, (LOOP_Y_acc_14_itm(6
          DOWNTO 0)), fsm_output(9));
      LOOP_Y_mul_5_itm_2_10_7 <= LOOP_Y_mul_5_itm_1(10 DOWNTO 7);
      LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm_1 <= LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm;
      y_sva <= MUX_v_3_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(kernel_size(1),
          1),3)), STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(LOOP_Y_acc_13_nl), 3)), fsm_output(9));
      LOOP_Y_acc_15_itm_1 <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_SIGNED(SIGNED(z_out_1),
          5), 6) + CONV_SIGNED(CONV_SIGNED(SIGNED(LOOP_Y_asn_12_itm_1), 3), 6) +
          CONV_SIGNED(CONV_UNSIGNED(CONV_UNSIGNED(kernel_size(1), 1), 1), 6), 6));
      LOOP_Y_mul_2_itm_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(SIGNED'( CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(padded_width_acc_psp_sva
          & (width(0))), 8), 9) * SIGNED(for_for_for_for_for_for_and_3_nl & for_for_for_mux_12_nl)),
          16));
      LOOP_Y_mul_1_itm_1 <= for_for_for_mul_1_itm_1_mx0w0;
      LOOP_Y_asn_12_itm_1 <= y_sva;
      LOOP_Y_mul_5_itm_1 <= z_out_6(10 DOWNTO 0);
      LOOP_WIDTH_mul_2_itm <= z_out;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (fsm_output(12)) = '0' ) THEN
        LOOP_Y_mul_5_itm_2_6_0 <= MUX1HOT_v_7_3_2(LOOP_Y_acc_14_itm_1_6_0, STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(LOOP_WIDTH_acc_6_nl),
            7)), (LOOP_Y_mul_5_itm_1(6 DOWNTO 0)), STD_LOGIC_VECTOR'( LOOP_Y_LOOP_Y_nor_nl
            & (fsm_output(11)) & (fsm_output(9))));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( i_or_cse = '1' ) THEN
        i_sva_6_1 <= MUX_v_6_2_2(STD_LOGIC_VECTOR'("000000"), (i_sva_2(6 DOWNTO 1)),
            (fsm_output(14)));
        i_sva_0 <= MUX_s_1_2_2((kernel_size(1)), (i_sva_2(0)), fsm_output(14));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( (NOT((NOT LOOP_Y_stage_0_4) OR CONV_SL_1_1(fsm_output(11 DOWNTO 10)/=STD_LOGIC_VECTOR'("00"))))
          = '1' ) THEN
        temp_lpi_7_dfm <= MUX_v_12_2_2(temp_lpi_7, temp_sva_2, and_60_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( ((NOT((NOT LOOP_Y_stage_0_4) OR exit_LOOP_Y_sva_3 OR LOOP_Y_asn_16_itm_3))
          OR j_or_cse OR (fsm_output(10))) = '1' ) THEN
        temp_lpi_7 <= MUX_v_12_2_2(STD_LOGIC_VECTOR'("000000000000"), temp_mux_nl,
            not_89_nl);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( j_or_cse = '1' ) THEN
        j_sva_6_1 <= MUX_v_6_2_2(STD_LOGIC_VECTOR'("000000"), (LOOP_Y_mul_5_itm_2_6_0(6
            DOWNTO 1)), (fsm_output(13)));
        j_sva_0 <= MUX_s_1_2_2((kernel_size(1)), (LOOP_Y_mul_5_itm_2_6_0(0)), fsm_output(13));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF ( x_or_cse = '1' ) THEN
        x_sva <= MUX_v_3_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(kernel_size(1),
            1),3)), x_sva_3, fsm_output(10));
      END IF;
    END IF;
  END PROCESS;
  LOOP_Y_LOOP_Y_and_nl <= LOOP_Y_stage_0 AND (NOT z_out_4_3);
  LOOP_Y_mux_15_nl <= MUX_s_1_2_2((NOT for_for_for_acc_10_itm_7_1), LOOP_Y_LOOP_Y_and_nl,
      fsm_output(9));
  LOOP_Y_LOOP_Y_and_1_nl <= LOOP_Y_stage_0_3 AND for_for_for_acc_10_itm_7_1;
  LOOP_Y_mux_16_nl <= MUX_s_1_2_2(LOOP_Y_LOOP_Y_and_1_nl, LOOP_Y_stage_0_2, fsm_output(9));
  LOOP_Y_mux_17_nl <= MUX_s_1_2_2(LOOP_Y_stage_0_4, exit_LOOP_Y_sva_st_2, fsm_output(9));
  for_c_mux_nl <= MUX_v_8_2_2(for_for_for_mul_1_itm_1_7_0, out_c_sva_1_mx0w2, fsm_output(16));
  out_c_nor_nl <= NOT((fsm_output(0)) OR (fsm_output(17)) OR (fsm_output(5)) OR (fsm_output(4))
      OR or_dcpl_33);
  for_c_for_c_and_nl <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), for_c_mux_nl,
      out_c_nor_nl);
  and_109_nl <= and_dcpl_24 AND CONV_SL_1_1(fsm_output(4 DOWNTO 1)=STD_LOGIC_VECTOR'("0000"));
  for_for_for_mux_13_nl <= MUX_v_7_2_2(height, in_channels, fsm_output(9));
  for_for_for_mux_14_nl <= MUX_v_8_2_2(for_c_sva, for_for_for_mul_1_itm_1_7_0, fsm_output(9));
  for_for_h_mux_1_nl <= MUX_v_7_2_2(LOOP_WIDTH_mul_1_itm_6_0, for_for_h_sva_1_mx0w2,
      fsm_output(3));
  for_for_h_or_nl <= CONV_SL_1_1(fsm_output(3 DOWNTO 2)/=STD_LOGIC_VECTOR'("00"));
  for_for_h_for_for_h_and_nl <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), for_for_h_mux_1_nl,
      for_for_h_or_nl);
  for_for_for_acc_7_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(LOOP_Y_acc_14_itm_1_6_0)
      + UNSIGNED'( "0000001"), 7));
  for_for_h_for_for_h_and_1_nl <= MUX_v_7_2_2(STD_LOGIC_VECTOR'("0000000"), STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_for_for_acc_7_nl),
      7)), (fsm_output(2)));
  LOOP_Y_acc_13_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(y_sva) + SIGNED'( "001"),
      3));
  for_for_for_for_for_for_and_3_nl <= (LOOP_Y_acc_4_itm(8)) AND (fsm_output(9));
  for_for_for_acc_13_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_WIDTH_mul_1_itm_6_0),
      7), 8) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(padding), 2), 8), 8));
  for_for_for_mux_12_nl <= MUX_v_8_2_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_for_for_acc_13_nl),
      8)), (LOOP_Y_acc_4_itm(7 DOWNTO 0)), fsm_output(9));
  LOOP_WIDTH_acc_6_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(j_sva_6_1 & j_sva_0)
      + UNSIGNED'( "0000001"), 7));
  LOOP_Y_LOOP_Y_nor_nl <= NOT((fsm_output(11)) OR (fsm_output(9)));
  and_60_nl <= LOOP_Y_stage_0_4 AND (NOT exit_LOOP_Y_sva_3);
  temp_mux_nl <= MUX_v_12_2_2(temp_sva_2, temp_lpi_7_dfm, fsm_output(10));
  not_89_nl <= NOT j_or_cse;
  for_for_for_for_for_for_and_2_nl <= (LOOP_WIDTH_acc_9_itm(7)) AND (fsm_output(11));
  for_for_for_mux_11_nl <= MUX_v_7_2_2(LOOP_WIDTH_mul_1_itm_6_0, (LOOP_WIDTH_acc_9_itm(6
      DOWNTO 0)), fsm_output(11));
  z_out <= STD_LOGIC_VECTOR(CONV_UNSIGNED(SIGNED'( CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(width),
      7), 8) * SIGNED(for_for_for_for_for_for_and_2_nl & for_for_for_mux_11_nl)),
      15));
  filter_size_filter_size_and_1_nl <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), (LOOP_Y_acc_10_itm(3
      DOWNTO 2)), (fsm_output(9)));
  filter_size_mux_3_nl <= MUX_v_2_2_2(kernel_size, (LOOP_Y_acc_10_itm(1 DOWNTO 0)),
      fsm_output(9));
  z_out_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(SIGNED'( CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(kernel_size),
      2), 3) * SIGNED(filter_size_filter_size_and_1_nl & filter_size_mux_3_nl)),
      5));
  LOOP_WIDTH_LOOP_WIDTH_and_2_nl <= (LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm_1(4))
      AND (fsm_output(9));
  LOOP_WIDTH_mux_5_nl <= MUX_v_7_2_2((for_for_for_mul_1_itm_1_7_0(6 DOWNTO 0)), STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm_1),7)),
      fsm_output(9));
  LOOP_WIDTH_LOOP_WIDTH_and_3_nl <= MUX_v_5_2_2(STD_LOGIC_VECTOR'("00000"), LOOP_WIDTH_mul_1_itm_11_7,
      (fsm_output(9)));
  LOOP_WIDTH_mux_6_nl <= MUX_v_7_2_2(height, LOOP_WIDTH_mul_1_itm_6_0, fsm_output(9));
  z_out_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(SIGNED'( SIGNED(LOOP_WIDTH_LOOP_WIDTH_and_2_nl
      & LOOP_WIDTH_mux_5_nl) * CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(LOOP_WIDTH_LOOP_WIDTH_and_3_nl
      & LOOP_WIDTH_mux_6_nl), 12), 13)), 14));
  LOOP_Y_mux_19_nl <= MUX_v_8_2_2((LOOP_Y_mul_1_itm_1(7 DOWNTO 0)), for_for_for_mul_1_itm_1_7_0,
      fsm_output(2));
  z_out_3 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(padded_width_acc_psp_sva
      & (width(0))) * UNSIGNED((LOOP_Y_mul_1_itm_1(14 DOWNTO 8)) & LOOP_Y_mux_19_nl)),
      16));
  LOOP_Y_mux_20_nl <= MUX_v_3_2_2((NOT y_sva), (NOT x_sva_3), fsm_output(10));
  acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_SIGNED(SIGNED(LOOP_Y_mux_20_nl
      & '1'), 4), 5) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED'( (kernel_size(1)) &
      '1'), 2), 5), 5));
  z_out_4_3 <= acc_nl(4);
  for_for_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED('1' & (NOT height)) +
      UNSIGNED'( "00000001"), 8));
  z_out_5_7 <= for_for_acc_nl(7);
  LOOP_Y_LOOP_Y_and_8_nl <= MUX_v_3_2_2(STD_LOGIC_VECTOR'("000"), (width(6 DOWNTO
      4)), LOOP_Y_or_itm);
  LOOP_Y_mux_21_nl <= MUX_v_4_2_2(filter_size_3_0_sva, (width(3 DOWNTO 0)), LOOP_Y_or_itm);
  LOOP_Y_mux_22_nl <= MUX_v_2_2_2((reg_for_for_for_mul_4_itm_1_cse(13 DOWNTO 12)),
      LOOP_WIDTH_mul_1_itm_13_12, fsm_output(12));
  not_93_nl <= NOT (fsm_output(9));
  LOOP_Y_LOOP_Y_and_9_nl <= MUX_v_2_2_2(STD_LOGIC_VECTOR'("00"), LOOP_Y_mux_22_nl,
      not_93_nl);
  LOOP_Y_mux_23_nl <= MUX_v_4_2_2((reg_for_for_for_mul_4_itm_1_cse(11 DOWNTO 8)),
      (LOOP_WIDTH_mul_1_itm_11_7(4 DOWNTO 1)), fsm_output(12));
  LOOP_Y_not_3_nl <= NOT (fsm_output(9));
  LOOP_Y_LOOP_Y_and_10_nl <= MUX_v_4_2_2(STD_LOGIC_VECTOR'("0000"), LOOP_Y_mux_23_nl,
      LOOP_Y_not_3_nl);
  LOOP_Y_mux1h_55_nl <= MUX1HOT_s_1_3_2((for_c_sva(7)), (reg_for_for_for_mul_4_itm_1_cse(7)),
      (LOOP_WIDTH_mul_1_itm_11_7(0)), STD_LOGIC_VECTOR'( (fsm_output(9)) & (fsm_output(2))
      & (fsm_output(12))));
  LOOP_Y_mux1h_56_nl <= MUX1HOT_v_7_3_2((for_c_sva(6 DOWNTO 0)), (reg_for_for_for_mul_4_itm_1_cse(6
      DOWNTO 0)), LOOP_WIDTH_mul_1_itm_6_0, STD_LOGIC_VECTOR'( (fsm_output(9)) &
      (fsm_output(2)) & (fsm_output(12))));
  z_out_6 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(LOOP_Y_LOOP_Y_and_8_nl
      & LOOP_Y_mux_21_nl) * UNSIGNED(LOOP_Y_LOOP_Y_and_9_nl & LOOP_Y_LOOP_Y_and_10_nl
      & LOOP_Y_mux1h_55_nl & LOOP_Y_mux1h_56_nl)), 15));
END v6;

-- ------------------------------------------------------------------
--  Design Unit:    UNET_IP_conv2d
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.mgc_io_sync_pkg_v2.ALL;


ENTITY UNET_IP_conv2d IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    arst_n : IN STD_LOGIC;
    input_rsc_radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    input_rsc_re : OUT STD_LOGIC;
    input_rsc_q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    input_rsc_clken : OUT STD_LOGIC;
    input_triosy_lz : OUT STD_LOGIC;
    padded_input_rsc_wadr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    padded_input_rsc_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    padded_input_rsc_we : OUT STD_LOGIC;
    padded_input_rsc_radr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    padded_input_rsc_re : OUT STD_LOGIC;
    padded_input_rsc_q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
    padded_input_rsc_clken : OUT STD_LOGIC;
    padded_input_triosy_lz : OUT STD_LOGIC;
    output_rsc_wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
    output_rsc_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    output_rsc_we : OUT STD_LOGIC;
    output_rsc_clken : OUT STD_LOGIC;
    output_triosy_lz : OUT STD_LOGIC;
    height : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    width : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    kernel_size : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    padding : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
    filter_offset : IN STD_LOGIC_VECTOR (19 DOWNTO 0);
    in_channels : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
    out_channels : IN STD_LOGIC_VECTOR (6 DOWNTO 0)
  );
END UNET_IP_conv2d;

ARCHITECTURE v6 OF UNET_IP_conv2d IS
  -- Default Constants
  CONSTANT PWR : STD_LOGIC := '1';

  -- Interconnect Declarations
  SIGNAL input_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL input_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL padded_input_rsci_q_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_radr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL padded_input_rsci_wadr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL output_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_wadr_d : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL input_rsci_re_d_iff : STD_LOGIC;
  SIGNAL padded_input_rsci_re_d_iff : STD_LOGIC;
  SIGNAL padded_input_rsci_we_d_iff : STD_LOGIC;
  SIGNAL output_rsci_we_d_iff : STD_LOGIC;

  COMPONENT UNET_IP_conv2d_Xilinx_RAMS_DIST_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      re : OUT STD_LOGIC;
      radr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      re_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL input_rsci_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL input_rsci_radr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL input_rsci_q_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL input_rsci_radr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);

  COMPONENT UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_2_16_12_34848_1_34848_12_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      q : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      re : OUT STD_LOGIC;
      radr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      q_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      radr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      re_d : IN STD_LOGIC;
      wadr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC;
      readA_r_ram_ir_internal_RMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL padded_input_rsci_q : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_radr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL padded_input_rsci_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_wadr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL padded_input_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_q_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL padded_input_rsci_radr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL padded_input_rsci_wadr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);

  COMPONENT UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_3_15_12_32768_1_32768_12_1_gen
    PORT(
      clken : OUT STD_LOGIC;
      we : OUT STD_LOGIC;
      d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      wadr : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      clken_d : IN STD_LOGIC;
      d_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      wadr_d : IN STD_LOGIC_VECTOR (14 DOWNTO 0);
      we_d : IN STD_LOGIC;
      writeA_w_ram_ir_internal_WMASK_B_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL output_rsci_d : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_wadr : STD_LOGIC_VECTOR (14 DOWNTO 0);
  SIGNAL output_rsci_d_d_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL output_rsci_wadr_d_1 : STD_LOGIC_VECTOR (14 DOWNTO 0);

  COMPONENT UNET_IP_conv2d_run_conv
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      arst_n : IN STD_LOGIC;
      input_triosy_lz : OUT STD_LOGIC;
      padded_input_triosy_lz : OUT STD_LOGIC;
      output_triosy_lz : OUT STD_LOGIC;
      height : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      width : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      kernel_size : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      padding : IN STD_LOGIC_VECTOR (1 DOWNTO 0);
      filter_offset : IN STD_LOGIC_VECTOR (19 DOWNTO 0);
      in_channels : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      out_channels : IN STD_LOGIC_VECTOR (6 DOWNTO 0);
      input_rsci_radr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      padded_input_rsci_q_d : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
      padded_input_rsci_radr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      padded_input_rsci_wadr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      output_rsci_d_d : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      output_rsci_wadr_d : OUT STD_LOGIC_VECTOR (14 DOWNTO 0);
      input_rsci_re_d_pff : OUT STD_LOGIC;
      padded_input_rsci_re_d_pff : OUT STD_LOGIC;
      padded_input_rsci_we_d_pff : OUT STD_LOGIC;
      output_rsci_we_d_pff : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL UNET_IP_conv2d_run_conv_inst_height : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_width : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_kernel_size : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_padding : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_filter_offset : STD_LOGIC_VECTOR (19 DOWNTO
      0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_in_channels : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_out_channels : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_input_rsci_radr_d : STD_LOGIC_VECTOR (14 DOWNTO
      0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_padded_input_rsci_q_d : STD_LOGIC_VECTOR (11
      DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_padded_input_rsci_radr_d : STD_LOGIC_VECTOR
      (15 DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_padded_input_rsci_wadr_d : STD_LOGIC_VECTOR
      (15 DOWNTO 0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_output_rsci_d_d : STD_LOGIC_VECTOR (11 DOWNTO
      0);
  SIGNAL UNET_IP_conv2d_run_conv_inst_output_rsci_wadr_d : STD_LOGIC_VECTOR (14 DOWNTO
      0);

BEGIN
  input_rsci : UNET_IP_conv2d_Xilinx_RAMS_DIST_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
    PORT MAP(
      clken => input_rsc_clken,
      q => input_rsci_q,
      re => input_rsc_re,
      radr => input_rsci_radr,
      clken_d => '1',
      q_d => input_rsci_q_d_1,
      radr_d => input_rsci_radr_d_1,
      re_d => input_rsci_re_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => input_rsci_re_d_iff
    );
  input_rsci_q <= input_rsc_q;
  input_rsc_radr <= input_rsci_radr;
  input_rsci_q_d <= input_rsci_q_d_1;
  input_rsci_radr_d_1 <= input_rsci_radr_d;

  padded_input_rsci : UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_2_16_12_34848_1_34848_12_1_gen
    PORT MAP(
      clken => padded_input_rsc_clken,
      q => padded_input_rsci_q,
      re => padded_input_rsc_re,
      radr => padded_input_rsci_radr,
      we => padded_input_rsc_we,
      d => padded_input_rsci_d,
      wadr => padded_input_rsci_wadr,
      clken_d => '1',
      d_d => padded_input_rsci_d_d,
      q_d => padded_input_rsci_q_d_1,
      radr_d => padded_input_rsci_radr_d_1,
      re_d => padded_input_rsci_re_d_iff,
      wadr_d => padded_input_rsci_wadr_d_1,
      we_d => padded_input_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => padded_input_rsci_we_d_iff,
      readA_r_ram_ir_internal_RMASK_B_d => padded_input_rsci_re_d_iff
    );
  padded_input_rsci_q <= padded_input_rsc_q;
  padded_input_rsc_radr <= padded_input_rsci_radr;
  padded_input_rsc_d <= padded_input_rsci_d;
  padded_input_rsc_wadr <= padded_input_rsci_wadr;
  padded_input_rsci_d_d <= input_rsci_q_d;
  padded_input_rsci_q_d <= padded_input_rsci_q_d_1;
  padded_input_rsci_radr_d_1 <= padded_input_rsci_radr_d;
  padded_input_rsci_wadr_d_1 <= padded_input_rsci_wadr_d;

  output_rsci : UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_3_15_12_32768_1_32768_12_1_gen
    PORT MAP(
      clken => output_rsc_clken,
      we => output_rsc_we,
      d => output_rsci_d,
      wadr => output_rsci_wadr,
      clken_d => '1',
      d_d => output_rsci_d_d_1,
      wadr_d => output_rsci_wadr_d_1,
      we_d => output_rsci_we_d_iff,
      writeA_w_ram_ir_internal_WMASK_B_d => output_rsci_we_d_iff
    );
  output_rsc_d <= output_rsci_d;
  output_rsc_wadr <= output_rsci_wadr;
  output_rsci_d_d_1 <= output_rsci_d_d;
  output_rsci_wadr_d_1 <= output_rsci_wadr_d;

  UNET_IP_conv2d_run_conv_inst : UNET_IP_conv2d_run_conv
    PORT MAP(
      clk => clk,
      rst => rst,
      arst_n => arst_n,
      input_triosy_lz => input_triosy_lz,
      padded_input_triosy_lz => padded_input_triosy_lz,
      output_triosy_lz => output_triosy_lz,
      height => UNET_IP_conv2d_run_conv_inst_height,
      width => UNET_IP_conv2d_run_conv_inst_width,
      kernel_size => UNET_IP_conv2d_run_conv_inst_kernel_size,
      padding => UNET_IP_conv2d_run_conv_inst_padding,
      filter_offset => UNET_IP_conv2d_run_conv_inst_filter_offset,
      in_channels => UNET_IP_conv2d_run_conv_inst_in_channels,
      out_channels => UNET_IP_conv2d_run_conv_inst_out_channels,
      input_rsci_radr_d => UNET_IP_conv2d_run_conv_inst_input_rsci_radr_d,
      padded_input_rsci_q_d => UNET_IP_conv2d_run_conv_inst_padded_input_rsci_q_d,
      padded_input_rsci_radr_d => UNET_IP_conv2d_run_conv_inst_padded_input_rsci_radr_d,
      padded_input_rsci_wadr_d => UNET_IP_conv2d_run_conv_inst_padded_input_rsci_wadr_d,
      output_rsci_d_d => UNET_IP_conv2d_run_conv_inst_output_rsci_d_d,
      output_rsci_wadr_d => UNET_IP_conv2d_run_conv_inst_output_rsci_wadr_d,
      input_rsci_re_d_pff => input_rsci_re_d_iff,
      padded_input_rsci_re_d_pff => padded_input_rsci_re_d_iff,
      padded_input_rsci_we_d_pff => padded_input_rsci_we_d_iff,
      output_rsci_we_d_pff => output_rsci_we_d_iff
    );
  UNET_IP_conv2d_run_conv_inst_height <= height;
  UNET_IP_conv2d_run_conv_inst_width <= width;
  UNET_IP_conv2d_run_conv_inst_kernel_size <= kernel_size;
  UNET_IP_conv2d_run_conv_inst_padding <= padding;
  UNET_IP_conv2d_run_conv_inst_filter_offset <= filter_offset;
  UNET_IP_conv2d_run_conv_inst_in_channels <= in_channels;
  UNET_IP_conv2d_run_conv_inst_out_channels <= out_channels;
  input_rsci_radr_d <= UNET_IP_conv2d_run_conv_inst_input_rsci_radr_d;
  UNET_IP_conv2d_run_conv_inst_padded_input_rsci_q_d <= padded_input_rsci_q_d;
  padded_input_rsci_radr_d <= UNET_IP_conv2d_run_conv_inst_padded_input_rsci_radr_d;
  padded_input_rsci_wadr_d <= UNET_IP_conv2d_run_conv_inst_padded_input_rsci_wadr_d;
  output_rsci_d_d <= UNET_IP_conv2d_run_conv_inst_output_rsci_d_d;
  output_rsci_wadr_d <= UNET_IP_conv2d_run_conv_inst_output_rsci_wadr_d;

END v6;



