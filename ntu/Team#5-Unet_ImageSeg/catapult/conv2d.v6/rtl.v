// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r12016@cad40
//  Generated date: Thu Jun 13 02:26:50 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_3_15_12_32768_1_32768_12_1_gen
// ------------------------------------------------------------------


module UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_3_15_12_32768_1_32768_12_1_gen
    (
  clken, we, d, wadr, clken_d, d_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d
);
  output clken;
  output we;
  output [11:0] d;
  output [14:0] wadr;
  input clken_d;
  input [11:0] d_d;
  input [14:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_2_16_12_34848_1_34848_12_1_gen
// ------------------------------------------------------------------


module UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_2_16_12_34848_1_34848_12_1_gen
    (
  clken, q, re, radr, we, d, wadr, clken_d, d_d, q_d, radr_d, re_d, wadr_d, we_d,
      writeA_w_ram_ir_internal_WMASK_B_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [11:0] q;
  output re;
  output [15:0] radr;
  output we;
  output [11:0] d;
  output [15:0] wadr;
  input clken_d;
  input [11:0] d_d;
  output [11:0] q_d;
  input [15:0] radr_d;
  input re_d;
  input [15:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_conv2d_Xilinx_RAMS_DIST_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
// ------------------------------------------------------------------


module UNET_IP_conv2d_Xilinx_RAMS_DIST_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
    (
  clken, q, re, radr, clken_d, q_d, radr_d, re_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [11:0] q;
  output re;
  output [14:0] radr;
  input clken_d;
  output [11:0] q_d;
  input [14:0] radr_d;
  input re_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_conv2d_run_conv_run_conv_fsm
//  FSM Module
// ------------------------------------------------------------------


module UNET_IP_conv2d_run_conv_run_conv_fsm (
  clk, rst, arst_n, fsm_output, main_C_0_tr0, for_C_0_tr0, for_for_for_C_0_tr0, for_for_C_0_tr0,
      for_C_1_tr0, main_C_1_tr0, LOOP_OUT_C_0_tr0, LOOP_IN_C_0_tr0, LOOP_HEIGHT_C_0_tr0,
      LOOP_Y_C_0_tr0, LOOP_X_C_0_tr0, LOOP_WIDTH_C_2_tr0, LOOP_HEIGHT_C_1_tr0, LOOP_IN_C_1_tr0,
      LOOP_OUT_C_1_tr0
);
  input clk;
  input rst;
  input arst_n;
  output [17:0] fsm_output;
  reg [17:0] fsm_output;
  input main_C_0_tr0;
  input for_C_0_tr0;
  input for_for_for_C_0_tr0;
  input for_for_C_0_tr0;
  input for_C_1_tr0;
  input main_C_1_tr0;
  input LOOP_OUT_C_0_tr0;
  input LOOP_IN_C_0_tr0;
  input LOOP_HEIGHT_C_0_tr0;
  input LOOP_Y_C_0_tr0;
  input LOOP_X_C_0_tr0;
  input LOOP_WIDTH_C_2_tr0;
  input LOOP_HEIGHT_C_1_tr0;
  input LOOP_IN_C_1_tr0;
  input LOOP_OUT_C_1_tr0;


  // FSM State Type Declaration for UNET_IP_conv2d_run_conv_run_conv_fsm_1
  parameter
    main_C_0 = 5'd0,
    for_C_0 = 5'd1,
    for_for_for_C_0 = 5'd2,
    for_for_C_0 = 5'd3,
    for_C_1 = 5'd4,
    main_C_1 = 5'd5,
    LOOP_OUT_C_0 = 5'd6,
    LOOP_IN_C_0 = 5'd7,
    LOOP_HEIGHT_C_0 = 5'd8,
    LOOP_Y_C_0 = 5'd9,
    LOOP_X_C_0 = 5'd10,
    LOOP_WIDTH_C_0 = 5'd11,
    LOOP_WIDTH_C_1 = 5'd12,
    LOOP_WIDTH_C_2 = 5'd13,
    LOOP_HEIGHT_C_1 = 5'd14,
    LOOP_IN_C_1 = 5'd15,
    LOOP_OUT_C_1 = 5'd16,
    main_C_2 = 5'd17;

  reg [4:0] state_var;
  reg [4:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : UNET_IP_conv2d_run_conv_run_conv_fsm_1
    case (state_var)
      for_C_0 : begin
        fsm_output = 18'b000000000000000010;
        if ( for_C_0_tr0 ) begin
          state_var_NS = for_C_1;
        end
        else begin
          state_var_NS = for_for_for_C_0;
        end
      end
      for_for_for_C_0 : begin
        fsm_output = 18'b000000000000000100;
        if ( for_for_for_C_0_tr0 ) begin
          state_var_NS = for_for_C_0;
        end
        else begin
          state_var_NS = for_for_for_C_0;
        end
      end
      for_for_C_0 : begin
        fsm_output = 18'b000000000000001000;
        if ( for_for_C_0_tr0 ) begin
          state_var_NS = for_C_1;
        end
        else begin
          state_var_NS = for_for_for_C_0;
        end
      end
      for_C_1 : begin
        fsm_output = 18'b000000000000010000;
        if ( for_C_1_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = for_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 18'b000000000000100000;
        if ( main_C_1_tr0 ) begin
          state_var_NS = main_C_2;
        end
        else begin
          state_var_NS = LOOP_OUT_C_0;
        end
      end
      LOOP_OUT_C_0 : begin
        fsm_output = 18'b000000000001000000;
        if ( LOOP_OUT_C_0_tr0 ) begin
          state_var_NS = LOOP_OUT_C_1;
        end
        else begin
          state_var_NS = LOOP_IN_C_0;
        end
      end
      LOOP_IN_C_0 : begin
        fsm_output = 18'b000000000010000000;
        if ( LOOP_IN_C_0_tr0 ) begin
          state_var_NS = LOOP_IN_C_1;
        end
        else begin
          state_var_NS = LOOP_HEIGHT_C_0;
        end
      end
      LOOP_HEIGHT_C_0 : begin
        fsm_output = 18'b000000000100000000;
        if ( LOOP_HEIGHT_C_0_tr0 ) begin
          state_var_NS = LOOP_HEIGHT_C_1;
        end
        else begin
          state_var_NS = LOOP_Y_C_0;
        end
      end
      LOOP_Y_C_0 : begin
        fsm_output = 18'b000000001000000000;
        if ( LOOP_Y_C_0_tr0 ) begin
          state_var_NS = LOOP_X_C_0;
        end
        else begin
          state_var_NS = LOOP_Y_C_0;
        end
      end
      LOOP_X_C_0 : begin
        fsm_output = 18'b000000010000000000;
        if ( LOOP_X_C_0_tr0 ) begin
          state_var_NS = LOOP_WIDTH_C_0;
        end
        else begin
          state_var_NS = LOOP_Y_C_0;
        end
      end
      LOOP_WIDTH_C_0 : begin
        fsm_output = 18'b000000100000000000;
        state_var_NS = LOOP_WIDTH_C_1;
      end
      LOOP_WIDTH_C_1 : begin
        fsm_output = 18'b000001000000000000;
        state_var_NS = LOOP_WIDTH_C_2;
      end
      LOOP_WIDTH_C_2 : begin
        fsm_output = 18'b000010000000000000;
        if ( LOOP_WIDTH_C_2_tr0 ) begin
          state_var_NS = LOOP_HEIGHT_C_1;
        end
        else begin
          state_var_NS = LOOP_Y_C_0;
        end
      end
      LOOP_HEIGHT_C_1 : begin
        fsm_output = 18'b000100000000000000;
        if ( LOOP_HEIGHT_C_1_tr0 ) begin
          state_var_NS = LOOP_IN_C_1;
        end
        else begin
          state_var_NS = LOOP_HEIGHT_C_0;
        end
      end
      LOOP_IN_C_1 : begin
        fsm_output = 18'b001000000000000000;
        if ( LOOP_IN_C_1_tr0 ) begin
          state_var_NS = LOOP_OUT_C_1;
        end
        else begin
          state_var_NS = LOOP_IN_C_0;
        end
      end
      LOOP_OUT_C_1 : begin
        fsm_output = 18'b010000000000000000;
        if ( LOOP_OUT_C_1_tr0 ) begin
          state_var_NS = main_C_2;
        end
        else begin
          state_var_NS = LOOP_OUT_C_0;
        end
      end
      main_C_2 : begin
        fsm_output = 18'b100000000000000000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 18'b000000000000000001;
        if ( main_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = for_C_0;
        end
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= main_C_0;
    end
    else if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_conv2d_run_conv
// ------------------------------------------------------------------


module UNET_IP_conv2d_run_conv (
  clk, rst, arst_n, input_triosy_lz, padded_input_triosy_lz, output_triosy_lz, height,
      width, kernel_size, padding, filter_offset, in_channels, out_channels, input_rsci_radr_d,
      padded_input_rsci_q_d, padded_input_rsci_radr_d, padded_input_rsci_wadr_d,
      output_rsci_d_d, output_rsci_wadr_d, input_rsci_re_d_pff, padded_input_rsci_re_d_pff,
      padded_input_rsci_we_d_pff, output_rsci_we_d_pff
);
  input clk;
  input rst;
  input arst_n;
  output input_triosy_lz;
  output padded_input_triosy_lz;
  output output_triosy_lz;
  input [6:0] height;
  input [6:0] width;
  input [1:0] kernel_size;
  input [1:0] padding;
  input [19:0] filter_offset;
  input [6:0] in_channels;
  input [6:0] out_channels;
  output [14:0] input_rsci_radr_d;
  wire [15:0] nl_input_rsci_radr_d;
  input [11:0] padded_input_rsci_q_d;
  output [15:0] padded_input_rsci_radr_d;
  wire [16:0] nl_padded_input_rsci_radr_d;
  output [15:0] padded_input_rsci_wadr_d;
  wire [16:0] nl_padded_input_rsci_wadr_d;
  output [11:0] output_rsci_d_d;
  output [14:0] output_rsci_wadr_d;
  wire [15:0] nl_output_rsci_wadr_d;
  output input_rsci_re_d_pff;
  output padded_input_rsci_re_d_pff;
  output padded_input_rsci_we_d_pff;
  output output_rsci_we_d_pff;


  // Interconnect Declarations
  wire [17:0] fsm_output;
  wire and_dcpl_24;
  wire or_dcpl_30;
  wire or_dcpl_33;
  wire exit_LOOP_OUT_sva_mx0;
  wire exit_LOOP_HEIGHT_sva_mx0;
  wire exit_LOOP_WIDTH_sva_mx0;
  wire exit_for_for_sva_mx0;
  reg for_acc_2_cse_sva_7;
  reg LOOP_Y_stage_0;
  reg LOOP_Y_stage_0_4;
  reg LOOP_Y_asn_16_itm_3;
  reg LOOP_Y_stage_0_3;
  reg LOOP_Y_stage_0_2;
  reg exit_LOOP_Y_sva_st_2;
  reg exit_LOOP_Y_sva_st_1;
  reg exit_LOOP_Y_sva_3;
  reg reg_input_triosy_obj_ld_cse;
  wire i_or_cse;
  wire j_or_cse;
  reg [11:0] temp_lpi_7_dfm;
  reg [13:0] for_for_for_acc_itm_1;
  wire [14:0] nl_for_for_for_acc_itm_1;
  reg [15:0] LOOP_Y_mul_2_itm_1;
  wire signed [17:0] nl_LOOP_Y_mul_2_itm_1;
  reg [1:0] LOOP_Y_acc_14_itm_1_8_7;
  reg [6:0] LOOP_Y_acc_14_itm_1_6_0;
  reg [14:0] LOOP_Y_mul_1_itm_1;
  reg [6:0] padded_width_acc_psp_sva;
  wire [7:0] nl_padded_width_acc_psp_sva;
  reg [6:0] LOOP_Y_mul_3_itm_1_6_0;
  reg [7:0] for_for_for_mul_1_itm_1_7_0;
  reg [14:0] LOOP_WIDTH_mul_2_itm;
  reg [5:0] j_sva_6_1;
  reg j_sva_0;
  reg [1:0] LOOP_WIDTH_mul_1_itm_13_12;
  reg [4:0] LOOP_WIDTH_mul_1_itm_11_7;
  reg [6:0] LOOP_WIDTH_mul_1_itm_6_0;
  wire [17:0] LOOP_Y_mul_3_itm;
  wire [8:0] LOOP_Y_acc_14_itm;
  wire [9:0] nl_LOOP_Y_acc_14_itm;
  wire [4:0] LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm;
  wire [14:0] z_out;
  wire signed [15:0] nl_z_out;
  wire [4:0] z_out_1;
  wire signed [6:0] nl_z_out_1;
  wire [13:0] z_out_2;
  wire signed [20:0] nl_z_out_2;
  wire [15:0] z_out_3;
  wire [22:0] nl_z_out_3;
  wire [14:0] z_out_6;
  wire [20:0] nl_z_out_6;
  reg [6:0] padded_height_7_1_sva;
  wire [7:0] nl_padded_height_7_1_sva;
  reg [3:0] filter_size_3_0_sva;
  reg [7:0] for_c_sva;
  reg [2:0] x_sva;
  reg [11:0] temp_lpi_7;
  reg [2:0] y_sva;
  reg [10:0] LOOP_Y_mul_5_itm_1;
  reg [2:0] LOOP_Y_asn_12_itm_1;
  reg [5:0] LOOP_Y_acc_15_itm_1;
  wire [7:0] nl_LOOP_Y_acc_15_itm_1;
  reg [4:0] LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm_1;
  reg [5:0] i_sva_6_1;
  reg i_sva_0;
  wire for_c_sva_mx0c1;
  wire [7:0] for_c_sva_2;
  wire [8:0] nl_for_c_sva_2;
  wire [6:0] for_for_h_sva_1_mx0w2;
  wire [7:0] nl_for_for_h_sva_1_mx0w2;
  wire [14:0] for_for_for_mul_1_itm_1_mx0w0;
  wire [15:0] nl_for_for_for_mul_1_itm_1_mx0w0;
  wire [7:0] out_c_sva_1_mx0w2;
  wire [8:0] nl_out_c_sva_1_mx0w2;
  wire [2:0] x_sva_3;
  wire [3:0] nl_x_sva_3;
  wire [11:0] temp_sva_2;
  wire [12:0] nl_temp_sva_2;
  wire [6:0] i_sva_2;
  wire [7:0] nl_i_sva_2;
  reg [10:0] LOOP_Y_mul_3_itm_1_17_7;
  reg [3:0] LOOP_Y_mul_5_itm_2_10_7;
  reg [6:0] LOOP_Y_mul_5_itm_2_6_0;
  reg [13:0] reg_for_for_for_mul_4_itm_1_cse;
  wire [14:0] nl_reg_for_for_for_mul_4_itm_1_cse;
  wire x_or_cse;
  wire [7:0] LOOP_WIDTH_acc_9_itm;
  wire [8:0] nl_LOOP_WIDTH_acc_9_itm;
  wire [3:0] LOOP_Y_acc_10_itm;
  wire [4:0] nl_LOOP_Y_acc_10_itm;
  wire LOOP_Y_or_itm;
  wire [8:0] LOOP_Y_acc_4_itm;
  wire [9:0] nl_LOOP_Y_acc_4_itm;
  wire for_acc_2_itm_7_1;
  wire for_for_for_acc_10_itm_7_1;
  wire for_acc_4_itm_8_1;
  wire z_out_4_3;
  wire z_out_5_7;

  wire[7:0] for_c_for_c_and_nl;
  wire[7:0] for_c_mux_nl;
  wire out_c_nor_nl;
  wire and_109_nl;
  wire[6:0] for_for_for_mux_13_nl;
  wire[7:0] for_for_for_mux_14_nl;
  wire LOOP_Y_mux_15_nl;
  wire LOOP_Y_LOOP_Y_and_nl;
  wire LOOP_Y_mux_16_nl;
  wire LOOP_Y_LOOP_Y_and_1_nl;
  wire LOOP_Y_mux_17_nl;
  wire[6:0] for_for_h_for_for_h_and_nl;
  wire[6:0] for_for_h_mux_1_nl;
  wire for_for_h_or_nl;
  wire[6:0] for_for_h_for_for_h_and_1_nl;
  wire[6:0] for_for_for_acc_7_nl;
  wire[7:0] nl_for_for_for_acc_7_nl;
  wire[6:0] LOOP_WIDTH_acc_6_nl;
  wire[7:0] nl_LOOP_WIDTH_acc_6_nl;
  wire LOOP_Y_LOOP_Y_nor_nl;
  wire and_60_nl;
  wire[11:0] temp_mux_nl;
  wire not_89_nl;
  wire[2:0] LOOP_Y_acc_13_nl;
  wire[3:0] nl_LOOP_Y_acc_13_nl;
  wire for_for_for_for_for_for_and_3_nl;
  wire[7:0] for_for_for_mux_12_nl;
  wire[7:0] for_for_for_acc_13_nl;
  wire[8:0] nl_for_for_for_acc_13_nl;
  wire[7:0] for_acc_2_nl;
  wire[8:0] nl_for_acc_2_nl;
  wire[7:0] for_for_acc_3_nl;
  wire[8:0] nl_for_for_acc_3_nl;
  wire[7:0] for_for_for_acc_10_nl;
  wire[8:0] nl_for_for_for_acc_10_nl;
  wire[7:0] LOOP_OUT_acc_2_nl;
  wire[8:0] nl_LOOP_OUT_acc_2_nl;
  wire[8:0] LOOP_OUT_acc_3_nl;
  wire[9:0] nl_LOOP_OUT_acc_3_nl;
  wire[7:0] LOOP_HEIGHT_acc_5_nl;
  wire[9:0] nl_LOOP_HEIGHT_acc_5_nl;
  wire[7:0] LOOP_WIDTH_acc_8_nl;
  wire[8:0] nl_LOOP_WIDTH_acc_8_nl;
  wire[7:0] LOOP_WIDTH_acc_12_nl;
  wire[9:0] nl_LOOP_WIDTH_acc_12_nl;
  wire[8:0] for_acc_4_nl;
  wire[9:0] nl_for_acc_4_nl;
  wire[15:0] LOOP_Y_acc_nl;
  wire[16:0] nl_LOOP_Y_acc_nl;
  wire[14:0] for_for_for_acc_12_nl;
  wire[16:0] nl_for_for_for_acc_12_nl;
  wire[14:0] LOOP_WIDTH_acc_11_nl;
  wire[15:0] nl_LOOP_WIDTH_acc_11_nl;
  wire[7:0] LOOP_WIDTH_acc_10_nl;
  wire[8:0] nl_LOOP_WIDTH_acc_10_nl;
  wire for_for_for_for_for_for_and_2_nl;
  wire[6:0] for_for_for_mux_11_nl;
  wire[1:0] filter_size_filter_size_and_1_nl;
  wire[1:0] filter_size_mux_3_nl;
  wire LOOP_WIDTH_LOOP_WIDTH_and_2_nl;
  wire[6:0] LOOP_WIDTH_mux_5_nl;
  wire[4:0] LOOP_WIDTH_LOOP_WIDTH_and_3_nl;
  wire[6:0] LOOP_WIDTH_mux_6_nl;
  wire[7:0] LOOP_Y_mux_19_nl;
  wire[4:0] acc_nl;
  wire[5:0] nl_acc_nl;
  wire[2:0] LOOP_Y_mux_20_nl;
  wire[7:0] for_for_acc_nl;
  wire[8:0] nl_for_for_acc_nl;
  wire[2:0] LOOP_Y_LOOP_Y_and_8_nl;
  wire[3:0] LOOP_Y_mux_21_nl;
  wire[1:0] LOOP_Y_LOOP_Y_and_9_nl;
  wire[1:0] LOOP_Y_mux_22_nl;
  wire not_93_nl;
  wire[3:0] LOOP_Y_LOOP_Y_and_10_nl;
  wire[3:0] LOOP_Y_mux_23_nl;
  wire LOOP_Y_not_3_nl;
  wire LOOP_Y_mux1h_55_nl;
  wire[6:0] LOOP_Y_mux1h_56_nl;

  // Interconnect Declarations for Component Instantiations 
  wire[18:0] LOOP_Y_acc_17_nl;
  wire[19:0] nl_LOOP_Y_acc_17_nl;
  wire[11:0] LOOP_Y_acc_16_nl;
  wire[12:0] nl_LOOP_Y_acc_16_nl;
  wire [19:0] nl_LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr;
  assign nl_LOOP_Y_acc_16_nl = conv_u2s_11_12({LOOP_Y_mul_5_itm_2_10_7 , LOOP_Y_mul_5_itm_2_6_0})
      + conv_s2s_6_12(LOOP_Y_acc_15_itm_1);
  assign LOOP_Y_acc_16_nl = nl_LOOP_Y_acc_16_nl[11:0];
  assign nl_LOOP_Y_acc_17_nl = conv_u2s_18_19({LOOP_Y_mul_3_itm_1_17_7 , LOOP_Y_mul_3_itm_1_6_0})
      + conv_s2s_12_19(LOOP_Y_acc_16_nl);
  assign LOOP_Y_acc_17_nl = nl_LOOP_Y_acc_17_nl[18:0];
  assign nl_LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr = LOOP_Y_acc_17_nl
      + (filter_offset[18:0]);
  wire  nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_main_C_0_tr0;
  assign nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_main_C_0_tr0 = ~ for_acc_2_itm_7_1;
  wire  nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_for_for_C_0_tr0;
  assign nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_for_for_C_0_tr0 = ~(LOOP_Y_stage_0_3
      | LOOP_Y_stage_0_4 | LOOP_Y_asn_16_itm_3);
  wire  nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_C_1_tr0;
  assign nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_C_1_tr0 = ~ for_acc_4_itm_8_1;
  wire  nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_OUT_C_0_tr0;
  assign nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_OUT_C_0_tr0 = ~ for_acc_2_cse_sva_7;
  wire  nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_Y_C_0_tr0;
  assign nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_Y_C_0_tr0 = ~(LOOP_Y_stage_0
      | LOOP_Y_stage_0_2 | LOOP_Y_stage_0_3);
  wire  nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_IN_C_1_tr0;
  assign nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_IN_C_1_tr0 = ~ for_acc_4_itm_8_1;
  mgc_io_sync_v2 #(.valid(32'sd0)) input_triosy_obj (
      .ld(reg_input_triosy_obj_ld_cse),
      .lz(input_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) padded_input_triosy_obj (
      .ld(reg_input_triosy_obj_ld_cse),
      .lz(padded_input_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) output_triosy_obj (
      .ld(reg_input_triosy_obj_ld_cse),
      .lz(output_triosy_lz)
    );
  UNET_IP_conv2dmgc_rom_12_485120_5_1  LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg
      (
      .addr(nl_LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_rg_addr[18:0]),
      .data_out(LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm)
    );
  UNET_IP_conv2d_run_conv_run_conv_fsm UNET_IP_conv2d_run_conv_run_conv_fsm_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .fsm_output(fsm_output),
      .main_C_0_tr0(nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_main_C_0_tr0),
      .for_C_0_tr0(exit_for_for_sva_mx0),
      .for_for_for_C_0_tr0(nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_for_for_C_0_tr0),
      .for_for_C_0_tr0(exit_for_for_sva_mx0),
      .for_C_1_tr0(nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_for_C_1_tr0),
      .main_C_1_tr0(exit_LOOP_OUT_sva_mx0),
      .LOOP_OUT_C_0_tr0(nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_OUT_C_0_tr0),
      .LOOP_IN_C_0_tr0(exit_LOOP_HEIGHT_sva_mx0),
      .LOOP_HEIGHT_C_0_tr0(exit_LOOP_WIDTH_sva_mx0),
      .LOOP_Y_C_0_tr0(nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_Y_C_0_tr0),
      .LOOP_X_C_0_tr0(z_out_4_3),
      .LOOP_WIDTH_C_2_tr0(exit_LOOP_WIDTH_sva_mx0),
      .LOOP_HEIGHT_C_1_tr0(exit_LOOP_HEIGHT_sva_mx0),
      .LOOP_IN_C_1_tr0(nl_UNET_IP_conv2d_run_conv_run_conv_fsm_inst_LOOP_IN_C_1_tr0),
      .LOOP_OUT_C_1_tr0(exit_LOOP_OUT_sva_mx0)
    );
  assign LOOP_Y_mul_3_itm = reg_for_for_for_mul_4_itm_1_cse * filter_size_3_0_sva;
  assign nl_LOOP_Y_acc_14_itm = conv_u2s_7_9({j_sva_6_1 , j_sva_0}) + conv_s2s_3_9(y_sva);
  assign LOOP_Y_acc_14_itm = nl_LOOP_Y_acc_14_itm[8:0];
  assign i_or_cse = (fsm_output[7]) | (fsm_output[14]);
  assign j_or_cse = (fsm_output[8]) | (fsm_output[13]);
  assign x_or_cse = j_or_cse | (fsm_output[10]);
  assign nl_for_acc_2_nl = ({1'b1 , (~ in_channels)}) + 8'b00000001;
  assign for_acc_2_nl = nl_for_acc_2_nl[7:0];
  assign for_acc_2_itm_7_1 = readslicef_8_1_7(for_acc_2_nl);
  assign nl_for_c_sva_2 = conv_u2u_7_8(for_c_sva[6:0]) + 8'b00000001;
  assign for_c_sva_2 = nl_for_c_sva_2[7:0];
  assign nl_for_for_acc_3_nl = ({1'b1 , for_for_h_sva_1_mx0w2}) + conv_u2u_7_8(~
      height) + 8'b00000001;
  assign for_for_acc_3_nl = nl_for_for_acc_3_nl[7:0];
  assign exit_for_for_sva_mx0 = MUX_s_1_2_2((~ z_out_5_7), (~ (readslicef_8_1_7(for_for_acc_3_nl))),
      fsm_output[3]);
  assign nl_for_for_h_sva_1_mx0w2 = LOOP_WIDTH_mul_1_itm_6_0 + 7'b0000001;
  assign for_for_h_sva_1_mx0w2 = nl_for_for_h_sva_1_mx0w2[6:0];
  assign nl_for_for_for_mul_1_itm_1_mx0w0 = for_c_sva * ({padded_height_7_1_sva ,
      (height[0])});
  assign for_for_for_mul_1_itm_1_mx0w0 = nl_for_for_for_mul_1_itm_1_mx0w0[14:0];
  assign nl_for_for_for_acc_10_nl = ({1'b1 , LOOP_Y_acc_14_itm_1_6_0}) + conv_u2u_7_8(~
      width) + 8'b00000001;
  assign for_for_for_acc_10_nl = nl_for_for_for_acc_10_nl[7:0];
  assign for_for_for_acc_10_itm_7_1 = readslicef_8_1_7(for_for_for_acc_10_nl);
  assign nl_LOOP_OUT_acc_2_nl = ({1'b1 , (~ out_channels)}) + 8'b00000001;
  assign LOOP_OUT_acc_2_nl = nl_LOOP_OUT_acc_2_nl[7:0];
  assign nl_LOOP_OUT_acc_3_nl = ({1'b1 , out_c_sva_1_mx0w2}) + conv_u2u_8_9({1'b1
      , (~ out_channels)}) + 9'b000000001;
  assign LOOP_OUT_acc_3_nl = nl_LOOP_OUT_acc_3_nl[8:0];
  assign exit_LOOP_OUT_sva_mx0 = MUX_s_1_2_2((~ (readslicef_8_1_7(LOOP_OUT_acc_2_nl))),
      (~ (readslicef_9_1_8(LOOP_OUT_acc_3_nl))), fsm_output[16]);
  assign nl_out_c_sva_1_mx0w2 = conv_u2u_7_8(for_for_for_mul_1_itm_1_7_0[6:0]) +
      8'b00000001;
  assign out_c_sva_1_mx0w2 = nl_out_c_sva_1_mx0w2[7:0];
  assign nl_LOOP_HEIGHT_acc_5_nl = ({1'b1 , i_sva_2}) + conv_u2s_7_8(~ height) +
      conv_u2s_1_8(~ (kernel_size[1]));
  assign LOOP_HEIGHT_acc_5_nl = nl_LOOP_HEIGHT_acc_5_nl[7:0];
  assign exit_LOOP_HEIGHT_sva_mx0 = MUX_s_1_2_2((~ z_out_5_7), (~ (readslicef_8_1_7(LOOP_HEIGHT_acc_5_nl))),
      fsm_output[14]);
  assign nl_LOOP_WIDTH_acc_8_nl = ({1'b1 , (~ width)}) + 8'b00000001;
  assign LOOP_WIDTH_acc_8_nl = nl_LOOP_WIDTH_acc_8_nl[7:0];
  assign nl_LOOP_WIDTH_acc_12_nl = ({1'b1 , LOOP_Y_mul_5_itm_2_6_0}) + conv_u2s_7_8(~
      width) + conv_u2s_1_8(~ (kernel_size[1]));
  assign LOOP_WIDTH_acc_12_nl = nl_LOOP_WIDTH_acc_12_nl[7:0];
  assign exit_LOOP_WIDTH_sva_mx0 = MUX_s_1_2_2((~ (readslicef_8_1_7(LOOP_WIDTH_acc_8_nl))),
      (~ (readslicef_8_1_7(LOOP_WIDTH_acc_12_nl))), fsm_output[13]);
  assign nl_x_sva_3 = x_sva + 3'b001;
  assign x_sva_3 = nl_x_sva_3[2:0];
  assign nl_temp_sva_2 = temp_lpi_7 + (z_out_2[11:0]);
  assign temp_sva_2 = nl_temp_sva_2[11:0];
  assign nl_i_sva_2 = ({i_sva_6_1 , i_sva_0}) + 7'b0000001;
  assign i_sva_2 = nl_i_sva_2[6:0];
  assign nl_for_acc_4_nl = ({1'b1 , for_c_sva_2}) + conv_u2u_8_9({1'b1 , (~ in_channels)})
      + 9'b000000001;
  assign for_acc_4_nl = nl_for_acc_4_nl[8:0];
  assign for_acc_4_itm_8_1 = readslicef_9_1_8(for_acc_4_nl);
  assign and_dcpl_24 = ~((fsm_output[0]) | (fsm_output[17]));
  assign or_dcpl_30 = (fsm_output[1]) | (fsm_output[3]);
  assign or_dcpl_33 = or_dcpl_30 | (fsm_output[2]);
  assign for_c_sva_mx0c1 = (fsm_output[15]) | (fsm_output[4]);
  assign nl_input_rsci_radr_d = conv_u2u_14_15(for_for_for_acc_itm_1) + z_out_6;
  assign input_rsci_radr_d = nl_input_rsci_radr_d[14:0];
  assign input_rsci_re_d_pff = (~ LOOP_Y_stage_0) & LOOP_Y_stage_0_4 & (fsm_output[2]);
  assign nl_LOOP_Y_acc_nl = LOOP_Y_mul_2_itm_1 + conv_s2s_9_16({LOOP_Y_acc_14_itm_1_8_7
      , LOOP_Y_acc_14_itm_1_6_0});
  assign LOOP_Y_acc_nl = nl_LOOP_Y_acc_nl[15:0];
  assign nl_padded_input_rsci_radr_d = LOOP_Y_acc_nl + z_out_3;
  assign padded_input_rsci_radr_d = nl_padded_input_rsci_radr_d[15:0];
  assign padded_input_rsci_re_d_pff = LOOP_Y_stage_0_2 & (~ exit_LOOP_Y_sva_st_1)
      & (fsm_output[9]);
  assign nl_for_for_for_acc_12_nl = (LOOP_Y_mul_2_itm_1[14:0]) + conv_u2u_7_15(LOOP_Y_mul_3_itm_1_6_0)
      + conv_u2u_2_15(padding);
  assign for_for_for_acc_12_nl = nl_for_for_for_acc_12_nl[14:0];
  assign nl_padded_input_rsci_wadr_d = conv_u2u_15_16(for_for_for_acc_12_nl) + z_out_3;
  assign padded_input_rsci_wadr_d = nl_padded_input_rsci_wadr_d[15:0];
  assign padded_input_rsci_we_d_pff = (~ LOOP_Y_stage_0_2) & LOOP_Y_asn_16_itm_3
      & (fsm_output[2]);
  assign output_rsci_d_d = signext_12_8(temp_lpi_7_dfm[11:4]);
  assign nl_LOOP_WIDTH_acc_10_nl = conv_u2s_7_8({j_sva_6_1 , j_sva_0}) + conv_s2s_1_8(kernel_size[1]);
  assign LOOP_WIDTH_acc_10_nl = nl_LOOP_WIDTH_acc_10_nl[7:0];
  assign nl_LOOP_WIDTH_acc_11_nl = LOOP_WIDTH_mul_2_itm + conv_s2s_8_15(LOOP_WIDTH_acc_10_nl);
  assign LOOP_WIDTH_acc_11_nl = nl_LOOP_WIDTH_acc_11_nl[14:0];
  assign nl_output_rsci_wadr_d = LOOP_WIDTH_acc_11_nl + z_out_6;
  assign output_rsci_wadr_d = nl_output_rsci_wadr_d[14:0];
  assign output_rsci_we_d_pff = fsm_output[12];
  assign nl_LOOP_WIDTH_acc_9_itm = ({1'b1 , i_sva_6_1 , i_sva_0}) + conv_u2s_7_8({6'b111111
      , (~ (kernel_size[1]))}) + 8'b00000001;
  assign LOOP_WIDTH_acc_9_itm = nl_LOOP_WIDTH_acc_9_itm[7:0];
  assign nl_LOOP_Y_acc_10_itm = conv_s2s_3_4(x_sva) + conv_u2s_1_4(kernel_size[1]);
  assign LOOP_Y_acc_10_itm = nl_LOOP_Y_acc_10_itm[3:0];
  assign LOOP_Y_or_itm = (fsm_output[2]) | (fsm_output[12]);
  assign nl_LOOP_Y_acc_4_itm = conv_u2s_7_9({i_sva_6_1 , i_sva_0}) + conv_s2s_3_9(x_sva);
  assign LOOP_Y_acc_4_itm = nl_LOOP_Y_acc_4_itm[8:0];
  always @(posedge clk) begin
    if ( ~ and_dcpl_24 ) begin
      padded_width_acc_psp_sva <= nl_padded_width_acc_psp_sva[6:0];
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_24 ) begin
      filter_size_3_0_sva <= z_out_1[3:0];
    end
  end
  always @(posedge clk) begin
    if ( ~ and_dcpl_24 ) begin
      padded_height_7_1_sva <= nl_padded_height_7_1_sva[6:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      for_acc_2_cse_sva_7 <= 1'b0;
    end
    else if ( rst ) begin
      for_acc_2_cse_sva_7 <= 1'b0;
    end
    else if ( ~ and_dcpl_24 ) begin
      for_acc_2_cse_sva_7 <= for_acc_2_itm_7_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_input_triosy_obj_ld_cse <= 1'b0;
      LOOP_Y_stage_0 <= 1'b0;
      LOOP_Y_stage_0_2 <= 1'b0;
      LOOP_Y_stage_0_3 <= 1'b0;
      LOOP_Y_stage_0_4 <= 1'b0;
      LOOP_Y_asn_16_itm_3 <= 1'b0;
      exit_LOOP_Y_sva_3 <= 1'b0;
      exit_LOOP_Y_sva_st_2 <= 1'b0;
      exit_LOOP_Y_sva_st_1 <= 1'b0;
    end
    else if ( rst ) begin
      reg_input_triosy_obj_ld_cse <= 1'b0;
      LOOP_Y_stage_0 <= 1'b0;
      LOOP_Y_stage_0_2 <= 1'b0;
      LOOP_Y_stage_0_3 <= 1'b0;
      LOOP_Y_stage_0_4 <= 1'b0;
      LOOP_Y_asn_16_itm_3 <= 1'b0;
      exit_LOOP_Y_sva_3 <= 1'b0;
      exit_LOOP_Y_sva_st_2 <= 1'b0;
      exit_LOOP_Y_sva_st_1 <= 1'b0;
    end
    else begin
      reg_input_triosy_obj_ld_cse <= exit_LOOP_OUT_sva_mx0 & ((fsm_output[5]) | (fsm_output[16]));
      LOOP_Y_stage_0 <= LOOP_Y_mux_15_nl | x_or_cse;
      LOOP_Y_stage_0_2 <= LOOP_Y_stage_0 & (~ x_or_cse);
      LOOP_Y_stage_0_3 <= (LOOP_Y_mux_16_nl & (~ x_or_cse)) | or_dcpl_30;
      LOOP_Y_stage_0_4 <= LOOP_Y_stage_0_3 & ((fsm_output[9]) | (fsm_output[2]));
      LOOP_Y_asn_16_itm_3 <= LOOP_Y_mux_17_nl & (~ or_dcpl_30);
      exit_LOOP_Y_sva_3 <= exit_LOOP_Y_sva_st_2;
      exit_LOOP_Y_sva_st_2 <= exit_LOOP_Y_sva_st_1;
      exit_LOOP_Y_sva_st_1 <= z_out_4_3;
    end
  end
  always @(posedge clk) begin
    if ( (fsm_output[6]) | (fsm_output[0]) | for_c_sva_mx0c1 ) begin
      for_c_sva <= MUX_v_8_2_2(8'b00000000, for_c_sva_2, for_c_sva_mx0c1);
    end
  end
  always @(posedge clk) begin
    for_for_for_mul_1_itm_1_7_0 <= MUX_v_8_2_2((for_for_for_mul_1_itm_1_mx0w0[7:0]),
        for_c_for_c_and_nl, and_109_nl);
    for_for_for_acc_itm_1 <= nl_for_for_for_acc_itm_1[13:0];
    reg_for_for_for_mul_4_itm_1_cse <= nl_reg_for_for_for_mul_4_itm_1_cse[13:0];
    LOOP_WIDTH_mul_1_itm_13_12 <= z_out_2[13:12];
    LOOP_WIDTH_mul_1_itm_11_7 <= MUX_v_5_2_2((padded_input_rsci_q_d[11:7]), (z_out_2[11:7]),
        fsm_output[11]);
    LOOP_WIDTH_mul_1_itm_6_0 <= MUX1HOT_v_7_3_2(for_for_h_for_for_h_and_nl, (padded_input_rsci_q_d[6:0]),
        (z_out_2[6:0]), {or_dcpl_33 , (fsm_output[9]) , (fsm_output[11])});
    LOOP_Y_mul_3_itm_1_17_7 <= LOOP_Y_mul_3_itm[17:7];
    LOOP_Y_mul_3_itm_1_6_0 <= MUX_v_7_2_2(LOOP_Y_mul_5_itm_2_6_0, (LOOP_Y_mul_3_itm[6:0]),
        fsm_output[9]);
    LOOP_Y_acc_14_itm_1_8_7 <= LOOP_Y_acc_14_itm[8:7];
    LOOP_Y_acc_14_itm_1_6_0 <= MUX_v_7_2_2(for_for_h_for_for_h_and_1_nl, (LOOP_Y_acc_14_itm[6:0]),
        fsm_output[9]);
    LOOP_Y_mul_5_itm_2_10_7 <= LOOP_Y_mul_5_itm_1[10:7];
    LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm_1 <= LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm;
    y_sva <= MUX_v_3_2_2((signext_3_1(kernel_size[1])), LOOP_Y_acc_13_nl, fsm_output[9]);
    LOOP_Y_acc_15_itm_1 <= nl_LOOP_Y_acc_15_itm_1[5:0];
    LOOP_Y_mul_2_itm_1 <= nl_LOOP_Y_mul_2_itm_1[15:0];
    LOOP_Y_mul_1_itm_1 <= for_for_for_mul_1_itm_1_mx0w0;
    LOOP_Y_asn_12_itm_1 <= y_sva;
    LOOP_Y_mul_5_itm_1 <= z_out_6[10:0];
    LOOP_WIDTH_mul_2_itm <= z_out;
  end
  always @(posedge clk) begin
    if ( ~ (fsm_output[12]) ) begin
      LOOP_Y_mul_5_itm_2_6_0 <= MUX1HOT_v_7_3_2(LOOP_Y_acc_14_itm_1_6_0, LOOP_WIDTH_acc_6_nl,
          (LOOP_Y_mul_5_itm_1[6:0]), {LOOP_Y_LOOP_Y_nor_nl , (fsm_output[11]) , (fsm_output[9])});
    end
  end
  always @(posedge clk) begin
    if ( i_or_cse ) begin
      i_sva_6_1 <= MUX_v_6_2_2(6'b000000, (i_sva_2[6:1]), (fsm_output[14]));
      i_sva_0 <= MUX_s_1_2_2((kernel_size[1]), (i_sva_2[0]), fsm_output[14]);
    end
  end
  always @(posedge clk) begin
    if ( ~((~ LOOP_Y_stage_0_4) | (fsm_output[11:10]!=2'b00)) ) begin
      temp_lpi_7_dfm <= MUX_v_12_2_2(temp_lpi_7, temp_sva_2, and_60_nl);
    end
  end
  always @(posedge clk) begin
    if ( (~((~ LOOP_Y_stage_0_4) | exit_LOOP_Y_sva_3 | LOOP_Y_asn_16_itm_3)) | j_or_cse
        | (fsm_output[10]) ) begin
      temp_lpi_7 <= MUX_v_12_2_2(12'b000000000000, temp_mux_nl, not_89_nl);
    end
  end
  always @(posedge clk) begin
    if ( j_or_cse ) begin
      j_sva_6_1 <= MUX_v_6_2_2(6'b000000, (LOOP_Y_mul_5_itm_2_6_0[6:1]), (fsm_output[13]));
      j_sva_0 <= MUX_s_1_2_2((kernel_size[1]), (LOOP_Y_mul_5_itm_2_6_0[0]), fsm_output[13]);
    end
  end
  always @(posedge clk) begin
    if ( x_or_cse ) begin
      x_sva <= MUX_v_3_2_2((signext_3_1(kernel_size[1])), x_sva_3, fsm_output[10]);
    end
  end
  assign nl_padded_width_acc_psp_sva  = conv_u2u_6_7(width[6:1]) + conv_u2u_2_7(padding);
  assign nl_padded_height_7_1_sva  = conv_u2u_6_7(height[6:1]) + conv_u2u_2_7(padding);
  assign LOOP_Y_LOOP_Y_and_nl = LOOP_Y_stage_0 & (~ z_out_4_3);
  assign LOOP_Y_mux_15_nl = MUX_s_1_2_2((~ for_for_for_acc_10_itm_7_1), LOOP_Y_LOOP_Y_and_nl,
      fsm_output[9]);
  assign LOOP_Y_LOOP_Y_and_1_nl = LOOP_Y_stage_0_3 & for_for_for_acc_10_itm_7_1;
  assign LOOP_Y_mux_16_nl = MUX_s_1_2_2(LOOP_Y_LOOP_Y_and_1_nl, LOOP_Y_stage_0_2,
      fsm_output[9]);
  assign LOOP_Y_mux_17_nl = MUX_s_1_2_2(LOOP_Y_stage_0_4, exit_LOOP_Y_sva_st_2, fsm_output[9]);
  assign for_c_mux_nl = MUX_v_8_2_2(for_for_for_mul_1_itm_1_7_0, out_c_sva_1_mx0w2,
      fsm_output[16]);
  assign out_c_nor_nl = ~((fsm_output[0]) | (fsm_output[17]) | (fsm_output[5]) |
      (fsm_output[4]) | or_dcpl_33);
  assign for_c_for_c_and_nl = MUX_v_8_2_2(8'b00000000, for_c_mux_nl, out_c_nor_nl);
  assign and_109_nl = and_dcpl_24 & (fsm_output[4:1]==4'b0000);
  assign nl_for_for_for_acc_itm_1  = (z_out[13:0]) + conv_u2u_7_14(LOOP_Y_acc_14_itm_1_6_0);
  assign for_for_for_mux_13_nl = MUX_v_7_2_2(height, in_channels, fsm_output[9]);
  assign for_for_for_mux_14_nl = MUX_v_8_2_2(for_c_sva, for_for_for_mul_1_itm_1_7_0,
      fsm_output[9]);
  assign nl_reg_for_for_for_mul_4_itm_1_cse  = for_for_for_mux_13_nl * for_for_for_mux_14_nl;
  assign for_for_h_mux_1_nl = MUX_v_7_2_2(LOOP_WIDTH_mul_1_itm_6_0, for_for_h_sva_1_mx0w2,
      fsm_output[3]);
  assign for_for_h_or_nl = (fsm_output[3:2]!=2'b00);
  assign for_for_h_for_for_h_and_nl = MUX_v_7_2_2(7'b0000000, for_for_h_mux_1_nl,
      for_for_h_or_nl);
  assign nl_for_for_for_acc_7_nl = LOOP_Y_acc_14_itm_1_6_0 + 7'b0000001;
  assign for_for_for_acc_7_nl = nl_for_for_for_acc_7_nl[6:0];
  assign for_for_h_for_for_h_and_1_nl = MUX_v_7_2_2(7'b0000000, for_for_for_acc_7_nl,
      (fsm_output[2]));
  assign nl_LOOP_Y_acc_13_nl = y_sva + 3'b001;
  assign LOOP_Y_acc_13_nl = nl_LOOP_Y_acc_13_nl[2:0];
  assign nl_LOOP_Y_acc_15_itm_1  = conv_s2s_5_6(z_out_1) + conv_s2s_3_6(LOOP_Y_asn_12_itm_1)
      + conv_u2s_1_6(kernel_size[1]);
  assign for_for_for_for_for_for_and_3_nl = (LOOP_Y_acc_4_itm[8]) & (fsm_output[9]);
  assign nl_for_for_for_acc_13_nl = conv_u2u_7_8(LOOP_WIDTH_mul_1_itm_6_0) + conv_u2u_2_8(padding);
  assign for_for_for_acc_13_nl = nl_for_for_for_acc_13_nl[7:0];
  assign for_for_for_mux_12_nl = MUX_v_8_2_2(for_for_for_acc_13_nl, (LOOP_Y_acc_4_itm[7:0]),
      fsm_output[9]);
  assign nl_LOOP_Y_mul_2_itm_1  = $signed(conv_u2s_8_9({padded_width_acc_psp_sva
      , (width[0])})) * $signed(({for_for_for_for_for_for_and_3_nl , for_for_for_mux_12_nl}));
  assign nl_LOOP_WIDTH_acc_6_nl = ({j_sva_6_1 , j_sva_0}) + 7'b0000001;
  assign LOOP_WIDTH_acc_6_nl = nl_LOOP_WIDTH_acc_6_nl[6:0];
  assign LOOP_Y_LOOP_Y_nor_nl = ~((fsm_output[11]) | (fsm_output[9]));
  assign and_60_nl = LOOP_Y_stage_0_4 & (~ exit_LOOP_Y_sva_3);
  assign temp_mux_nl = MUX_v_12_2_2(temp_sva_2, temp_lpi_7_dfm, fsm_output[10]);
  assign not_89_nl = ~ j_or_cse;
  assign for_for_for_for_for_for_and_2_nl = (LOOP_WIDTH_acc_9_itm[7]) & (fsm_output[11]);
  assign for_for_for_mux_11_nl = MUX_v_7_2_2(LOOP_WIDTH_mul_1_itm_6_0, (LOOP_WIDTH_acc_9_itm[6:0]),
      fsm_output[11]);
  assign nl_z_out = $signed(conv_u2s_7_8(width)) * $signed(({for_for_for_for_for_for_and_2_nl
      , for_for_for_mux_11_nl}));
  assign z_out = nl_z_out[14:0];
  assign filter_size_filter_size_and_1_nl = MUX_v_2_2_2(2'b00, (LOOP_Y_acc_10_itm[3:2]),
      (fsm_output[9]));
  assign filter_size_mux_3_nl = MUX_v_2_2_2(kernel_size, (LOOP_Y_acc_10_itm[1:0]),
      fsm_output[9]);
  assign nl_z_out_1 = $signed(conv_u2s_2_3(kernel_size)) * $signed(({filter_size_filter_size_and_1_nl
      , filter_size_mux_3_nl}));
  assign z_out_1 = nl_z_out_1[4:0];
  assign LOOP_WIDTH_LOOP_WIDTH_and_2_nl = (LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm_1[4])
      & (fsm_output[9]);
  assign LOOP_WIDTH_mux_5_nl = MUX_v_7_2_2((for_for_for_mul_1_itm_1_7_0[6:0]), ({{2{LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm_1[4]}},
      LOOP_Y_read_rom_UNET_IP_filters_pretrain_rom_3_map_1_itm_1}), fsm_output[9]);
  assign LOOP_WIDTH_LOOP_WIDTH_and_3_nl = MUX_v_5_2_2(5'b00000, LOOP_WIDTH_mul_1_itm_11_7,
      (fsm_output[9]));
  assign LOOP_WIDTH_mux_6_nl = MUX_v_7_2_2(height, LOOP_WIDTH_mul_1_itm_6_0, fsm_output[9]);
  assign nl_z_out_2 = $signed(({LOOP_WIDTH_LOOP_WIDTH_and_2_nl , LOOP_WIDTH_mux_5_nl}))
      * $signed(conv_u2s_12_13({LOOP_WIDTH_LOOP_WIDTH_and_3_nl , LOOP_WIDTH_mux_6_nl}));
  assign z_out_2 = nl_z_out_2[13:0];
  assign LOOP_Y_mux_19_nl = MUX_v_8_2_2((LOOP_Y_mul_1_itm_1[7:0]), for_for_for_mul_1_itm_1_7_0,
      fsm_output[2]);
  assign nl_z_out_3 = ({padded_width_acc_psp_sva , (width[0])}) * ({(LOOP_Y_mul_1_itm_1[14:8])
      , LOOP_Y_mux_19_nl});
  assign z_out_3 = nl_z_out_3[15:0];
  assign LOOP_Y_mux_20_nl = MUX_v_3_2_2((~ y_sva), (~ x_sva_3), fsm_output[10]);
  assign nl_acc_nl = conv_s2u_4_5({LOOP_Y_mux_20_nl , 1'b1}) + conv_u2u_2_5({(kernel_size[1])
      , 1'b1});
  assign acc_nl = nl_acc_nl[4:0];
  assign z_out_4_3 = readslicef_5_1_4(acc_nl);
  assign nl_for_for_acc_nl = ({1'b1 , (~ height)}) + 8'b00000001;
  assign for_for_acc_nl = nl_for_for_acc_nl[7:0];
  assign z_out_5_7 = readslicef_8_1_7(for_for_acc_nl);
  assign LOOP_Y_LOOP_Y_and_8_nl = MUX_v_3_2_2(3'b000, (width[6:4]), LOOP_Y_or_itm);
  assign LOOP_Y_mux_21_nl = MUX_v_4_2_2(filter_size_3_0_sva, (width[3:0]), LOOP_Y_or_itm);
  assign LOOP_Y_mux_22_nl = MUX_v_2_2_2((reg_for_for_for_mul_4_itm_1_cse[13:12]),
      LOOP_WIDTH_mul_1_itm_13_12, fsm_output[12]);
  assign not_93_nl = ~ (fsm_output[9]);
  assign LOOP_Y_LOOP_Y_and_9_nl = MUX_v_2_2_2(2'b00, LOOP_Y_mux_22_nl, not_93_nl);
  assign LOOP_Y_mux_23_nl = MUX_v_4_2_2((reg_for_for_for_mul_4_itm_1_cse[11:8]),
      (LOOP_WIDTH_mul_1_itm_11_7[4:1]), fsm_output[12]);
  assign LOOP_Y_not_3_nl = ~ (fsm_output[9]);
  assign LOOP_Y_LOOP_Y_and_10_nl = MUX_v_4_2_2(4'b0000, LOOP_Y_mux_23_nl, LOOP_Y_not_3_nl);
  assign LOOP_Y_mux1h_55_nl = MUX1HOT_s_1_3_2((for_c_sva[7]), (reg_for_for_for_mul_4_itm_1_cse[7]),
      (LOOP_WIDTH_mul_1_itm_11_7[0]), {(fsm_output[9]) , (fsm_output[2]) , (fsm_output[12])});
  assign LOOP_Y_mux1h_56_nl = MUX1HOT_v_7_3_2((for_c_sva[6:0]), (reg_for_for_for_mul_4_itm_1_cse[6:0]),
      LOOP_WIDTH_mul_1_itm_6_0, {(fsm_output[9]) , (fsm_output[2]) , (fsm_output[12])});
  assign nl_z_out_6 = ({LOOP_Y_LOOP_Y_and_8_nl , LOOP_Y_mux_21_nl}) * ({LOOP_Y_LOOP_Y_and_9_nl
      , LOOP_Y_LOOP_Y_and_10_nl , LOOP_Y_mux1h_55_nl , LOOP_Y_mux1h_56_nl});
  assign z_out_6 = nl_z_out_6[14:0];

  function automatic  MUX1HOT_s_1_3_2;
    input  input_2;
    input  input_1;
    input  input_0;
    input [2:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_3_2;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [2:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    MUX1HOT_v_7_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input  sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input  sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [5:0] MUX_v_6_2_2;
    input [5:0] input_0;
    input [5:0] input_1;
    input  sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input  sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_5_1_4;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_5_1_4 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [11:0] signext_12_8;
    input [7:0] vector;
  begin
    signext_12_8= {{4{vector[7]}}, vector};
  end
  endfunction


  function automatic [2:0] signext_3_1;
    input  vector;
  begin
    signext_3_1= {{2{vector}}, vector};
  end
  endfunction


  function automatic [7:0] conv_s2s_1_8 ;
    input [0:0]  vector ;
  begin
    conv_s2s_1_8 = {{7{vector[0]}}, vector};
  end
  endfunction


  function automatic [3:0] conv_s2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function automatic [5:0] conv_s2s_3_6 ;
    input [2:0]  vector ;
  begin
    conv_s2s_3_6 = {{3{vector[2]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_s2s_3_9 ;
    input [2:0]  vector ;
  begin
    conv_s2s_3_9 = {{6{vector[2]}}, vector};
  end
  endfunction


  function automatic [5:0] conv_s2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_s2s_5_6 = {vector[4], vector};
  end
  endfunction


  function automatic [11:0] conv_s2s_6_12 ;
    input [5:0]  vector ;
  begin
    conv_s2s_6_12 = {{6{vector[5]}}, vector};
  end
  endfunction


  function automatic [14:0] conv_s2s_8_15 ;
    input [7:0]  vector ;
  begin
    conv_s2s_8_15 = {{7{vector[7]}}, vector};
  end
  endfunction


  function automatic [15:0] conv_s2s_9_16 ;
    input [8:0]  vector ;
  begin
    conv_s2s_9_16 = {{7{vector[8]}}, vector};
  end
  endfunction


  function automatic [18:0] conv_s2s_12_19 ;
    input [11:0]  vector ;
  begin
    conv_s2s_12_19 = {{7{vector[11]}}, vector};
  end
  endfunction


  function automatic [4:0] conv_s2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_s2u_4_5 = {vector[3], vector};
  end
  endfunction


  function automatic [3:0] conv_u2s_1_4 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_4 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_1_6 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_6 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_1_8 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_8 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 =  {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 =  {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2s_7_9 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_9 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 =  {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 =  {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 =  {1'b0, vector};
  end
  endfunction


  function automatic [18:0] conv_u2s_18_19 ;
    input [17:0]  vector ;
  begin
    conv_u2s_18_19 =  {1'b0, vector};
  end
  endfunction


  function automatic [4:0] conv_u2u_2_5 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_5 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_2_7 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_7 = {{5{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_2_8 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_8 = {{6{1'b0}}, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_2_15 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_15 = {{13{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_7_14 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_14 = {{7{1'b0}}, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_7_15 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_15 = {{8{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2u_14_15 = {1'b0, vector};
  end
  endfunction


  function automatic [15:0] conv_u2u_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2u_15_16 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_conv2d
// ------------------------------------------------------------------


module UNET_IP_conv2d (
  clk, rst, arst_n, input_rsc_radr, input_rsc_re, input_rsc_q, input_rsc_clken, input_triosy_lz,
      padded_input_rsc_wadr, padded_input_rsc_d, padded_input_rsc_we, padded_input_rsc_radr,
      padded_input_rsc_re, padded_input_rsc_q, padded_input_rsc_clken, padded_input_triosy_lz,
      output_rsc_wadr, output_rsc_d, output_rsc_we, output_rsc_clken, output_triosy_lz,
      height, width, kernel_size, padding, filter_offset, in_channels, out_channels
);
  input clk;
  input rst;
  input arst_n;
  output [14:0] input_rsc_radr;
  output input_rsc_re;
  input [11:0] input_rsc_q;
  output input_rsc_clken;
  output input_triosy_lz;
  output [15:0] padded_input_rsc_wadr;
  output [11:0] padded_input_rsc_d;
  output padded_input_rsc_we;
  output [15:0] padded_input_rsc_radr;
  output padded_input_rsc_re;
  input [11:0] padded_input_rsc_q;
  output padded_input_rsc_clken;
  output padded_input_triosy_lz;
  output [14:0] output_rsc_wadr;
  output [11:0] output_rsc_d;
  output output_rsc_we;
  output output_rsc_clken;
  output output_triosy_lz;
  input [6:0] height;
  input [6:0] width;
  input [1:0] kernel_size;
  input [1:0] padding;
  input [19:0] filter_offset;
  input [6:0] in_channels;
  input [6:0] out_channels;


  // Interconnect Declarations
  wire [11:0] input_rsci_q_d;
  wire [14:0] input_rsci_radr_d;
  wire [11:0] padded_input_rsci_q_d;
  wire [15:0] padded_input_rsci_radr_d;
  wire [15:0] padded_input_rsci_wadr_d;
  wire [11:0] output_rsci_d_d;
  wire [14:0] output_rsci_wadr_d;
  wire input_rsci_re_d_iff;
  wire padded_input_rsci_re_d_iff;
  wire padded_input_rsci_we_d_iff;
  wire output_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  UNET_IP_conv2d_Xilinx_RAMS_DIST_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
      input_rsci (
      .clken(input_rsc_clken),
      .q(input_rsc_q),
      .re(input_rsc_re),
      .radr(input_rsc_radr),
      .clken_d(1'b1),
      .q_d(input_rsci_q_d),
      .radr_d(input_rsci_radr_d),
      .re_d(input_rsci_re_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(input_rsci_re_d_iff)
    );
  UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_rwport_en_2_16_12_34848_1_34848_12_1_gen
      padded_input_rsci (
      .clken(padded_input_rsc_clken),
      .q(padded_input_rsc_q),
      .re(padded_input_rsc_re),
      .radr(padded_input_rsc_radr),
      .we(padded_input_rsc_we),
      .d(padded_input_rsc_d),
      .wadr(padded_input_rsc_wadr),
      .clken_d(1'b1),
      .d_d(input_rsci_q_d),
      .q_d(padded_input_rsci_q_d),
      .radr_d(padded_input_rsci_radr_d),
      .re_d(padded_input_rsci_re_d_iff),
      .wadr_d(padded_input_rsci_wadr_d),
      .we_d(padded_input_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(padded_input_rsci_we_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(padded_input_rsci_re_d_iff)
    );
  UNET_IP_conv2d_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_3_15_12_32768_1_32768_12_1_gen
      output_rsci (
      .clken(output_rsc_clken),
      .we(output_rsc_we),
      .d(output_rsc_d),
      .wadr(output_rsc_wadr),
      .clken_d(1'b1),
      .d_d(output_rsci_d_d),
      .wadr_d(output_rsci_wadr_d),
      .we_d(output_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(output_rsci_we_d_iff)
    );
  UNET_IP_conv2d_run_conv UNET_IP_conv2d_run_conv_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .input_triosy_lz(input_triosy_lz),
      .padded_input_triosy_lz(padded_input_triosy_lz),
      .output_triosy_lz(output_triosy_lz),
      .height(height),
      .width(width),
      .kernel_size(kernel_size),
      .padding(padding),
      .filter_offset(filter_offset),
      .in_channels(in_channels),
      .out_channels(out_channels),
      .input_rsci_radr_d(input_rsci_radr_d),
      .padded_input_rsci_q_d(padded_input_rsci_q_d),
      .padded_input_rsci_radr_d(padded_input_rsci_radr_d),
      .padded_input_rsci_wadr_d(padded_input_rsci_wadr_d),
      .output_rsci_d_d(output_rsci_d_d),
      .output_rsci_wadr_d(output_rsci_wadr_d),
      .input_rsci_re_d_pff(input_rsci_re_d_iff),
      .padded_input_rsci_re_d_pff(padded_input_rsci_re_d_iff),
      .padded_input_rsci_we_d_pff(padded_input_rsci_we_d_iff),
      .output_rsci_we_d_pff(output_rsci_we_d_iff)
    );
endmodule



