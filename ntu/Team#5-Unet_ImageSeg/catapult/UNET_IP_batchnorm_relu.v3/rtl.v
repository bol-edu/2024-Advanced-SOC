// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r12016@cad40
//  Generated date: Thu Jun 13 03:09:42 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_batchnorm_relu_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_2_15_12_32768_1_32768_12_1_gen
// ------------------------------------------------------------------


module UNET_IP_batchnorm_relu_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_2_15_12_32768_1_32768_12_1_gen
    (
  clken, we, d, wadr, clken_d, d_d, wadr_d, we_d, writeA_w_ram_ir_internal_WMASK_B_d
);
  output clken;
  output we;
  output [11:0] d;
  output [14:0] wadr;
  input clken_d;
  input [11:0] d_d;
  input [14:0] wadr_d;
  input we_d;
  input writeA_w_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign we = (writeA_w_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign wadr = (wadr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_batchnorm_relu_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
// ------------------------------------------------------------------


module UNET_IP_batchnorm_relu_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
    (
  clken, q, re, radr, clken_d, q_d, radr_d, re_d, readA_r_ram_ir_internal_RMASK_B_d
);
  output clken;
  input [11:0] q;
  output re;
  output [14:0] radr;
  input clken_d;
  output [11:0] q_d;
  input [14:0] radr_d;
  input re_d;
  input readA_r_ram_ir_internal_RMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign clken = (clken_d);
  assign q_d = q;
  assign re = (readA_r_ram_ir_internal_RMASK_B_d);
  assign radr = (radr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_batchnorm_relu_run_batch_run_batch_fsm
//  FSM Module
// ------------------------------------------------------------------


module UNET_IP_batchnorm_relu_run_batch_run_batch_fsm (
  clk, rst, arst_n, fsm_output, main_C_0_tr0, LOOP_MEAN_C_0_tr0, LOOP_CH_C_5_tr0,
      LOOP_VAR_C_3_tr0, LOOP_OUT_C_0_tr0, LOOP_CH_C_12_tr0
);
  input clk;
  input rst;
  input arst_n;
  output [20:0] fsm_output;
  reg [20:0] fsm_output;
  input main_C_0_tr0;
  input LOOP_MEAN_C_0_tr0;
  input LOOP_CH_C_5_tr0;
  input LOOP_VAR_C_3_tr0;
  input LOOP_OUT_C_0_tr0;
  input LOOP_CH_C_12_tr0;


  // FSM State Type Declaration for UNET_IP_batchnorm_relu_run_batch_run_batch_fsm_1
  parameter
    main_C_0 = 5'd0,
    LOOP_MEAN_C_0 = 5'd1,
    LOOP_CH_C_0 = 5'd2,
    LOOP_CH_C_1 = 5'd3,
    LOOP_CH_C_2 = 5'd4,
    LOOP_CH_C_3 = 5'd5,
    LOOP_CH_C_4 = 5'd6,
    LOOP_CH_C_5 = 5'd7,
    LOOP_VAR_C_0 = 5'd8,
    LOOP_VAR_C_1 = 5'd9,
    LOOP_VAR_C_2 = 5'd10,
    LOOP_VAR_C_3 = 5'd11,
    LOOP_CH_C_6 = 5'd12,
    LOOP_CH_C_7 = 5'd13,
    LOOP_CH_C_8 = 5'd14,
    LOOP_CH_C_9 = 5'd15,
    LOOP_CH_C_10 = 5'd16,
    LOOP_CH_C_11 = 5'd17,
    LOOP_OUT_C_0 = 5'd18,
    LOOP_CH_C_12 = 5'd19,
    main_C_1 = 5'd20;

  reg [4:0] state_var;
  reg [4:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : UNET_IP_batchnorm_relu_run_batch_run_batch_fsm_1
    case (state_var)
      LOOP_MEAN_C_0 : begin
        fsm_output = 21'b000000000000000000010;
        if ( LOOP_MEAN_C_0_tr0 ) begin
          state_var_NS = LOOP_CH_C_0;
        end
        else begin
          state_var_NS = LOOP_MEAN_C_0;
        end
      end
      LOOP_CH_C_0 : begin
        fsm_output = 21'b000000000000000000100;
        state_var_NS = LOOP_CH_C_1;
      end
      LOOP_CH_C_1 : begin
        fsm_output = 21'b000000000000000001000;
        state_var_NS = LOOP_CH_C_2;
      end
      LOOP_CH_C_2 : begin
        fsm_output = 21'b000000000000000010000;
        state_var_NS = LOOP_CH_C_3;
      end
      LOOP_CH_C_3 : begin
        fsm_output = 21'b000000000000000100000;
        state_var_NS = LOOP_CH_C_4;
      end
      LOOP_CH_C_4 : begin
        fsm_output = 21'b000000000000001000000;
        state_var_NS = LOOP_CH_C_5;
      end
      LOOP_CH_C_5 : begin
        fsm_output = 21'b000000000000010000000;
        if ( LOOP_CH_C_5_tr0 ) begin
          state_var_NS = LOOP_CH_C_6;
        end
        else begin
          state_var_NS = LOOP_VAR_C_0;
        end
      end
      LOOP_VAR_C_0 : begin
        fsm_output = 21'b000000000000100000000;
        state_var_NS = LOOP_VAR_C_1;
      end
      LOOP_VAR_C_1 : begin
        fsm_output = 21'b000000000001000000000;
        state_var_NS = LOOP_VAR_C_2;
      end
      LOOP_VAR_C_2 : begin
        fsm_output = 21'b000000000010000000000;
        state_var_NS = LOOP_VAR_C_3;
      end
      LOOP_VAR_C_3 : begin
        fsm_output = 21'b000000000100000000000;
        if ( LOOP_VAR_C_3_tr0 ) begin
          state_var_NS = LOOP_CH_C_6;
        end
        else begin
          state_var_NS = LOOP_VAR_C_0;
        end
      end
      LOOP_CH_C_6 : begin
        fsm_output = 21'b000000001000000000000;
        state_var_NS = LOOP_CH_C_7;
      end
      LOOP_CH_C_7 : begin
        fsm_output = 21'b000000010000000000000;
        state_var_NS = LOOP_CH_C_8;
      end
      LOOP_CH_C_8 : begin
        fsm_output = 21'b000000100000000000000;
        state_var_NS = LOOP_CH_C_9;
      end
      LOOP_CH_C_9 : begin
        fsm_output = 21'b000001000000000000000;
        state_var_NS = LOOP_CH_C_10;
      end
      LOOP_CH_C_10 : begin
        fsm_output = 21'b000010000000000000000;
        state_var_NS = LOOP_CH_C_11;
      end
      LOOP_CH_C_11 : begin
        fsm_output = 21'b000100000000000000000;
        state_var_NS = LOOP_OUT_C_0;
      end
      LOOP_OUT_C_0 : begin
        fsm_output = 21'b001000000000000000000;
        if ( LOOP_OUT_C_0_tr0 ) begin
          state_var_NS = LOOP_CH_C_12;
        end
        else begin
          state_var_NS = LOOP_OUT_C_0;
        end
      end
      LOOP_CH_C_12 : begin
        fsm_output = 21'b010000000000000000000;
        if ( LOOP_CH_C_12_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = LOOP_MEAN_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 21'b100000000000000000000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 21'b000000000000000000001;
        if ( main_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = LOOP_MEAN_C_0;
        end
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= main_C_0;
    end
    else if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_batchnorm_relu_run_batch_wait_dp
// ------------------------------------------------------------------


module UNET_IP_batchnorm_relu_run_batch_wait_dp (
  clk, rst, arst_n, operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z, operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z;
  output [27:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg;


  // Interconnect Declarations
  reg [27:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg_pconst_33_6;


  // Interconnect Declarations for Component Instantiations 
  assign operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg = operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg_pconst_33_6;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg_pconst_33_6 <= 28'b0000000000000000000000000000;
    end
    else if ( rst ) begin
      operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg_pconst_33_6 <= 28'b0000000000000000000000000000;
    end
    else begin
      operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg_pconst_33_6 <= operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z[33:6];
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_batchnorm_relu_run_batch
// ------------------------------------------------------------------


module UNET_IP_batchnorm_relu_run_batch (
  clk, rst, arst_n, input_triosy_lz, output_triosy_lz, channels, height, width, offset,
      input_rsci_q_d, input_rsci_radr_d, output_rsci_d_d, output_rsci_wadr_d, operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a,
      operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b, operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z,
      input_rsci_re_d_pff, output_rsci_we_d_pff
);
  input clk;
  input rst;
  input arst_n;
  output input_triosy_lz;
  output output_triosy_lz;
  input [6:0] channels;
  input [6:0] height;
  input [6:0] width;
  input [9:0] offset;
  input [11:0] input_rsci_q_d;
  output [14:0] input_rsci_radr_d;
  output [11:0] output_rsci_d_d;
  wire [12:0] nl_output_rsci_d_d;
  output [14:0] output_rsci_wadr_d;
  output [33:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a;
  output [12:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b;
  reg [12:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b;
  input [33:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z;
  output input_rsci_re_d_pff;
  output output_rsci_we_d_pff;


  // Interconnect Declarations
  wire [21:0] LOOP_OUT_div_5_cmp_z;
  wire [21:0] LOOP_OUT_div_5_cmp_1_z;
  wire [21:0] LOOP_OUT_div_5_cmp_2_z;
  wire [21:0] LOOP_OUT_div_5_cmp_3_z;
  wire [21:0] LOOP_OUT_div_5_cmp_4_z;
  wire [27:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg;
  reg [15:0] LOOP_OUT_div_5_cmp_a_21_6;
  reg [13:0] LOOP_OUT_div_5_cmp_b_13_0;
  reg [15:0] LOOP_OUT_div_5_cmp_1_a_21_6;
  reg [13:0] LOOP_OUT_div_5_cmp_1_b_13_0;
  reg [15:0] LOOP_OUT_div_5_cmp_2_a_21_6;
  reg [13:0] LOOP_OUT_div_5_cmp_2_b_13_0;
  reg [15:0] LOOP_OUT_div_5_cmp_3_a_21_6;
  reg [13:0] LOOP_OUT_div_5_cmp_3_b_13_0;
  reg [15:0] LOOP_OUT_div_5_cmp_4_a_21_6;
  reg [13:0] LOOP_OUT_div_5_cmp_4_b_13_0;
  wire [20:0] fsm_output;
  wire [2:0] LOOP_OUT_LOOP_OUT_acc_tmp;
  wire [3:0] nl_LOOP_OUT_LOOP_OUT_acc_tmp;
  wire ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_or_tmp;
  wire and_dcpl_45;
  wire and_dcpl_46;
  wire and_dcpl_49;
  wire and_dcpl_50;
  wire or_dcpl_54;
  wire or_dcpl_55;
  wire or_dcpl_56;
  wire or_dcpl_58;
  wire or_dcpl_60;
  wire and_dcpl_63;
  wire and_dcpl_65;
  wire or_dcpl_62;
  wire or_dcpl_64;
  wire and_dcpl_77;
  wire and_dcpl_79;
  wire and_dcpl_84;
  wire and_dcpl_85;
  wire and_dcpl_87;
  wire and_dcpl_89;
  wire and_dcpl_91;
  wire and_dcpl_92;
  wire and_dcpl_94;
  reg LOOP_MEAN_stage_0;
  wire exit_LOOP_CH_sva_mx0;
  reg LOOP_MEAN_stage_0_2;
  reg LOOP_OUT_stage_0;
  reg exit_LOOP_OUT_sva_st_8;
  reg exit_LOOP_OUT_sva_st_7;
  reg exit_LOOP_OUT_sva_st_6;
  reg exit_LOOP_OUT_sva_st_5;
  reg exit_LOOP_OUT_sva_st_4;
  reg LOOP_OUT_stage_0_5;
  reg exit_LOOP_OUT_sva_st_3;
  reg exit_LOOP_OUT_sva_st_2;
  reg exit_LOOP_OUT_sva_st_1;
  reg LOOP_MEAN_stage_0_3;
  reg LOOP_MEAN_asn_6_itm_2;
  reg [2:0] LOOP_OUT_div_5cyc_st_4;
  reg LOOP_OUT_stage_0_8;
  reg ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_1;
  reg ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_1;
  reg [20:0] LOOP_CH_var_21_1_sva;
  reg [2:0] LOOP_OUT_div_5cyc_st_1;
  reg LOOP_OUT_stage_0_4;
  reg exit_LOOP_OUT_sva_st_9;
  reg ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_3;
  reg [2:0] LOOP_OUT_div_5cyc_st_5;
  reg LOOP_OUT_stage_0_9;
  reg reg_output_triosy_obj_ld_cse;
  wire nor_4_cse;
  wire or_cse;
  wire or_123_ssc;
  reg [13:0] reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd;
  reg [11:0] reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_1;
  reg [1:0] reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_2;
  wire or_159_cse;
  wire nor_21_cse;
  reg [14:0] LOOP_MEAN_mul_itm_1;
  reg [12:0] LOOP_MEAN_asn_3_itm_1;
  reg [14:0] LOOP_VAR_acc_1_itm;
  wire [15:0] nl_LOOP_VAR_acc_1_itm;
  reg [11:0] LOOP_OUT_slc_LOOP_OUT_mul_sdt_25_4_21_2_itm_1_11_0;
  reg [3:0] LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_2;
  wire [31:0] operator_32_8_false_AC_TRN_AC_WRAP_lshift_itm;
  wire [4:0] LOOP_OUT_read_rom_UNET_IP_gamma_pretrain_rom_map_1_itm;
  wire [3:0] LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm;
  wire [20:0] operator_22_0_false_AC_TRN_AC_WRAP_lshift_itm;
  wire [19:0] z_out;
  wire [20:0] nl_z_out;
  wire [14:0] z_out_1;
  wire [15:0] nl_z_out_1;
  reg [12:0] num_elements_sva;
  reg [7:0] LOOP_CH_c_sva;
  reg [27:0] LOOP_CH_var_tmp_33_6_sva;
  reg [12:0] LOOP_CH_i_1_sva;
  reg [13:0] LOOP_CH_mean_sva;
  reg [2:0] LOOP_OUT_div_5cyc;
  reg LOOP_OUT_stage_0_6;
  reg LOOP_OUT_stage_0_7;
  reg [13:0] ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_qr_sva_1_1;
  reg ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_2;
  reg [12:0] ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva_1;
  wire [13:0] nl_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva_1;
  reg [14:0] LOOP_OUT_mul_itm_1;
  reg [11:0] ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_slc_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_1_20_7_11_0_itm_1;
  reg [5:0] ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_itm_1;
  reg [9:0] ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_1_itm_1;
  reg [4:0] ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_1;
  reg [4:0] ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_2;
  reg [4:0] LOOP_OUT_read_rom_UNET_IP_gamma_pretrain_rom_map_1_itm_1;
  reg [15:0] LOOP_OUT_acc_5_itm_1;
  reg [3:0] LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_1;
  reg [2:0] LOOP_OUT_div_5cyc_st_2;
  reg [2:0] LOOP_OUT_div_5cyc_st_3;
  reg [13:0] mut_1_1_13_0;
  reg [17:0] LOOP_OUT_div_tmp_duc_17_0;
  wire LOOP_OUT_div_5_cmp_4_b_13_0_mx0c1;
  wire LOOP_OUT_div_5_cmp_3_b_13_0_mx0c1;
  wire LOOP_OUT_div_5_cmp_2_b_13_0_mx0c1;
  wire LOOP_OUT_div_5_cmp_1_b_13_0_mx0c1;
  wire LOOP_OUT_div_5_cmp_b_13_0_mx0c1;
  wire [7:0] LOOP_CH_c_sva_2;
  wire [8:0] nl_LOOP_CH_c_sva_2;
  wire [27:0] LOOP_CH_var_tmp_33_6_sva_mx0w1;
  wire [28:0] nl_LOOP_CH_var_tmp_33_6_sva_mx0w1;
  wire [12:0] LOOP_CH_i_1_sva_2;
  wire [13:0] nl_LOOP_CH_i_1_sva_2;
  wire [15:0] LOOP_VAR_acc_4_cse_sva_mx0w1;
  wire [16:0] nl_LOOP_VAR_acc_4_cse_sva_mx0w1;
  wire [11:0] LOOP_CH_mean_tmp_19_8_sva_2;
  wire [12:0] nl_LOOP_CH_mean_tmp_19_8_sva_2;
  wire [13:0] ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_tmp_1;
  wire [14:0] LOOP_VAR_mul_4;
  wire [19:0] nl_LOOP_VAR_mul_4;
  wire [2:0] LOOP_OUT_acc_imod_1;
  wire [3:0] nl_LOOP_OUT_acc_imod_1;
  wire [2:0] LOOP_OUT_acc_idiv_1;
  wire [3:0] nl_LOOP_OUT_acc_idiv_1;
  wire [9:0] LOOP_OUT_acc_3_cse_sva_1;
  wire [10:0] nl_LOOP_OUT_acc_3_cse_sva_1;
  reg [2:0] LOOP_VAR_acc_4_cse_sva_14_12;
  reg [11:0] LOOP_VAR_acc_4_cse_sva_11_0;
  wire [4:0] leading_sign_22_0_c5945fbeaae02c4edab24e6eca5e07cb263f_1;
  wire and_107_rgt;
  wire and_108_rgt;
  wire and_109_rgt;
  wire and_110_rgt;
  wire and_111_rgt;
  reg [2:0] reg_LOOP_CH_idx_14_0_sva_2_ftd;
  reg [11:0] reg_LOOP_CH_idx_14_0_sva_2_ftd_1;
  reg [2:0] LOOP_CH_idx_14_0_sva_3_14_12;
  reg [11:0] LOOP_CH_idx_14_0_sva_3_11_0;
  wire LOOP_CH_c_or_cse;
  reg [2:0] reg_LOOP_CH_idx_14_0_sva_4_ftd;
  reg [11:0] reg_LOOP_CH_idx_14_0_sva_4_ftd_1;
  reg [2:0] LOOP_CH_idx_14_0_sva_5_14_12;
  reg [11:0] LOOP_CH_idx_14_0_sva_5_11_0;
  reg [2:0] reg_LOOP_CH_idx_14_0_sva_6_ftd;
  reg [11:0] reg_LOOP_CH_idx_14_0_sva_6_ftd_1;
  reg [2:0] LOOP_CH_idx_14_0_sva_7_14_12;
  reg [11:0] LOOP_CH_idx_14_0_sva_7_11_0;
  reg [2:0] reg_LOOP_CH_idx_14_0_sva_8_ftd;
  reg [11:0] reg_LOOP_CH_idx_14_0_sva_8_ftd_1;
  wire [24:0] ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1;
  wire LOOP_OUT_acc_10_itm_13_1;

  wire[13:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_mux_nl;
  wire operator_20_8_false_AC_TRN_AC_WRAP_13_false_or_1_nl;
  wire operator_20_8_false_AC_TRN_AC_WRAP_13_false_and_5_nl;
  wire operator_20_8_false_AC_TRN_AC_WRAP_13_false_or_nl;
  wire[1:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_mux_1_nl;
  wire LOOP_MEAN_mux1h_8_nl;
  wire LOOP_OUT_LOOP_OUT_and_nl;
  wire[13:0] LOOP_VAR_acc_7_nl;
  wire[14:0] nl_LOOP_VAR_acc_7_nl;
  wire[13:0] LOOP_VAR_acc_8_nl;
  wire[14:0] nl_LOOP_VAR_acc_8_nl;
  wire nor_29_nl;
  wire LOOP_MEAN_mux_3_nl;
  wire LOOP_OUT_mux_nl;
  wire[11:0] LOOP_CH_mean_tmp_LOOP_CH_mean_tmp_and_nl;
  wire[11:0] LOOP_CH_mean_tmp_mux_1_nl;
  wire and_159_nl;
  wire LOOP_CH_mean_tmp_nand_nl;
  wire or_164_nl;
  wire[17:0] LOOP_OUT_LOOP_OUT_mul_nl;
  wire signed [23:0] nl_LOOP_OUT_LOOP_OUT_mul_nl;
  wire[17:0] LOOP_OUT_mux1h_6_nl;
  wire and_105_nl;
  wire[2:0] LOOP_OUT_mux_10_nl;
  wire[4:0] ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qif_acc_nl;
  wire[5:0] nl_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qif_acc_nl;
  wire[7:0] LOOP_CH_acc_2_nl;
  wire[8:0] nl_LOOP_CH_acc_2_nl;
  wire[8:0] LOOP_CH_acc_3_nl;
  wire[9:0] nl_LOOP_CH_acc_3_nl;
  wire[27:0] LOOP_VAR_mul_2_nl;
  wire signed [31:0] nl_LOOP_VAR_mul_2_nl;
  wire[35:0] ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_nl;
  wire[36:0] nl_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_nl;
  wire[13:0] LOOP_OUT_acc_10_nl;
  wire[14:0] nl_LOOP_OUT_acc_10_nl;
  wire num_elements_num_elements_or_1_nl;
  wire num_elements_num_elements_and_3_nl;
  wire num_elements_mux_2_nl;
  wire[5:0] num_elements_mux1h_6_nl;
  wire num_elements_num_elements_and_4_nl;
  wire[4:0] num_elements_num_elements_and_5_nl;
  wire[4:0] num_elements_mux_3_nl;
  wire not_150_nl;
  wire[6:0] num_elements_mux1h_7_nl;
  wire[14:0] LOOP_OUT_mux_18_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [21:0] nl_LOOP_OUT_div_5_cmp_a;
  assign nl_LOOP_OUT_div_5_cmp_a = {LOOP_OUT_div_5_cmp_a_21_6 , 6'b000000};
  wire [14:0] nl_LOOP_OUT_div_5_cmp_b;
  assign nl_LOOP_OUT_div_5_cmp_b = {1'b0, LOOP_OUT_div_5_cmp_b_13_0};
  wire [21:0] nl_LOOP_OUT_div_5_cmp_1_a;
  assign nl_LOOP_OUT_div_5_cmp_1_a = {LOOP_OUT_div_5_cmp_1_a_21_6 , 6'b000000};
  wire [14:0] nl_LOOP_OUT_div_5_cmp_1_b;
  assign nl_LOOP_OUT_div_5_cmp_1_b = {1'b0, LOOP_OUT_div_5_cmp_1_b_13_0};
  wire [21:0] nl_LOOP_OUT_div_5_cmp_2_a;
  assign nl_LOOP_OUT_div_5_cmp_2_a = {LOOP_OUT_div_5_cmp_2_a_21_6 , 6'b000000};
  wire [14:0] nl_LOOP_OUT_div_5_cmp_2_b;
  assign nl_LOOP_OUT_div_5_cmp_2_b = {1'b0, LOOP_OUT_div_5_cmp_2_b_13_0};
  wire [21:0] nl_LOOP_OUT_div_5_cmp_3_a;
  assign nl_LOOP_OUT_div_5_cmp_3_a = {LOOP_OUT_div_5_cmp_3_a_21_6 , 6'b000000};
  wire [14:0] nl_LOOP_OUT_div_5_cmp_3_b;
  assign nl_LOOP_OUT_div_5_cmp_3_b = {1'b0, LOOP_OUT_div_5_cmp_3_b_13_0};
  wire [21:0] nl_LOOP_OUT_div_5_cmp_4_a;
  assign nl_LOOP_OUT_div_5_cmp_4_a = {LOOP_OUT_div_5_cmp_4_a_21_6 , 6'b000000};
  wire [14:0] nl_LOOP_OUT_div_5_cmp_4_b;
  assign nl_LOOP_OUT_div_5_cmp_4_b = {1'b0, LOOP_OUT_div_5_cmp_4_b_13_0};
  wire[12:0] ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_mux_1_nl;
  wire[10:0] ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_mux_2_nl;
  wire ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_and_nl;
  wire [24:0] nl_operator_32_8_false_AC_TRN_AC_WRAP_lshift_rg_a;
  assign ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_mux_1_nl
      = MUX_v_13_2_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva_1,
      (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1[24:12]),
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_2);
  assign ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_mux_2_nl
      = MUX_v_11_2_2((LOOP_MEAN_mul_itm_1[10:0]), (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1[11:1]),
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_2);
  assign ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_and_nl
      = (ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1[0])
      & ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_2;
  assign nl_operator_32_8_false_AC_TRN_AC_WRAP_lshift_rg_a = {ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_mux_1_nl
      , ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_mux_2_nl
      , ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_m1_and_nl};
  wire [21:0] nl_leading_sign_22_0_rg_mantissa;
  assign nl_leading_sign_22_0_rg_mantissa = {1'b0 , LOOP_CH_var_21_1_sva};
  wire  nl_UNET_IP_batchnorm_relu_run_batch_run_batch_fsm_inst_LOOP_CH_C_5_tr0;
  assign nl_UNET_IP_batchnorm_relu_run_batch_run_batch_fsm_inst_LOOP_CH_C_5_tr0 =
      ~ LOOP_MEAN_stage_0;
  wire  nl_UNET_IP_batchnorm_relu_run_batch_run_batch_fsm_inst_LOOP_OUT_C_0_tr0;
  assign nl_UNET_IP_batchnorm_relu_run_batch_run_batch_fsm_inst_LOOP_OUT_C_0_tr0
      = ~(LOOP_OUT_stage_0 | LOOP_MEAN_stage_0_2 | LOOP_MEAN_stage_0_3 | LOOP_OUT_stage_0_4
      | LOOP_OUT_stage_0_5 | LOOP_OUT_stage_0_6 | LOOP_OUT_stage_0_7 | LOOP_OUT_stage_0_8
      | LOOP_OUT_stage_0_9 | LOOP_MEAN_stage_0);
  mgc_io_sync_v2 #(.valid(32'sd0)) input_triosy_obj (
      .ld(reg_output_triosy_obj_ld_cse),
      .lz(input_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) output_triosy_obj (
      .ld(reg_output_triosy_obj_ld_cse),
      .lz(output_triosy_lz)
    );
  mgc_div #(.width_a(32'sd22),
  .width_b(32'sd15),
  .signd(32'sd1)) LOOP_OUT_div_5_cmp (
      .a(nl_LOOP_OUT_div_5_cmp_a[21:0]),
      .b(nl_LOOP_OUT_div_5_cmp_b[14:0]),
      .z(LOOP_OUT_div_5_cmp_z)
    );
  mgc_div #(.width_a(32'sd22),
  .width_b(32'sd15),
  .signd(32'sd1)) LOOP_OUT_div_5_cmp_1 (
      .a(nl_LOOP_OUT_div_5_cmp_1_a[21:0]),
      .b(nl_LOOP_OUT_div_5_cmp_1_b[14:0]),
      .z(LOOP_OUT_div_5_cmp_1_z)
    );
  mgc_div #(.width_a(32'sd22),
  .width_b(32'sd15),
  .signd(32'sd1)) LOOP_OUT_div_5_cmp_2 (
      .a(nl_LOOP_OUT_div_5_cmp_2_a[21:0]),
      .b(nl_LOOP_OUT_div_5_cmp_2_b[14:0]),
      .z(LOOP_OUT_div_5_cmp_2_z)
    );
  mgc_div #(.width_a(32'sd22),
  .width_b(32'sd15),
  .signd(32'sd1)) LOOP_OUT_div_5_cmp_3 (
      .a(nl_LOOP_OUT_div_5_cmp_3_a[21:0]),
      .b(nl_LOOP_OUT_div_5_cmp_3_b[14:0]),
      .z(LOOP_OUT_div_5_cmp_3_z)
    );
  mgc_div #(.width_a(32'sd22),
  .width_b(32'sd15),
  .signd(32'sd1)) LOOP_OUT_div_5_cmp_4 (
      .a(nl_LOOP_OUT_div_5_cmp_4_a[21:0]),
      .b(nl_LOOP_OUT_div_5_cmp_4_b[14:0]),
      .z(LOOP_OUT_div_5_cmp_4_z)
    );
  mgc_shift_bl_v5 #(.width_a(32'sd25),
  .signd_a(32'sd0),
  .width_s(32'sd5),
  .width_z(32'sd32)) operator_32_8_false_AC_TRN_AC_WRAP_lshift_rg (
      .a(nl_operator_32_8_false_AC_TRN_AC_WRAP_lshift_rg_a[24:0]),
      .s(ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_2),
      .z(operator_32_8_false_AC_TRN_AC_WRAP_lshift_itm)
    );
  UNET_IP_batchnorm_relumgc_rom_11_736_5_1  LOOP_OUT_read_rom_UNET_IP_gamma_pretrain_rom_map_1_rg
      (
      .addr(LOOP_OUT_acc_3_cse_sva_1),
      .data_out(LOOP_OUT_read_rom_UNET_IP_gamma_pretrain_rom_map_1_itm)
    );
  UNET_IP_batchnorm_relumgc_rom_12_736_4_1  LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_rg
      (
      .addr(LOOP_OUT_acc_3_cse_sva_1),
      .data_out(LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm)
    );
  leading_sign_22_0  leading_sign_22_0_rg (
      .mantissa(nl_leading_sign_22_0_rg_mantissa[21:0]),
      .rtn(leading_sign_22_0_c5945fbeaae02c4edab24e6eca5e07cb263f_1)
    );
  mgc_shift_l_v5 #(.width_a(32'sd21),
  .signd_a(32'sd0),
  .width_s(32'sd5),
  .width_z(32'sd21)) operator_22_0_false_AC_TRN_AC_WRAP_lshift_rg (
      .a(LOOP_CH_var_21_1_sva),
      .s(leading_sign_22_0_c5945fbeaae02c4edab24e6eca5e07cb263f_1),
      .z(operator_22_0_false_AC_TRN_AC_WRAP_lshift_itm)
    );
  UNET_IP_batchnorm_relu_run_batch_wait_dp UNET_IP_batchnorm_relu_run_batch_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z(operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z),
      .operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg(operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg)
    );
  UNET_IP_batchnorm_relu_run_batch_run_batch_fsm UNET_IP_batchnorm_relu_run_batch_run_batch_fsm_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .fsm_output(fsm_output),
      .main_C_0_tr0(exit_LOOP_CH_sva_mx0),
      .LOOP_MEAN_C_0_tr0(nor_4_cse),
      .LOOP_CH_C_5_tr0(nl_UNET_IP_batchnorm_relu_run_batch_run_batch_fsm_inst_LOOP_CH_C_5_tr0),
      .LOOP_VAR_C_3_tr0(LOOP_MEAN_stage_0),
      .LOOP_OUT_C_0_tr0(nl_UNET_IP_batchnorm_relu_run_batch_run_batch_fsm_inst_LOOP_OUT_C_0_tr0),
      .LOOP_CH_C_12_tr0(exit_LOOP_CH_sva_mx0)
    );
  assign nor_4_cse = ~(LOOP_MEAN_stage_0_2 | LOOP_MEAN_stage_0);
  assign or_123_ssc = (fsm_output[5:2]!=4'b0000);
  assign operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a = {reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd
      , reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_1 , reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_2
      , 6'b000000};
  assign LOOP_CH_c_or_cse = (fsm_output[0]) | (fsm_output[19]);
  assign and_107_rgt = and_dcpl_85 & and_dcpl_94;
  assign and_108_rgt = and_dcpl_87 & and_dcpl_94;
  assign and_109_rgt = and_dcpl_89 & and_dcpl_94;
  assign and_110_rgt = and_dcpl_91 & and_dcpl_94;
  assign and_111_rgt = and_dcpl_92 & and_dcpl_94;
  assign nor_21_cse = ~((fsm_output[19]) | (fsm_output[0]));
  assign or_159_cse = (fsm_output[1]) | (fsm_output[18]);
  assign nl_LOOP_CH_acc_2_nl = ({1'b1 , (~ channels)}) + 8'b00000001;
  assign LOOP_CH_acc_2_nl = nl_LOOP_CH_acc_2_nl[7:0];
  assign nl_LOOP_CH_acc_3_nl = ({1'b1 , LOOP_CH_c_sva_2}) + conv_u2u_8_9({1'b1 ,
      (~ channels)}) + 9'b000000001;
  assign LOOP_CH_acc_3_nl = nl_LOOP_CH_acc_3_nl[8:0];
  assign exit_LOOP_CH_sva_mx0 = MUX_s_1_2_2((~ (readslicef_8_1_7(LOOP_CH_acc_2_nl))),
      (~ (readslicef_9_1_8(LOOP_CH_acc_3_nl))), fsm_output[19]);
  assign nl_LOOP_CH_c_sva_2 = conv_u2u_7_8(LOOP_CH_c_sva[6:0]) + 8'b00000001;
  assign LOOP_CH_c_sva_2 = nl_LOOP_CH_c_sva_2[7:0];
  assign nl_LOOP_VAR_mul_2_nl = $signed(({(LOOP_OUT_acc_5_itm_1[15]) , LOOP_VAR_acc_4_cse_sva_14_12
      , LOOP_VAR_acc_4_cse_sva_11_0})) * $signed(({(LOOP_OUT_acc_5_itm_1[15]) , LOOP_VAR_acc_4_cse_sva_14_12
      , LOOP_VAR_acc_4_cse_sva_11_0}));
  assign LOOP_VAR_mul_2_nl = nl_LOOP_VAR_mul_2_nl[27:0];
  assign nl_LOOP_CH_var_tmp_33_6_sva_mx0w1 = LOOP_CH_var_tmp_33_6_sva + LOOP_VAR_mul_2_nl;
  assign LOOP_CH_var_tmp_33_6_sva_mx0w1 = nl_LOOP_CH_var_tmp_33_6_sva_mx0w1[27:0];
  assign nl_LOOP_CH_i_1_sva_2 = LOOP_CH_i_1_sva + 13'b0000000000001;
  assign LOOP_CH_i_1_sva_2 = nl_LOOP_CH_i_1_sva_2[12:0];
  assign nl_LOOP_VAR_acc_4_cse_sva_mx0w1 = conv_s2s_15_16({1'b1 , (~ LOOP_CH_mean_sva)})
      + conv_s2s_14_16({input_rsci_q_d , 2'b00}) + 16'b0000000000000001;
  assign LOOP_VAR_acc_4_cse_sva_mx0w1 = nl_LOOP_VAR_acc_4_cse_sva_mx0w1[15:0];
  assign nl_LOOP_CH_mean_tmp_19_8_sva_2 = LOOP_VAR_acc_4_cse_sva_11_0 + input_rsci_q_d;
  assign LOOP_CH_mean_tmp_19_8_sva_2 = nl_LOOP_CH_mean_tmp_19_8_sva_2[11:0];
  assign or_cse = (LOOP_OUT_LOOP_OUT_acc_tmp[1:0]!=2'b00);
  assign ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_tmp_1
      = MUX_v_14_2_2(14'b00000000000000, ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_qr_sva_1_1,
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_3);
  assign nl_LOOP_OUT_LOOP_OUT_acc_tmp = conv_u2u_1_3(LOOP_OUT_acc_imod_1[2]) + conv_u2u_2_3(LOOP_OUT_acc_imod_1[1:0]);
  assign LOOP_OUT_LOOP_OUT_acc_tmp = nl_LOOP_OUT_LOOP_OUT_acc_tmp[2:0];
  assign nl_LOOP_VAR_mul_4 = (LOOP_CH_c_sva[6:0]) * num_elements_sva;
  assign LOOP_VAR_mul_4 = nl_LOOP_VAR_mul_4[14:0];
  assign ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_or_tmp
      = (LOOP_CH_var_21_1_sva!=21'b000000000000000000000);
  assign nl_LOOP_OUT_acc_imod_1 = conv_s2s_1_3(LOOP_OUT_acc_idiv_1[2]) + conv_u2s_2_3(LOOP_OUT_acc_idiv_1[1:0]);
  assign LOOP_OUT_acc_imod_1 = nl_LOOP_OUT_acc_imod_1[2:0];
  assign nl_LOOP_OUT_acc_idiv_1 = LOOP_OUT_div_5cyc + 3'b001;
  assign LOOP_OUT_acc_idiv_1 = nl_LOOP_OUT_acc_idiv_1[2:0];
  assign nl_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_nl
      = 13'b1011010100001 * ({ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva_1
      , (LOOP_MEAN_mul_itm_1[10:0])});
  assign ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_nl
      = nl_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_nl[35:0];
  assign ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_itm_35_11_1
      = readslicef_36_25_11(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_temp_mul_nl);
  assign nl_LOOP_OUT_acc_3_cse_sva_1 = conv_u2u_7_10(LOOP_CH_c_sva[6:0]) + offset;
  assign LOOP_OUT_acc_3_cse_sva_1 = nl_LOOP_OUT_acc_3_cse_sva_1[9:0];
  assign nl_LOOP_OUT_acc_10_nl = ({1'b1 , LOOP_CH_i_1_sva}) + conv_u2u_13_14(~ num_elements_sva)
      + 14'b00000000000001;
  assign LOOP_OUT_acc_10_nl = nl_LOOP_OUT_acc_10_nl[13:0];
  assign LOOP_OUT_acc_10_itm_13_1 = readslicef_14_1_13(LOOP_OUT_acc_10_nl);
  assign and_dcpl_45 = LOOP_OUT_stage_0_4 & (~ exit_LOOP_OUT_sva_st_3);
  assign and_dcpl_46 = and_dcpl_45 & (~ (LOOP_OUT_LOOP_OUT_acc_tmp[2]));
  assign and_dcpl_49 = LOOP_OUT_stage_0_5 & (~ exit_LOOP_OUT_sva_st_4);
  assign and_dcpl_50 = and_dcpl_49 & (~ (LOOP_OUT_div_5cyc_st_1[2]));
  assign or_dcpl_54 = (~ LOOP_OUT_stage_0_4) | exit_LOOP_OUT_sva_st_3;
  assign or_dcpl_55 = or_dcpl_54 | (LOOP_OUT_LOOP_OUT_acc_tmp[2]);
  assign or_dcpl_56 = or_dcpl_55 | (LOOP_OUT_LOOP_OUT_acc_tmp[1:0]!=2'b11);
  assign or_dcpl_58 = or_dcpl_55 | (LOOP_OUT_LOOP_OUT_acc_tmp[1:0]!=2'b10);
  assign or_dcpl_60 = or_dcpl_55 | (LOOP_OUT_LOOP_OUT_acc_tmp[1:0]!=2'b01);
  assign and_dcpl_63 = ~((LOOP_OUT_LOOP_OUT_acc_tmp[1:0]!=2'b00));
  assign and_dcpl_65 = ~((LOOP_OUT_div_5cyc_st_1[1:0]!=2'b00));
  assign or_dcpl_62 = or_dcpl_55 | or_cse;
  assign or_dcpl_64 = or_dcpl_54 | (~ (LOOP_OUT_LOOP_OUT_acc_tmp[2])) | or_cse;
  assign and_dcpl_77 = LOOP_MEAN_stage_0_3 & (~ ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_3);
  assign and_dcpl_79 = ~((fsm_output[4:3]!=2'b00));
  assign and_dcpl_84 = ~((LOOP_OUT_div_5cyc_st_5[1:0]!=2'b00));
  assign and_dcpl_85 = and_dcpl_84 & (~ (LOOP_OUT_div_5cyc_st_5[2]));
  assign and_dcpl_87 = (LOOP_OUT_div_5cyc_st_5==3'b001);
  assign and_dcpl_89 = (LOOP_OUT_div_5cyc_st_5==3'b010);
  assign and_dcpl_91 = (LOOP_OUT_div_5cyc_st_5==3'b011);
  assign and_dcpl_92 = and_dcpl_84 & (LOOP_OUT_div_5cyc_st_5[2]);
  assign and_dcpl_94 = LOOP_OUT_stage_0_9 & (~ exit_LOOP_OUT_sva_st_8);
  assign LOOP_OUT_div_5_cmp_4_b_13_0_mx0c1 = or_dcpl_56 & and_dcpl_50 & (LOOP_OUT_div_5cyc_st_1[1:0]==2'b11);
  assign LOOP_OUT_div_5_cmp_3_b_13_0_mx0c1 = or_dcpl_58 & and_dcpl_50 & (LOOP_OUT_div_5cyc_st_1[1:0]==2'b10);
  assign LOOP_OUT_div_5_cmp_2_b_13_0_mx0c1 = or_dcpl_60 & and_dcpl_50 & (LOOP_OUT_div_5cyc_st_1[1:0]==2'b01);
  assign LOOP_OUT_div_5_cmp_1_b_13_0_mx0c1 = or_dcpl_62 & and_dcpl_50 & and_dcpl_65;
  assign LOOP_OUT_div_5_cmp_b_13_0_mx0c1 = or_dcpl_64 & and_dcpl_49 & (LOOP_OUT_div_5cyc_st_1[2])
      & and_dcpl_65;
  assign input_rsci_radr_d = MUX_v_15_2_2(z_out_1, LOOP_VAR_acc_1_itm, fsm_output[9]);
  assign input_rsci_re_d_pff = (fsm_output[9]) | (LOOP_MEAN_stage_0_2 & (~ LOOP_OUT_stage_0_4)
      & (fsm_output[1])) | (LOOP_MEAN_stage_0_2 & (~ exit_LOOP_OUT_sva_st_1) & (fsm_output[18]));
  assign nl_output_rsci_d_d = LOOP_OUT_slc_LOOP_OUT_mul_sdt_25_4_21_2_itm_1_11_0
      + conv_s2u_4_12(LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_2);
  assign output_rsci_d_d = nl_output_rsci_d_d[11:0];
  assign output_rsci_wadr_d = {reg_LOOP_CH_idx_14_0_sva_8_ftd , reg_LOOP_CH_idx_14_0_sva_8_ftd_1};
  assign output_rsci_we_d_pff = LOOP_MEAN_stage_0 & (~ exit_LOOP_OUT_sva_st_9) &
      (fsm_output[18]);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_4_b_13_0 <= 14'b00000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_4_b_13_0 <= 14'b00000000000000;
    end
    else if ( (and_dcpl_46 & (LOOP_OUT_LOOP_OUT_acc_tmp[1:0]==2'b11)) | LOOP_OUT_div_5_cmp_4_b_13_0_mx0c1
        ) begin
      LOOP_OUT_div_5_cmp_4_b_13_0 <= MUX_v_14_2_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_tmp_1,
          mut_1_1_13_0, LOOP_OUT_div_5_cmp_4_b_13_0_mx0c1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_4_a_21_6 <= 16'b0000000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_4_a_21_6 <= 16'b0000000000000000;
    end
    else if ( ~ or_dcpl_56 ) begin
      LOOP_OUT_div_5_cmp_4_a_21_6 <= LOOP_OUT_acc_5_itm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_3_b_13_0 <= 14'b00000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_3_b_13_0 <= 14'b00000000000000;
    end
    else if ( (and_dcpl_46 & (LOOP_OUT_LOOP_OUT_acc_tmp[1:0]==2'b10)) | LOOP_OUT_div_5_cmp_3_b_13_0_mx0c1
        ) begin
      LOOP_OUT_div_5_cmp_3_b_13_0 <= MUX_v_14_2_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_tmp_1,
          mut_1_1_13_0, LOOP_OUT_div_5_cmp_3_b_13_0_mx0c1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_3_a_21_6 <= 16'b0000000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_3_a_21_6 <= 16'b0000000000000000;
    end
    else if ( ~ or_dcpl_58 ) begin
      LOOP_OUT_div_5_cmp_3_a_21_6 <= LOOP_OUT_acc_5_itm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_2_b_13_0 <= 14'b00000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_2_b_13_0 <= 14'b00000000000000;
    end
    else if ( (and_dcpl_46 & (LOOP_OUT_LOOP_OUT_acc_tmp[1:0]==2'b01)) | LOOP_OUT_div_5_cmp_2_b_13_0_mx0c1
        ) begin
      LOOP_OUT_div_5_cmp_2_b_13_0 <= MUX_v_14_2_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_tmp_1,
          mut_1_1_13_0, LOOP_OUT_div_5_cmp_2_b_13_0_mx0c1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_2_a_21_6 <= 16'b0000000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_2_a_21_6 <= 16'b0000000000000000;
    end
    else if ( ~ or_dcpl_60 ) begin
      LOOP_OUT_div_5_cmp_2_a_21_6 <= LOOP_OUT_acc_5_itm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_1_b_13_0 <= 14'b00000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_1_b_13_0 <= 14'b00000000000000;
    end
    else if ( (and_dcpl_46 & and_dcpl_63) | LOOP_OUT_div_5_cmp_1_b_13_0_mx0c1 ) begin
      LOOP_OUT_div_5_cmp_1_b_13_0 <= MUX_v_14_2_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_tmp_1,
          mut_1_1_13_0, LOOP_OUT_div_5_cmp_1_b_13_0_mx0c1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_1_a_21_6 <= 16'b0000000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_1_a_21_6 <= 16'b0000000000000000;
    end
    else if ( ~ or_dcpl_62 ) begin
      LOOP_OUT_div_5_cmp_1_a_21_6 <= LOOP_OUT_acc_5_itm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_b_13_0 <= 14'b00000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_b_13_0 <= 14'b00000000000000;
    end
    else if ( (and_dcpl_45 & (LOOP_OUT_LOOP_OUT_acc_tmp[2]) & and_dcpl_63) | LOOP_OUT_div_5_cmp_b_13_0_mx0c1
        ) begin
      LOOP_OUT_div_5_cmp_b_13_0 <= MUX_v_14_2_2(ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_tmp_1,
          mut_1_1_13_0, LOOP_OUT_div_5_cmp_b_13_0_mx0c1);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_5_cmp_a_21_6 <= 16'b0000000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_5_cmp_a_21_6 <= 16'b0000000000000000;
    end
    else if ( ~ or_dcpl_64 ) begin
      LOOP_OUT_div_5_cmp_a_21_6 <= LOOP_OUT_acc_5_itm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_output_triosy_obj_ld_cse <= 1'b0;
      operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b <= 13'b0000000000000;
      reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd <= 14'b00000000000000;
      reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_1 <= 12'b000000000000;
      reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_2 <= 2'b00;
      LOOP_MEAN_asn_6_itm_2 <= 1'b0;
      LOOP_MEAN_stage_0_2 <= 1'b0;
      LOOP_MEAN_stage_0_3 <= 1'b0;
      LOOP_MEAN_mul_itm_1 <= 15'b000000000000000;
      LOOP_MEAN_asn_3_itm_1 <= 13'b0000000000000;
      LOOP_OUT_stage_0_4 <= 1'b0;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_3
          <= 1'b0;
      LOOP_VAR_acc_4_cse_sva_14_12 <= 3'b000;
      LOOP_VAR_acc_4_cse_sva_11_0 <= 12'b000000000000;
      LOOP_VAR_acc_1_itm <= 15'b000000000000000;
      LOOP_OUT_slc_LOOP_OUT_mul_sdt_25_4_21_2_itm_1_11_0 <= 12'b000000000000;
      LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_2 <= 4'b0000;
      reg_LOOP_CH_idx_14_0_sva_8_ftd <= 3'b000;
      reg_LOOP_CH_idx_14_0_sva_8_ftd_1 <= 12'b000000000000;
      exit_LOOP_OUT_sva_st_9 <= 1'b0;
      LOOP_OUT_div_5cyc_st_5 <= 3'b000;
      exit_LOOP_OUT_sva_st_8 <= 1'b0;
      LOOP_OUT_div_5cyc_st_4 <= 3'b000;
      exit_LOOP_OUT_sva_st_7 <= 1'b0;
      LOOP_OUT_div_5cyc_st_3 <= 3'b000;
      exit_LOOP_OUT_sva_st_6 <= 1'b0;
      LOOP_OUT_div_5cyc_st_2 <= 3'b000;
      exit_LOOP_OUT_sva_st_5 <= 1'b0;
      mut_1_1_13_0 <= 14'b00000000000000;
      LOOP_OUT_div_5cyc_st_1 <= 3'b000;
      exit_LOOP_OUT_sva_st_4 <= 1'b0;
      LOOP_OUT_acc_5_itm_1 <= 16'b0000000000000000;
      LOOP_OUT_div_5cyc <= 3'b000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_qr_sva_1_1
          <= 14'b00000000000000;
      exit_LOOP_OUT_sva_st_3 <= 1'b0;
      exit_LOOP_OUT_sva_st_2 <= 1'b0;
      LOOP_OUT_mul_itm_1 <= 15'b000000000000000;
      exit_LOOP_OUT_sva_st_1 <= 1'b0;
      LOOP_OUT_stage_0 <= 1'b0;
      LOOP_OUT_stage_0_5 <= 1'b0;
      LOOP_OUT_stage_0_6 <= 1'b0;
      LOOP_OUT_stage_0_7 <= 1'b0;
      LOOP_OUT_stage_0_8 <= 1'b0;
      LOOP_OUT_stage_0_9 <= 1'b0;
      LOOP_OUT_read_rom_UNET_IP_gamma_pretrain_rom_map_1_itm_1 <= 5'b00000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva_1
          <= 13'b0000000000000;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_2 <=
          1'b0;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_2
          <= 5'b00000;
      LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_1 <= 4'b0000;
      LOOP_CH_idx_14_0_sva_7_14_12 <= 3'b000;
      LOOP_CH_idx_14_0_sva_7_11_0 <= 12'b000000000000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_1_itm_1
          <= 10'b0000000000;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_slc_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_1_20_7_11_0_itm_1
          <= 12'b000000000000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_itm_1
          <= 6'b000000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_1
          <= 1'b0;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_1
          <= 5'b00000;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_1 <=
          1'b0;
      reg_LOOP_CH_idx_14_0_sva_6_ftd <= 3'b000;
      reg_LOOP_CH_idx_14_0_sva_6_ftd_1 <= 12'b000000000000;
      LOOP_CH_idx_14_0_sva_5_14_12 <= 3'b000;
      LOOP_CH_idx_14_0_sva_5_11_0 <= 12'b000000000000;
      reg_LOOP_CH_idx_14_0_sva_4_ftd <= 3'b000;
      reg_LOOP_CH_idx_14_0_sva_4_ftd_1 <= 12'b000000000000;
      LOOP_CH_idx_14_0_sva_3_14_12 <= 3'b000;
      LOOP_CH_idx_14_0_sva_3_11_0 <= 12'b000000000000;
      reg_LOOP_CH_idx_14_0_sva_2_ftd <= 3'b000;
      reg_LOOP_CH_idx_14_0_sva_2_ftd_1 <= 12'b000000000000;
    end
    else if ( rst ) begin
      reg_output_triosy_obj_ld_cse <= 1'b0;
      operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b <= 13'b0000000000000;
      reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd <= 14'b00000000000000;
      reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_1 <= 12'b000000000000;
      reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_2 <= 2'b00;
      LOOP_MEAN_asn_6_itm_2 <= 1'b0;
      LOOP_MEAN_stage_0_2 <= 1'b0;
      LOOP_MEAN_stage_0_3 <= 1'b0;
      LOOP_MEAN_mul_itm_1 <= 15'b000000000000000;
      LOOP_MEAN_asn_3_itm_1 <= 13'b0000000000000;
      LOOP_OUT_stage_0_4 <= 1'b0;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_3
          <= 1'b0;
      LOOP_VAR_acc_4_cse_sva_14_12 <= 3'b000;
      LOOP_VAR_acc_4_cse_sva_11_0 <= 12'b000000000000;
      LOOP_VAR_acc_1_itm <= 15'b000000000000000;
      LOOP_OUT_slc_LOOP_OUT_mul_sdt_25_4_21_2_itm_1_11_0 <= 12'b000000000000;
      LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_2 <= 4'b0000;
      reg_LOOP_CH_idx_14_0_sva_8_ftd <= 3'b000;
      reg_LOOP_CH_idx_14_0_sva_8_ftd_1 <= 12'b000000000000;
      exit_LOOP_OUT_sva_st_9 <= 1'b0;
      LOOP_OUT_div_5cyc_st_5 <= 3'b000;
      exit_LOOP_OUT_sva_st_8 <= 1'b0;
      LOOP_OUT_div_5cyc_st_4 <= 3'b000;
      exit_LOOP_OUT_sva_st_7 <= 1'b0;
      LOOP_OUT_div_5cyc_st_3 <= 3'b000;
      exit_LOOP_OUT_sva_st_6 <= 1'b0;
      LOOP_OUT_div_5cyc_st_2 <= 3'b000;
      exit_LOOP_OUT_sva_st_5 <= 1'b0;
      mut_1_1_13_0 <= 14'b00000000000000;
      LOOP_OUT_div_5cyc_st_1 <= 3'b000;
      exit_LOOP_OUT_sva_st_4 <= 1'b0;
      LOOP_OUT_acc_5_itm_1 <= 16'b0000000000000000;
      LOOP_OUT_div_5cyc <= 3'b000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_qr_sva_1_1
          <= 14'b00000000000000;
      exit_LOOP_OUT_sva_st_3 <= 1'b0;
      exit_LOOP_OUT_sva_st_2 <= 1'b0;
      LOOP_OUT_mul_itm_1 <= 15'b000000000000000;
      exit_LOOP_OUT_sva_st_1 <= 1'b0;
      LOOP_OUT_stage_0 <= 1'b0;
      LOOP_OUT_stage_0_5 <= 1'b0;
      LOOP_OUT_stage_0_6 <= 1'b0;
      LOOP_OUT_stage_0_7 <= 1'b0;
      LOOP_OUT_stage_0_8 <= 1'b0;
      LOOP_OUT_stage_0_9 <= 1'b0;
      LOOP_OUT_read_rom_UNET_IP_gamma_pretrain_rom_map_1_itm_1 <= 5'b00000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva_1
          <= 13'b0000000000000;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_2 <=
          1'b0;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_2
          <= 5'b00000;
      LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_1 <= 4'b0000;
      LOOP_CH_idx_14_0_sva_7_14_12 <= 3'b000;
      LOOP_CH_idx_14_0_sva_7_11_0 <= 12'b000000000000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_1_itm_1
          <= 10'b0000000000;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_slc_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_1_20_7_11_0_itm_1
          <= 12'b000000000000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_itm_1
          <= 6'b000000;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_1
          <= 1'b0;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_1
          <= 5'b00000;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_1 <=
          1'b0;
      reg_LOOP_CH_idx_14_0_sva_6_ftd <= 3'b000;
      reg_LOOP_CH_idx_14_0_sva_6_ftd_1 <= 12'b000000000000;
      LOOP_CH_idx_14_0_sva_5_14_12 <= 3'b000;
      LOOP_CH_idx_14_0_sva_5_11_0 <= 12'b000000000000;
      reg_LOOP_CH_idx_14_0_sva_4_ftd <= 3'b000;
      reg_LOOP_CH_idx_14_0_sva_4_ftd_1 <= 12'b000000000000;
      LOOP_CH_idx_14_0_sva_3_14_12 <= 3'b000;
      LOOP_CH_idx_14_0_sva_3_11_0 <= 12'b000000000000;
      reg_LOOP_CH_idx_14_0_sva_2_ftd <= 3'b000;
      reg_LOOP_CH_idx_14_0_sva_2_ftd_1 <= 12'b000000000000;
    end
    else begin
      reg_output_triosy_obj_ld_cse <= ~(nor_21_cse | (~ exit_LOOP_CH_sva_mx0));
      operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b <= num_elements_sva;
      reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd <= operator_20_8_false_AC_TRN_AC_WRAP_13_false_mux_nl
          & (signext_14_1(~ (fsm_output[1]))) & (signext_14_1(~ or_123_ssc));
      reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_1 <= MUX1HOT_v_12_4_2(LOOP_VAR_acc_4_cse_sva_11_0,
          LOOP_CH_mean_tmp_19_8_sva_2, (LOOP_CH_var_tmp_33_6_sva[13:2]), (LOOP_CH_var_tmp_33_6_sva_mx0w1[13:2]),
          {operator_20_8_false_AC_TRN_AC_WRAP_13_false_or_1_nl , operator_20_8_false_AC_TRN_AC_WRAP_13_false_and_5_nl
          , operator_20_8_false_AC_TRN_AC_WRAP_13_false_or_nl , (fsm_output[11])});
      reg_operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a_ftd_2 <= operator_20_8_false_AC_TRN_AC_WRAP_13_false_mux_1_nl
          & (signext_2_1(~ (fsm_output[1]))) & (signext_2_1(~ or_123_ssc));
      LOOP_MEAN_asn_6_itm_2 <= MUX_s_1_2_2(LOOP_OUT_stage_0_4, ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_1,
          fsm_output[18]);
      LOOP_MEAN_stage_0_2 <= LOOP_MEAN_mux_3_nl & (~((fsm_output[17]) | (fsm_output[19])
          | (fsm_output[0])));
      LOOP_MEAN_stage_0_3 <= LOOP_MEAN_stage_0_2 & or_159_cse;
      LOOP_MEAN_mul_itm_1 <= z_out[14:0];
      LOOP_MEAN_asn_3_itm_1 <= LOOP_CH_i_1_sva;
      LOOP_OUT_stage_0_4 <= LOOP_OUT_mux_nl & or_159_cse;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_3
          <= MUX_s_1_2_2(LOOP_OUT_stage_0_4, LOOP_MEAN_asn_6_itm_2, fsm_output[18]);
      LOOP_VAR_acc_4_cse_sva_14_12 <= MUX_v_3_2_2((LOOP_VAR_acc_4_cse_sva_mx0w1[14:12]),
          (z_out_1[14:12]), fsm_output[18]);
      LOOP_VAR_acc_4_cse_sva_11_0 <= MUX1HOT_v_12_3_2(LOOP_CH_mean_tmp_LOOP_CH_mean_tmp_and_nl,
          (LOOP_VAR_acc_4_cse_sva_mx0w1[11:0]), (z_out_1[11:0]), {or_164_nl , (fsm_output[10])
          , (fsm_output[18])});
      LOOP_VAR_acc_1_itm <= nl_LOOP_VAR_acc_1_itm[14:0];
      LOOP_OUT_slc_LOOP_OUT_mul_sdt_25_4_21_2_itm_1_11_0 <= readslicef_18_12_6(LOOP_OUT_LOOP_OUT_mul_nl);
      LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_2 <= LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_1;
      reg_LOOP_CH_idx_14_0_sva_8_ftd <= LOOP_CH_idx_14_0_sva_7_14_12;
      reg_LOOP_CH_idx_14_0_sva_8_ftd_1 <= LOOP_CH_idx_14_0_sva_7_11_0;
      exit_LOOP_OUT_sva_st_9 <= exit_LOOP_OUT_sva_st_8;
      LOOP_OUT_div_5cyc_st_5 <= LOOP_OUT_div_5cyc_st_4;
      exit_LOOP_OUT_sva_st_8 <= exit_LOOP_OUT_sva_st_7;
      LOOP_OUT_div_5cyc_st_4 <= LOOP_OUT_div_5cyc_st_3;
      exit_LOOP_OUT_sva_st_7 <= exit_LOOP_OUT_sva_st_6;
      LOOP_OUT_div_5cyc_st_3 <= LOOP_OUT_div_5cyc_st_2;
      exit_LOOP_OUT_sva_st_6 <= exit_LOOP_OUT_sva_st_5;
      LOOP_OUT_div_5cyc_st_2 <= LOOP_OUT_div_5cyc_st_1;
      exit_LOOP_OUT_sva_st_5 <= exit_LOOP_OUT_sva_st_4;
      mut_1_1_13_0 <= ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_and_tmp_1;
      LOOP_OUT_div_5cyc_st_1 <= LOOP_OUT_LOOP_OUT_acc_tmp;
      exit_LOOP_OUT_sva_st_4 <= exit_LOOP_OUT_sva_st_3;
      LOOP_OUT_acc_5_itm_1 <= LOOP_VAR_acc_4_cse_sva_mx0w1;
      LOOP_OUT_div_5cyc <= MUX_v_3_2_2(3'b000, LOOP_OUT_mux_10_nl, (fsm_output[18]));
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_qr_sva_1_1
          <= operator_32_8_false_AC_TRN_AC_WRAP_lshift_itm[31:18];
      exit_LOOP_OUT_sva_st_3 <= exit_LOOP_OUT_sva_st_2;
      exit_LOOP_OUT_sva_st_2 <= exit_LOOP_OUT_sva_st_1;
      LOOP_OUT_mul_itm_1 <= LOOP_VAR_mul_4;
      exit_LOOP_OUT_sva_st_1 <= ~ LOOP_OUT_acc_10_itm_13_1;
      LOOP_OUT_stage_0 <= ~((~(LOOP_OUT_stage_0 & LOOP_OUT_acc_10_itm_13_1)) & (fsm_output[18]));
      LOOP_OUT_stage_0_5 <= LOOP_OUT_stage_0_4 & (fsm_output[18]);
      LOOP_OUT_stage_0_6 <= LOOP_OUT_stage_0_5 & (fsm_output[18]);
      LOOP_OUT_stage_0_7 <= LOOP_OUT_stage_0_6 & (fsm_output[18]);
      LOOP_OUT_stage_0_8 <= LOOP_OUT_stage_0_7 & (fsm_output[18]);
      LOOP_OUT_stage_0_9 <= LOOP_OUT_stage_0_8 & (fsm_output[18]);
      LOOP_OUT_read_rom_UNET_IP_gamma_pretrain_rom_map_1_itm_1 <= LOOP_OUT_read_rom_UNET_IP_gamma_pretrain_rom_map_1_itm;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva_1
          <= nl_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva_1[12:0];
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_2 <=
          ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_1;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_2
          <= ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_1;
      LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm_1 <= LOOP_OUT_read_rom_UNET_IP_beta_pretrain_rom_map_1_itm;
      LOOP_CH_idx_14_0_sva_7_14_12 <= reg_LOOP_CH_idx_14_0_sva_6_ftd;
      LOOP_CH_idx_14_0_sva_7_11_0 <= reg_LOOP_CH_idx_14_0_sva_6_ftd_1;
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_1_itm_1
          <= MUX_v_10_4_2(10'b0110101001, 10'b1001010100, 10'b1011101110, 10'b1101111100,
          operator_22_0_false_AC_TRN_AC_WRAP_lshift_itm[20:19]);
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_slc_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_1_20_7_11_0_itm_1
          <= operator_22_0_false_AC_TRN_AC_WRAP_lshift_itm[18:7];
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_itm_1
          <= MUX_v_6_4_2(6'b101011, 6'b011010, 6'b001110, 6'b000100, operator_22_0_false_AC_TRN_AC_WRAP_lshift_itm[20:19]);
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_or_itm_1
          <= ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_or_tmp;
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_and_itm_1
          <= MUX_v_5_2_2(5'b00000, ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qif_acc_nl,
          ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_or_tmp);
      ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qr_0_lpi_3_dfm_1 <=
          (~ (leading_sign_22_0_c5945fbeaae02c4edab24e6eca5e07cb263f_1[0])) & ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_or_tmp;
      reg_LOOP_CH_idx_14_0_sva_6_ftd <= LOOP_CH_idx_14_0_sva_5_14_12;
      reg_LOOP_CH_idx_14_0_sva_6_ftd_1 <= LOOP_CH_idx_14_0_sva_5_11_0;
      LOOP_CH_idx_14_0_sva_5_14_12 <= reg_LOOP_CH_idx_14_0_sva_4_ftd;
      LOOP_CH_idx_14_0_sva_5_11_0 <= reg_LOOP_CH_idx_14_0_sva_4_ftd_1;
      reg_LOOP_CH_idx_14_0_sva_4_ftd <= LOOP_CH_idx_14_0_sva_3_14_12;
      reg_LOOP_CH_idx_14_0_sva_4_ftd_1 <= LOOP_CH_idx_14_0_sva_3_11_0;
      LOOP_CH_idx_14_0_sva_3_14_12 <= reg_LOOP_CH_idx_14_0_sva_2_ftd;
      LOOP_CH_idx_14_0_sva_3_11_0 <= reg_LOOP_CH_idx_14_0_sva_2_ftd_1;
      reg_LOOP_CH_idx_14_0_sva_2_ftd <= LOOP_VAR_acc_4_cse_sva_14_12;
      reg_LOOP_CH_idx_14_0_sva_2_ftd_1 <= LOOP_VAR_acc_4_cse_sva_11_0;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      num_elements_sva <= 13'b0000000000000;
    end
    else if ( rst ) begin
      num_elements_sva <= 13'b0000000000000;
    end
    else if ( (fsm_output[20]) | (fsm_output[0]) ) begin
      num_elements_sva <= z_out[12:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_CH_c_sva <= 8'b00000000;
    end
    else if ( rst ) begin
      LOOP_CH_c_sva <= 8'b00000000;
    end
    else if ( LOOP_CH_c_or_cse ) begin
      LOOP_CH_c_sva <= MUX_v_8_2_2(8'b00000000, LOOP_CH_c_sva_2, (fsm_output[19]));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_OUT_div_tmp_duc_17_0 <= 18'b000000000000000000;
    end
    else if ( rst ) begin
      LOOP_OUT_div_tmp_duc_17_0 <= 18'b000000000000000000;
    end
    else if ( (fsm_output[18]) & (and_107_rgt | and_108_rgt | and_109_rgt | and_110_rgt
        | and_111_rgt) ) begin
      LOOP_OUT_div_tmp_duc_17_0 <= MUX1HOT_v_18_5_2((LOOP_OUT_div_5_cmp_1_z[17:0]),
          (LOOP_OUT_div_5_cmp_2_z[17:0]), (LOOP_OUT_div_5_cmp_3_z[17:0]), (LOOP_OUT_div_5_cmp_4_z[17:0]),
          (LOOP_OUT_div_5_cmp_z[17:0]), {and_107_rgt , and_108_rgt , and_109_rgt
          , and_110_rgt , and_111_rgt});
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_CH_var_tmp_33_6_sva <= 28'b0000000000000000000000000000;
    end
    else if ( rst ) begin
      LOOP_CH_var_tmp_33_6_sva <= 28'b0000000000000000000000000000;
    end
    else if ( (fsm_output[11]) | LOOP_CH_c_or_cse ) begin
      LOOP_CH_var_tmp_33_6_sva <= MUX_v_28_2_2(28'b0000000000000000000000000000,
          LOOP_CH_var_tmp_33_6_sva_mx0w1, (fsm_output[11]));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_MEAN_stage_0 <= 1'b0;
    end
    else if ( rst ) begin
      LOOP_MEAN_stage_0 <= 1'b0;
    end
    else if ( LOOP_CH_c_or_cse | (fsm_output[1]) | (fsm_output[2]) | (fsm_output[8])
        | (fsm_output[17]) | (fsm_output[18]) ) begin
      LOOP_MEAN_stage_0 <= ~((~(LOOP_MEAN_mux1h_8_nl | LOOP_CH_c_or_cse)) | (fsm_output[17]));
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_CH_i_1_sva <= 13'b0000000000000;
    end
    else if ( rst ) begin
      LOOP_CH_i_1_sva <= 13'b0000000000000;
    end
    else if ( ~((fsm_output[11:9]!=3'b000)) ) begin
      LOOP_CH_i_1_sva <= MUX_v_13_2_2(13'b0000000000000, LOOP_CH_i_1_sva_2, nor_29_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_CH_mean_sva <= 14'b00000000000000;
    end
    else if ( rst ) begin
      LOOP_CH_mean_sva <= 14'b00000000000000;
    end
    else if ( ~((~((fsm_output[5]) | (fsm_output[6]) | (fsm_output[20]))) & and_dcpl_79
        & (~((fsm_output[2]) | (fsm_output[7]) | (fsm_output[1]))) & nor_21_cse)
        ) begin
      LOOP_CH_mean_sva <= operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg[13:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      LOOP_CH_var_21_1_sva <= 21'b000000000000000000000;
    end
    else if ( rst ) begin
      LOOP_CH_var_21_1_sva <= 21'b000000000000000000000;
    end
    else if ( ~ (fsm_output[18]) ) begin
      LOOP_CH_var_21_1_sva <= operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z_oreg[27:7];
    end
  end
  assign operator_20_8_false_AC_TRN_AC_WRAP_13_false_mux_nl = MUX_v_14_2_2((LOOP_CH_var_tmp_33_6_sva[27:14]),
      (LOOP_CH_var_tmp_33_6_sva_mx0w1[27:14]), fsm_output[11]);
  assign operator_20_8_false_AC_TRN_AC_WRAP_13_false_or_1_nl = ((~ and_dcpl_77) &
      (fsm_output[1])) | or_123_ssc;
  assign operator_20_8_false_AC_TRN_AC_WRAP_13_false_and_5_nl = and_dcpl_77 & (fsm_output[1]);
  assign operator_20_8_false_AC_TRN_AC_WRAP_13_false_or_nl = (fsm_output[7]) | (fsm_output[15])
      | (fsm_output[14]) | (fsm_output[13]) | (fsm_output[12]);
  assign operator_20_8_false_AC_TRN_AC_WRAP_13_false_mux_1_nl = MUX_v_2_2_2((LOOP_CH_var_tmp_33_6_sva[1:0]),
      (LOOP_CH_var_tmp_33_6_sva_mx0w1[1:0]), fsm_output[11]);
  assign LOOP_MEAN_mux_3_nl = MUX_s_1_2_2(LOOP_MEAN_stage_0, LOOP_OUT_stage_0, fsm_output[18]);
  assign LOOP_OUT_mux_nl = MUX_s_1_2_2((~ LOOP_OUT_acc_10_itm_13_1), LOOP_MEAN_stage_0_3,
      fsm_output[18]);
  assign and_159_nl = (nor_4_cse | (~ LOOP_MEAN_asn_6_itm_2)) & and_dcpl_77 & (fsm_output[1]);
  assign LOOP_CH_mean_tmp_mux_1_nl = MUX_v_12_2_2(LOOP_VAR_acc_4_cse_sva_11_0, LOOP_CH_mean_tmp_19_8_sva_2,
      and_159_nl);
  assign LOOP_CH_mean_tmp_nand_nl = ~(and_dcpl_79 & (fsm_output[2:1]==2'b00));
  assign LOOP_CH_mean_tmp_LOOP_CH_mean_tmp_and_nl = MUX_v_12_2_2(12'b000000000000,
      LOOP_CH_mean_tmp_mux_1_nl, LOOP_CH_mean_tmp_nand_nl);
  assign or_164_nl = (fsm_output[4]) | (fsm_output[3]) | (fsm_output[2]) | (fsm_output[1])
      | (fsm_output[19]) | (fsm_output[0]);
  assign nl_LOOP_VAR_acc_1_itm  = LOOP_VAR_mul_4 + conv_u2u_13_15(LOOP_CH_i_1_sva);
  assign and_105_nl = ((LOOP_OUT_div_5cyc_st_5[1:0]!=2'b00)) & (LOOP_OUT_div_5cyc_st_5[2]);
  assign LOOP_OUT_mux1h_6_nl = MUX1HOT_v_18_6_2((LOOP_OUT_div_5_cmp_1_z[17:0]), (LOOP_OUT_div_5_cmp_2_z[17:0]),
      (LOOP_OUT_div_5_cmp_3_z[17:0]), (LOOP_OUT_div_5_cmp_4_z[17:0]), (LOOP_OUT_div_5_cmp_z[17:0]),
      LOOP_OUT_div_tmp_duc_17_0, {and_dcpl_85 , and_dcpl_87 , and_dcpl_89 , and_dcpl_91
      , and_dcpl_92 , and_105_nl});
  assign nl_LOOP_OUT_LOOP_OUT_mul_nl = $signed(conv_u2s_5_6(LOOP_OUT_read_rom_UNET_IP_gamma_pretrain_rom_map_1_itm_1))
      * $signed(LOOP_OUT_mux1h_6_nl);
  assign LOOP_OUT_LOOP_OUT_mul_nl = nl_LOOP_OUT_LOOP_OUT_mul_nl[17:0];
  assign LOOP_OUT_mux_10_nl = MUX_v_3_2_2(LOOP_OUT_LOOP_OUT_acc_tmp, LOOP_OUT_div_5cyc,
      or_dcpl_54);
  assign nl_ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_24_12_sva_1
      = conv_u2u_9_13(z_out[19:11]) + conv_u2u_12_13({1'b1 , ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_1_itm_1
      , 1'b1});
  assign nl_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qif_acc_nl = ({1'b1
      , (~ (leading_sign_22_0_c5945fbeaae02c4edab24e6eca5e07cb263f_1[4:1]))}) + 5'b01001;
  assign ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qif_acc_nl = nl_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_expret_qif_acc_nl[4:0];
  assign LOOP_OUT_LOOP_OUT_and_nl = LOOP_MEAN_stage_0 & LOOP_OUT_acc_10_itm_13_1;
  assign nl_LOOP_VAR_acc_7_nl = ({1'b1 , (~ num_elements_sva)}) + 14'b00000000000001;
  assign LOOP_VAR_acc_7_nl = nl_LOOP_VAR_acc_7_nl[13:0];
  assign nl_LOOP_VAR_acc_8_nl = ({1'b1 , LOOP_CH_i_1_sva_2}) + conv_u2u_13_14(~ num_elements_sva)
      + 14'b00000000000001;
  assign LOOP_VAR_acc_8_nl = nl_LOOP_VAR_acc_8_nl[13:0];
  assign LOOP_MEAN_mux1h_8_nl = MUX1HOT_s_1_4_2(LOOP_OUT_LOOP_OUT_and_nl, (readslicef_14_1_13(LOOP_VAR_acc_7_nl)),
      (~ (readslicef_14_1_13(LOOP_VAR_acc_8_nl))), LOOP_OUT_stage_0_9, {(fsm_output[1])
      , (fsm_output[2]) , (fsm_output[8]) , (fsm_output[18])});
  assign nor_29_nl = ~((fsm_output[17]) | (fsm_output[7]) | LOOP_CH_c_or_cse);
  assign num_elements_num_elements_or_1_nl = ((LOOP_CH_c_sva[7]) & (~ (fsm_output[0])))
      | (fsm_output[18]);
  assign num_elements_mux_2_nl = MUX_s_1_2_2((width[6]), (LOOP_CH_c_sva[6]), fsm_output[1]);
  assign num_elements_num_elements_and_3_nl = num_elements_mux_2_nl & (~ (fsm_output[18]));
  assign num_elements_mux1h_6_nl = MUX1HOT_v_6_3_2((width[5:0]), (LOOP_CH_c_sva[5:0]),
      ac_math_ac_sqrt_pwl_AC_TRN_22_17_AC_TRN_AC_WRAP_14_8_AC_TRN_AC_WRAP_normalized_output_mux_itm_1,
      {(fsm_output[0]) , (fsm_output[1]) , (fsm_output[18])});
  assign num_elements_num_elements_and_4_nl = (num_elements_sva[12]) & (~((fsm_output[0])
      | (fsm_output[18])));
  assign num_elements_mux_3_nl = MUX_v_5_2_2((num_elements_sva[11:7]), (ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_slc_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_1_20_7_11_0_itm_1[11:7]),
      fsm_output[18]);
  assign not_150_nl = ~ (fsm_output[0]);
  assign num_elements_num_elements_and_5_nl = MUX_v_5_2_2(5'b00000, num_elements_mux_3_nl,
      not_150_nl);
  assign num_elements_mux1h_7_nl = MUX1HOT_v_7_3_2(height, (num_elements_sva[6:0]),
      (ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_slc_ac_math_ac_normalize_22_17_false_AC_TRN_AC_WRAP_normalized_fixed_temp_1_20_7_11_0_itm_1[6:0]),
      {(fsm_output[0]) , (fsm_output[1]) , (fsm_output[18])});
  assign nl_z_out = ({num_elements_num_elements_or_1_nl , num_elements_num_elements_and_3_nl
      , num_elements_mux1h_6_nl}) * ({num_elements_num_elements_and_4_nl , num_elements_num_elements_and_5_nl
      , num_elements_mux1h_7_nl});
  assign z_out = nl_z_out[19:0];
  assign LOOP_OUT_mux_18_nl = MUX_v_15_2_2(LOOP_OUT_mul_itm_1, LOOP_MEAN_mul_itm_1,
      fsm_output[1]);
  assign nl_z_out_1 = LOOP_OUT_mux_18_nl + conv_u2u_13_15(LOOP_MEAN_asn_3_itm_1);
  assign z_out_1 = nl_z_out_1[14:0];

  function automatic  MUX1HOT_s_1_4_2;
    input  input_3;
    input  input_2;
    input  input_1;
    input  input_0;
    input [3:0] sel;
    reg  result;
  begin
    result = input_0 & sel[0];
    result = result | (input_1 & sel[1]);
    result = result | (input_2 & sel[2]);
    result = result | (input_3 & sel[3]);
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_3_2;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [2:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | (input_1 & {12{sel[1]}});
    result = result | (input_2 & {12{sel[2]}});
    MUX1HOT_v_12_3_2 = result;
  end
  endfunction


  function automatic [11:0] MUX1HOT_v_12_4_2;
    input [11:0] input_3;
    input [11:0] input_2;
    input [11:0] input_1;
    input [11:0] input_0;
    input [3:0] sel;
    reg [11:0] result;
  begin
    result = input_0 & {12{sel[0]}};
    result = result | (input_1 & {12{sel[1]}});
    result = result | (input_2 & {12{sel[2]}});
    result = result | (input_3 & {12{sel[3]}});
    MUX1HOT_v_12_4_2 = result;
  end
  endfunction


  function automatic [17:0] MUX1HOT_v_18_5_2;
    input [17:0] input_4;
    input [17:0] input_3;
    input [17:0] input_2;
    input [17:0] input_1;
    input [17:0] input_0;
    input [4:0] sel;
    reg [17:0] result;
  begin
    result = input_0 & {18{sel[0]}};
    result = result | (input_1 & {18{sel[1]}});
    result = result | (input_2 & {18{sel[2]}});
    result = result | (input_3 & {18{sel[3]}});
    result = result | (input_4 & {18{sel[4]}});
    MUX1HOT_v_18_5_2 = result;
  end
  endfunction


  function automatic [17:0] MUX1HOT_v_18_6_2;
    input [17:0] input_5;
    input [17:0] input_4;
    input [17:0] input_3;
    input [17:0] input_2;
    input [17:0] input_1;
    input [17:0] input_0;
    input [5:0] sel;
    reg [17:0] result;
  begin
    result = input_0 & {18{sel[0]}};
    result = result | (input_1 & {18{sel[1]}});
    result = result | (input_2 & {18{sel[2]}});
    result = result | (input_3 & {18{sel[3]}});
    result = result | (input_4 & {18{sel[4]}});
    result = result | (input_5 & {18{sel[5]}});
    MUX1HOT_v_18_6_2 = result;
  end
  endfunction


  function automatic [5:0] MUX1HOT_v_6_3_2;
    input [5:0] input_2;
    input [5:0] input_1;
    input [5:0] input_0;
    input [2:0] sel;
    reg [5:0] result;
  begin
    result = input_0 & {6{sel[0]}};
    result = result | (input_1 & {6{sel[1]}});
    result = result | (input_2 & {6{sel[2]}});
    MUX1HOT_v_6_3_2 = result;
  end
  endfunction


  function automatic [6:0] MUX1HOT_v_7_3_2;
    input [6:0] input_2;
    input [6:0] input_1;
    input [6:0] input_0;
    input [2:0] sel;
    reg [6:0] result;
  begin
    result = input_0 & {7{sel[0]}};
    result = result | (input_1 & {7{sel[1]}});
    result = result | (input_2 & {7{sel[2]}});
    MUX1HOT_v_7_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_4_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input [9:0] input_2;
    input [9:0] input_3;
    input [1:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_10_4_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input  sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input  sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [12:0] MUX_v_13_2_2;
    input [12:0] input_0;
    input [12:0] input_1;
    input  sel;
    reg [12:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_13_2_2 = result;
  end
  endfunction


  function automatic [13:0] MUX_v_14_2_2;
    input [13:0] input_0;
    input [13:0] input_1;
    input  sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function automatic [14:0] MUX_v_15_2_2;
    input [14:0] input_0;
    input [14:0] input_1;
    input  sel;
    reg [14:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_15_2_2 = result;
  end
  endfunction


  function automatic [27:0] MUX_v_28_2_2;
    input [27:0] input_0;
    input [27:0] input_1;
    input  sel;
    reg [27:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_28_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [4:0] MUX_v_5_2_2;
    input [4:0] input_0;
    input [4:0] input_1;
    input  sel;
    reg [4:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_5_2_2 = result;
  end
  endfunction


  function automatic [5:0] MUX_v_6_4_2;
    input [5:0] input_0;
    input [5:0] input_1;
    input [5:0] input_2;
    input [5:0] input_3;
    input [1:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = input_0;
      end
      2'b01 : begin
        result = input_1;
      end
      2'b10 : begin
        result = input_2;
      end
      default : begin
        result = input_3;
      end
    endcase
    MUX_v_6_4_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_14_1_13;
    input [13:0] vector;
    reg [13:0] tmp;
  begin
    tmp = vector >> 13;
    readslicef_14_1_13 = tmp[0:0];
  end
  endfunction


  function automatic [11:0] readslicef_18_12_6;
    input [17:0] vector;
    reg [17:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_18_12_6 = tmp[11:0];
  end
  endfunction


  function automatic [24:0] readslicef_36_25_11;
    input [35:0] vector;
    reg [35:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_36_25_11 = tmp[24:0];
  end
  endfunction


  function automatic [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [13:0] signext_14_1;
    input  vector;
  begin
    signext_14_1= {{13{vector}}, vector};
  end
  endfunction


  function automatic [1:0] signext_2_1;
    input  vector;
  begin
    signext_2_1= {{1{vector}}, vector};
  end
  endfunction


  function automatic [2:0] conv_s2s_1_3 ;
    input [0:0]  vector ;
  begin
    conv_s2s_1_3 = {{2{vector[0]}}, vector};
  end
  endfunction


  function automatic [15:0] conv_s2s_14_16 ;
    input [13:0]  vector ;
  begin
    conv_s2s_14_16 = {{2{vector[13]}}, vector};
  end
  endfunction


  function automatic [15:0] conv_s2s_15_16 ;
    input [14:0]  vector ;
  begin
    conv_s2s_15_16 = {vector[14], vector};
  end
  endfunction


  function automatic [11:0] conv_s2u_4_12 ;
    input [3:0]  vector ;
  begin
    conv_s2u_4_12 = {{8{vector[3]}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 =  {1'b0, vector};
  end
  endfunction


  function automatic [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 =  {1'b0, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [9:0] conv_u2u_7_10 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_10 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_9_13 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_13 = {{4{1'b0}}, vector};
  end
  endfunction


  function automatic [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function automatic [13:0] conv_u2u_13_14 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_14 = {1'b0, vector};
  end
  endfunction


  function automatic [14:0] conv_u2u_13_15 ;
    input [12:0]  vector ;
  begin
    conv_u2u_13_15 = {{2{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    UNET_IP_batchnorm_relu
// ------------------------------------------------------------------


module UNET_IP_batchnorm_relu (
  clk, rst, arst_n, input_rsc_radr, input_rsc_re, input_rsc_q, input_rsc_clken, input_triosy_lz,
      output_rsc_wadr, output_rsc_d, output_rsc_we, output_rsc_clken, output_triosy_lz,
      channels, height, width, offset
);
  input clk;
  input rst;
  input arst_n;
  output [14:0] input_rsc_radr;
  output input_rsc_re;
  input [11:0] input_rsc_q;
  output input_rsc_clken;
  output input_triosy_lz;
  output [14:0] output_rsc_wadr;
  output [11:0] output_rsc_d;
  output output_rsc_we;
  output output_rsc_clken;
  output output_triosy_lz;
  input [6:0] channels;
  input [6:0] height;
  input [6:0] width;
  input [9:0] offset;


  // Interconnect Declarations
  wire [11:0] input_rsci_q_d;
  wire [14:0] input_rsci_radr_d;
  wire [11:0] output_rsci_d_d;
  wire [14:0] output_rsci_wadr_d;
  wire [33:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a;
  wire [12:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b;
  wire [33:0] operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z;
  wire input_rsci_re_d_iff;
  wire output_rsci_we_d_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_div #(.width_a(32'sd34),
  .width_b(32'sd13),
  .signd(32'sd0)) operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp (
      .a(operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a),
      .b(operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b),
      .z(operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z)
    );
  UNET_IP_batchnorm_relu_Xilinx_RAMS_BLOCK_1R1W_RBW_rport_en_1_15_12_32768_1_32768_12_1_gen
      input_rsci (
      .clken(input_rsc_clken),
      .q(input_rsc_q),
      .re(input_rsc_re),
      .radr(input_rsc_radr),
      .clken_d(1'b1),
      .q_d(input_rsci_q_d),
      .radr_d(input_rsci_radr_d),
      .re_d(input_rsci_re_d_iff),
      .readA_r_ram_ir_internal_RMASK_B_d(input_rsci_re_d_iff)
    );
  UNET_IP_batchnorm_relu_Xilinx_RAMS_BLOCK_1R1W_RBW_wport_en_2_15_12_32768_1_32768_12_1_gen
      output_rsci (
      .clken(output_rsc_clken),
      .we(output_rsc_we),
      .d(output_rsc_d),
      .wadr(output_rsc_wadr),
      .clken_d(1'b1),
      .d_d(output_rsci_d_d),
      .wadr_d(output_rsci_wadr_d),
      .we_d(output_rsci_we_d_iff),
      .writeA_w_ram_ir_internal_WMASK_B_d(output_rsci_we_d_iff)
    );
  UNET_IP_batchnorm_relu_run_batch UNET_IP_batchnorm_relu_run_batch_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .input_triosy_lz(input_triosy_lz),
      .output_triosy_lz(output_triosy_lz),
      .channels(channels),
      .height(height),
      .width(width),
      .offset(offset),
      .input_rsci_q_d(input_rsci_q_d),
      .input_rsci_radr_d(input_rsci_radr_d),
      .output_rsci_d_d(output_rsci_d_d),
      .output_rsci_wadr_d(output_rsci_wadr_d),
      .operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a(operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_a),
      .operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b(operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_b),
      .operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z(operator_20_8_false_AC_TRN_AC_WRAP_13_false_div_cmp_z),
      .input_rsci_re_d_pff(input_rsci_re_d_iff),
      .output_rsci_we_d_pff(output_rsci_we_d_iff)
    );
endmodule



