// ----------------------------------------------------------------------------
// User Testbench Interface Header
//
//    HLS version: 2023.2/1059873 Production Release
//       HLS date: Mon Aug  7 10:54:31 PDT 2023
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: r12016@cad40
// Generated date: Thu Jun 13 03:09:36 CST 2024
//
// ----------------------------------------------------------------------------

#ifndef CCS_TESTBENCH_H
#define CCS_TESTBENCH_H

#include <ac_int.h>
#include <ac_fixed.h>
#include "mc_wait_ctrl.h"
#include <string.h>
#include <iostream>

class testbench
{
   public:
   int argc;
   char** argv;
   int main(); //CCS_MAIN
   static bool enable_idle_sync_mode;
   static unsigned short idle_sync_stable_cycles;
   static void set_enable_stalls(bool flag);
   static void reset_request();
   static void* _dut_inst;
   static void* dut_inst();
   static void* set_dut_inst( void* _inst );
   static bool input_ignore;
   static bool input_skip;
   static bool input_skip_quiet;
   static bool input_skip_once;
   static bool input_skip_noerr;
   static int  input_array_comp_first;
   static int  input_array_comp_last;
   static mc_wait_ctrl input_wait_ctrl;
   static bool output_ignore;
   static bool output_skip;
   static bool output_skip_quiet;
   static bool output_skip_once;
   static bool output_skip_noerr;
   static int  output_array_comp_first;
   static int  output_array_comp_last;
   static bool output_use_mask;
   static ac_fixed<12, 8, true, AC_TRN, AC_WRAP > output_output_mask;
   static mc_wait_ctrl output_wait_ctrl;
   static bool channels_ignore;
   static bool channels_skip;
   static bool channels_skip_quiet;
   static bool channels_skip_once;
   static bool channels_skip_noerr;
   static int  channels_array_comp_first;
   static int  channels_array_comp_last;
   static mc_wait_ctrl channels_wait_ctrl;
   static bool height_ignore;
   static bool height_skip;
   static bool height_skip_quiet;
   static bool height_skip_once;
   static bool height_skip_noerr;
   static int  height_array_comp_first;
   static int  height_array_comp_last;
   static mc_wait_ctrl height_wait_ctrl;
   static bool width_ignore;
   static bool width_skip;
   static bool width_skip_quiet;
   static bool width_skip_once;
   static bool width_skip_noerr;
   static int  width_array_comp_first;
   static int  width_array_comp_last;
   static mc_wait_ctrl width_wait_ctrl;
   static bool offset_ignore;
   static bool offset_skip;
   static bool offset_skip_quiet;
   static bool offset_skip_once;
   static bool offset_skip_noerr;
   static int  offset_array_comp_first;
   static int  offset_array_comp_last;
   static mc_wait_ctrl offset_wait_ctrl;
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   static void exec_run_batch(ac_fixed<12, 8, true, AC_TRN, AC_WRAP> input[32768], ac_fixed<12, 8, true, AC_TRN, AC_WRAP> output[32768], ac_int<7, false> &channels, ac_int<7, false> &height, ac_int<7, false> &width, ac_int<10, false> &offset);
   #endif
   explicit testbench(int _argc, const char* const *_argv)
      :argc(_argc), argv(const_cast<char**>(_argv))
   {
   }
   ~testbench()
   {
   }
   private:
   testbench() {}
};
extern void mc_testbench_reset_request();
extern void* mc_testbench_dut_inst();
extern void* mc_testbench_set_dut_inst( void* _inst );
extern void mc_testbench_wait_for_idle_sync();
extern void mc_testbench_input_skip(bool v);
extern void mc_testbench_output_skip(bool v);
extern void mc_testbench_channels_skip(bool v);
extern void mc_testbench_height_skip(bool v);
extern void mc_testbench_width_skip(bool v);
extern void mc_testbench_offset_skip(bool v);
#endif //CCS_TESTBENCH_H
