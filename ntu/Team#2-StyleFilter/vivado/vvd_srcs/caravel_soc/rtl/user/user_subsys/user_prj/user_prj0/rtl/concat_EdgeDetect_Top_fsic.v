
//------> /usr/mentor/Catapult/2023.2/Mgc_home/pkgs/siflibs/ccs_in_wait_v1.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------


module ccs_in_wait_v1 (idat, rdy, ivld, dat, irdy, vld);

  parameter integer rscid = 1;
  parameter integer width = 8;

  output [width-1:0] idat;
  output             rdy;
  output             ivld;
  input  [width-1:0] dat;
  input              irdy;
  input              vld;

  wire   [width-1:0] idat;
  wire               rdy;
  wire               ivld;

  localparam stallOff = 0; 
  wire                  stall_ctrl;
  assign stall_ctrl = stallOff;

  assign idat = dat;
  assign rdy = irdy && !stall_ctrl;
  assign ivld = vld && !stall_ctrl;

endmodule


//------> /usr/mentor/Catapult/2023.2/Mgc_home/pkgs/siflibs/ccs_out_wait_v1.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------


module ccs_out_wait_v1 (dat, irdy, vld, idat, rdy, ivld);

  parameter integer rscid = 1;
  parameter integer width = 8;

  output [width-1:0] dat;
  output             irdy;
  output             vld;
  input  [width-1:0] idat;
  input              rdy;
  input              ivld;

  wire   [width-1:0] dat;
  wire               irdy;
  wire               vld;

  localparam stallOff = 0; 
  wire stall_ctrl;
  assign stall_ctrl = stallOff;

  assign dat = idat;
  assign irdy = rdy && !stall_ctrl;
  assign vld = ivld && !stall_ctrl;

endmodule



//------> ../EdgeDetect_IP_Mix.v1/rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r2k41022@cad16
//  Generated date: Thu Jun 13 14:10:17 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_run_fsm (
  clk, rst, arst_n, run_wen, fsm_output, MCOL_C_0_tr0, MROW_C_0_tr0
);
  input clk;
  input rst;
  input arst_n;
  input run_wen;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;
  input MCOL_C_0_tr0;
  input MROW_C_0_tr0;


  // FSM State Type Declaration for EdgeDetect_IP_Mix_run_run_fsm_1
  parameter
    main_C_0 = 2'd0,
    MCOL_C_0 = 2'd1,
    MROW_C_0 = 2'd2,
    main_C_1 = 2'd3;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : EdgeDetect_IP_Mix_run_run_fsm_1
    case (state_var)
      MCOL_C_0 : begin
        fsm_output = 4'b0010;
        if ( MCOL_C_0_tr0 ) begin
          state_var_NS = MROW_C_0;
        end
        else begin
          state_var_NS = MCOL_C_0;
        end
      end
      MROW_C_0 : begin
        fsm_output = 4'b0100;
        if ( MROW_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = MCOL_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 4'b1000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 4'b0001;
        state_var_NS = MCOL_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= main_C_0;
    end
    else if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_staller
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_staller (
  run_wen, grb_in_rsci_wen_comp, magn_rsci_wen_comp, rgb_out_rsci_wen_comp
);
  output run_wen;
  input grb_in_rsci_wen_comp;
  input magn_rsci_wen_comp;
  input rgb_out_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = grb_in_rsci_wen_comp & magn_rsci_wen_comp & rgb_out_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_rgb_out_rsci_rgb_out_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_rgb_out_rsci_rgb_out_wait_dp (
  clk, rst, arst_n, rgb_out_rsci_oswt, rgb_out_rsci_wen_comp, rgb_out_rsci_biwt,
      rgb_out_rsci_bdwt, rgb_out_rsci_bcwt
);
  input clk;
  input rst;
  input arst_n;
  input rgb_out_rsci_oswt;
  output rgb_out_rsci_wen_comp;
  input rgb_out_rsci_biwt;
  input rgb_out_rsci_bdwt;
  output rgb_out_rsci_bcwt;
  reg rgb_out_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign rgb_out_rsci_wen_comp = (~ rgb_out_rsci_oswt) | rgb_out_rsci_biwt | rgb_out_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      rgb_out_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      rgb_out_rsci_bcwt <= 1'b0;
    end
    else begin
      rgb_out_rsci_bcwt <= ~((~(rgb_out_rsci_bcwt | rgb_out_rsci_biwt)) | rgb_out_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_rgb_out_rsci_rgb_out_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_rgb_out_rsci_rgb_out_wait_ctrl (
  run_wen, rgb_out_rsci_oswt, rgb_out_rsci_biwt, rgb_out_rsci_bdwt, rgb_out_rsci_bcwt,
      rgb_out_rsci_irdy, rgb_out_rsci_ivld_run_sct
);
  input run_wen;
  input rgb_out_rsci_oswt;
  output rgb_out_rsci_biwt;
  output rgb_out_rsci_bdwt;
  input rgb_out_rsci_bcwt;
  input rgb_out_rsci_irdy;
  output rgb_out_rsci_ivld_run_sct;


  // Interconnect Declarations
  wire rgb_out_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign rgb_out_rsci_bdwt = rgb_out_rsci_oswt & run_wen;
  assign rgb_out_rsci_biwt = rgb_out_rsci_ogwt & rgb_out_rsci_irdy;
  assign rgb_out_rsci_ogwt = rgb_out_rsci_oswt & (~ rgb_out_rsci_bcwt);
  assign rgb_out_rsci_ivld_run_sct = rgb_out_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_magn_rsci_magn_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_magn_rsci_magn_wait_dp (
  clk, rst, arst_n, magn_rsci_oswt, magn_rsci_wen_comp, magn_rsci_idat_mxwt, magn_rsci_biwt,
      magn_rsci_bdwt, magn_rsci_bcwt, magn_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  input magn_rsci_oswt;
  output magn_rsci_wen_comp;
  output [7:0] magn_rsci_idat_mxwt;
  input magn_rsci_biwt;
  input magn_rsci_bdwt;
  output magn_rsci_bcwt;
  reg magn_rsci_bcwt;
  input [7:0] magn_rsci_idat;


  // Interconnect Declarations
  reg [7:0] magn_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign magn_rsci_wen_comp = (~ magn_rsci_oswt) | magn_rsci_biwt | magn_rsci_bcwt;
  assign magn_rsci_idat_mxwt = MUX_v_8_2_2(magn_rsci_idat, magn_rsci_idat_bfwt, magn_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      magn_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      magn_rsci_bcwt <= 1'b0;
    end
    else begin
      magn_rsci_bcwt <= ~((~(magn_rsci_bcwt | magn_rsci_biwt)) | magn_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( magn_rsci_biwt ) begin
      magn_rsci_idat_bfwt <= magn_rsci_idat;
    end
  end

  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_magn_rsci_magn_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_magn_rsci_magn_wait_ctrl (
  run_wen, magn_rsci_oswt, magn_rsci_biwt, magn_rsci_bdwt, magn_rsci_bcwt, magn_rsci_irdy_run_sct,
      magn_rsci_ivld
);
  input run_wen;
  input magn_rsci_oswt;
  output magn_rsci_biwt;
  output magn_rsci_bdwt;
  input magn_rsci_bcwt;
  output magn_rsci_irdy_run_sct;
  input magn_rsci_ivld;


  // Interconnect Declarations
  wire magn_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign magn_rsci_bdwt = magn_rsci_oswt & run_wen;
  assign magn_rsci_biwt = magn_rsci_ogwt & magn_rsci_ivld;
  assign magn_rsci_ogwt = magn_rsci_oswt & (~ magn_rsci_bcwt);
  assign magn_rsci_irdy_run_sct = magn_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_grb_in_rsci_grb_in_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_grb_in_rsci_grb_in_wait_dp (
  clk, rst, arst_n, grb_in_rsci_oswt, grb_in_rsci_wen_comp, grb_in_rsci_idat_mxwt,
      grb_in_rsci_biwt, grb_in_rsci_bdwt, grb_in_rsci_bcwt, grb_in_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  input grb_in_rsci_oswt;
  output grb_in_rsci_wen_comp;
  output [23:0] grb_in_rsci_idat_mxwt;
  input grb_in_rsci_biwt;
  input grb_in_rsci_bdwt;
  output grb_in_rsci_bcwt;
  reg grb_in_rsci_bcwt;
  input [23:0] grb_in_rsci_idat;


  // Interconnect Declarations
  reg [23:0] grb_in_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign grb_in_rsci_wen_comp = (~ grb_in_rsci_oswt) | grb_in_rsci_biwt | grb_in_rsci_bcwt;
  assign grb_in_rsci_idat_mxwt = MUX_v_24_2_2(grb_in_rsci_idat, grb_in_rsci_idat_bfwt,
      grb_in_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      grb_in_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      grb_in_rsci_bcwt <= 1'b0;
    end
    else begin
      grb_in_rsci_bcwt <= ~((~(grb_in_rsci_bcwt | grb_in_rsci_biwt)) | grb_in_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( grb_in_rsci_biwt ) begin
      grb_in_rsci_idat_bfwt <= grb_in_rsci_idat;
    end
  end

  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input  sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_grb_in_rsci_grb_in_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_grb_in_rsci_grb_in_wait_ctrl (
  run_wen, grb_in_rsci_oswt, grb_in_rsci_biwt, grb_in_rsci_bdwt, grb_in_rsci_bcwt,
      grb_in_rsci_irdy_run_sct, grb_in_rsci_ivld
);
  input run_wen;
  input grb_in_rsci_oswt;
  output grb_in_rsci_biwt;
  output grb_in_rsci_bdwt;
  input grb_in_rsci_bcwt;
  output grb_in_rsci_irdy_run_sct;
  input grb_in_rsci_ivld;


  // Interconnect Declarations
  wire grb_in_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign grb_in_rsci_bdwt = grb_in_rsci_oswt & run_wen;
  assign grb_in_rsci_biwt = grb_in_rsci_ogwt & grb_in_rsci_ivld;
  assign grb_in_rsci_ogwt = grb_in_rsci_oswt & (~ grb_in_rsci_bcwt);
  assign grb_in_rsci_irdy_run_sct = grb_in_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_rgb_out_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_rgb_out_rsci (
  clk, rst, arst_n, rgb_out_rsc_dat, rgb_out_rsc_vld, rgb_out_rsc_rdy, run_wen, rgb_out_rsci_oswt,
      rgb_out_rsci_wen_comp, rgb_out_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  output [33:0] rgb_out_rsc_dat;
  output rgb_out_rsc_vld;
  input rgb_out_rsc_rdy;
  input run_wen;
  input rgb_out_rsci_oswt;
  output rgb_out_rsci_wen_comp;
  input [33:0] rgb_out_rsci_idat;


  // Interconnect Declarations
  wire rgb_out_rsci_biwt;
  wire rgb_out_rsci_bdwt;
  wire rgb_out_rsci_bcwt;
  wire rgb_out_rsci_irdy;
  wire rgb_out_rsci_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  wire [33:0] nl_rgb_out_rsci_idat;
  assign nl_rgb_out_rsci_idat = {(rgb_out_rsci_idat[33:32]) , 7'b0000000 , (rgb_out_rsci_idat[24:0])};
  ccs_out_wait_v1 #(.rscid(32'sd5),
  .width(32'sd34)) rgb_out_rsci (
      .irdy(rgb_out_rsci_irdy),
      .ivld(rgb_out_rsci_ivld_run_sct),
      .idat(nl_rgb_out_rsci_idat[33:0]),
      .rdy(rgb_out_rsc_rdy),
      .vld(rgb_out_rsc_vld),
      .dat(rgb_out_rsc_dat)
    );
  EdgeDetect_IP_Mix_run_rgb_out_rsci_rgb_out_wait_ctrl EdgeDetect_IP_Mix_run_rgb_out_rsci_rgb_out_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .rgb_out_rsci_oswt(rgb_out_rsci_oswt),
      .rgb_out_rsci_biwt(rgb_out_rsci_biwt),
      .rgb_out_rsci_bdwt(rgb_out_rsci_bdwt),
      .rgb_out_rsci_bcwt(rgb_out_rsci_bcwt),
      .rgb_out_rsci_irdy(rgb_out_rsci_irdy),
      .rgb_out_rsci_ivld_run_sct(rgb_out_rsci_ivld_run_sct)
    );
  EdgeDetect_IP_Mix_run_rgb_out_rsci_rgb_out_wait_dp EdgeDetect_IP_Mix_run_rgb_out_rsci_rgb_out_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .rgb_out_rsci_oswt(rgb_out_rsci_oswt),
      .rgb_out_rsci_wen_comp(rgb_out_rsci_wen_comp),
      .rgb_out_rsci_biwt(rgb_out_rsci_biwt),
      .rgb_out_rsci_bdwt(rgb_out_rsci_bdwt),
      .rgb_out_rsci_bcwt(rgb_out_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_magn_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_magn_rsci (
  clk, rst, arst_n, magn_rsc_dat, magn_rsc_vld, magn_rsc_rdy, run_wen, magn_rsci_oswt,
      magn_rsci_wen_comp, magn_rsci_idat_mxwt
);
  input clk;
  input rst;
  input arst_n;
  input [7:0] magn_rsc_dat;
  input magn_rsc_vld;
  output magn_rsc_rdy;
  input run_wen;
  input magn_rsci_oswt;
  output magn_rsci_wen_comp;
  output [7:0] magn_rsci_idat_mxwt;


  // Interconnect Declarations
  wire magn_rsci_biwt;
  wire magn_rsci_bdwt;
  wire magn_rsci_bcwt;
  wire magn_rsci_irdy_run_sct;
  wire magn_rsci_ivld;
  wire [7:0] magn_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd4),
  .width(32'sd8)) magn_rsci (
      .rdy(magn_rsc_rdy),
      .vld(magn_rsc_vld),
      .dat(magn_rsc_dat),
      .irdy(magn_rsci_irdy_run_sct),
      .ivld(magn_rsci_ivld),
      .idat(magn_rsci_idat)
    );
  EdgeDetect_IP_Mix_run_magn_rsci_magn_wait_ctrl EdgeDetect_IP_Mix_run_magn_rsci_magn_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .magn_rsci_oswt(magn_rsci_oswt),
      .magn_rsci_biwt(magn_rsci_biwt),
      .magn_rsci_bdwt(magn_rsci_bdwt),
      .magn_rsci_bcwt(magn_rsci_bcwt),
      .magn_rsci_irdy_run_sct(magn_rsci_irdy_run_sct),
      .magn_rsci_ivld(magn_rsci_ivld)
    );
  EdgeDetect_IP_Mix_run_magn_rsci_magn_wait_dp EdgeDetect_IP_Mix_run_magn_rsci_magn_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .magn_rsci_oswt(magn_rsci_oswt),
      .magn_rsci_wen_comp(magn_rsci_wen_comp),
      .magn_rsci_idat_mxwt(magn_rsci_idat_mxwt),
      .magn_rsci_biwt(magn_rsci_biwt),
      .magn_rsci_bdwt(magn_rsci_bdwt),
      .magn_rsci_bcwt(magn_rsci_bcwt),
      .magn_rsci_idat(magn_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run_grb_in_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run_grb_in_rsci (
  clk, rst, arst_n, grb_in_rsc_dat, grb_in_rsc_vld, grb_in_rsc_rdy, run_wen, grb_in_rsci_oswt,
      grb_in_rsci_wen_comp, grb_in_rsci_idat_mxwt
);
  input clk;
  input rst;
  input arst_n;
  input [23:0] grb_in_rsc_dat;
  input grb_in_rsc_vld;
  output grb_in_rsc_rdy;
  input run_wen;
  input grb_in_rsci_oswt;
  output grb_in_rsci_wen_comp;
  output [23:0] grb_in_rsci_idat_mxwt;


  // Interconnect Declarations
  wire grb_in_rsci_biwt;
  wire grb_in_rsci_bdwt;
  wire grb_in_rsci_bcwt;
  wire grb_in_rsci_irdy_run_sct;
  wire grb_in_rsci_ivld;
  wire [23:0] grb_in_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd1),
  .width(32'sd24)) grb_in_rsci (
      .rdy(grb_in_rsc_rdy),
      .vld(grb_in_rsc_vld),
      .dat(grb_in_rsc_dat),
      .irdy(grb_in_rsci_irdy_run_sct),
      .ivld(grb_in_rsci_ivld),
      .idat(grb_in_rsci_idat)
    );
  EdgeDetect_IP_Mix_run_grb_in_rsci_grb_in_wait_ctrl EdgeDetect_IP_Mix_run_grb_in_rsci_grb_in_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .grb_in_rsci_oswt(grb_in_rsci_oswt),
      .grb_in_rsci_biwt(grb_in_rsci_biwt),
      .grb_in_rsci_bdwt(grb_in_rsci_bdwt),
      .grb_in_rsci_bcwt(grb_in_rsci_bcwt),
      .grb_in_rsci_irdy_run_sct(grb_in_rsci_irdy_run_sct),
      .grb_in_rsci_ivld(grb_in_rsci_ivld)
    );
  EdgeDetect_IP_Mix_run_grb_in_rsci_grb_in_wait_dp EdgeDetect_IP_Mix_run_grb_in_rsci_grb_in_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .grb_in_rsci_oswt(grb_in_rsci_oswt),
      .grb_in_rsci_wen_comp(grb_in_rsci_wen_comp),
      .grb_in_rsci_idat_mxwt(grb_in_rsci_idat_mxwt),
      .grb_in_rsci_biwt(grb_in_rsci_biwt),
      .grb_in_rsci_bdwt(grb_in_rsci_bdwt),
      .grb_in_rsci_bcwt(grb_in_rsci_bcwt),
      .grb_in_rsci_idat(grb_in_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_run
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_run (
  clk, rst, arst_n, grb_in_rsc_dat, grb_in_rsc_vld, grb_in_rsc_rdy, widthIn, heightIn,
      magn_rsc_dat, magn_rsc_vld, magn_rsc_rdy, rgb_out_rsc_dat, rgb_out_rsc_vld,
      rgb_out_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [23:0] grb_in_rsc_dat;
  input grb_in_rsc_vld;
  output grb_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  input [7:0] magn_rsc_dat;
  input magn_rsc_vld;
  output magn_rsc_rdy;
  output [33:0] rgb_out_rsc_dat;
  output rgb_out_rsc_vld;
  input rgb_out_rsc_rdy;


  // Interconnect Declarations
  wire run_wen;
  wire grb_in_rsci_wen_comp;
  wire [23:0] grb_in_rsci_idat_mxwt;
  wire magn_rsci_wen_comp;
  wire [7:0] magn_rsci_idat_mxwt;
  wire rgb_out_rsci_wen_comp;
  reg rgb_out_rsci_idat_33;
  reg rgb_out_rsci_idat_32;
  reg rgb_out_rsci_idat_24;
  reg [7:0] rgb_out_rsci_idat_23_16;
  reg [7:0] rgb_out_rsci_idat_15_8;
  reg [7:0] rgb_out_rsci_idat_7_0;
  wire [3:0] fsm_output;
  wire MROW_equal_tmp;
  wire MCOL_equal_1_tmp;
  reg MCOL_stage_0;
  reg reg_magn_rsci_oswt_cse;
  wire MCOL_and_3_cse;
  reg reg_rgb_out_rsci_oswt_cse;
  wire nand_cse;
  wire [10:0] z_out;
  wire [11:0] nl_z_out;
  reg [9:0] MROW_y_sva;
  reg [10:0] MCOL_x_sva;
  wire MROW_y_or_cse;

  wire MROW_y_not_1_nl;
  wire not_nl;
  wire[10:0] operator_11_false_1_acc_nl;
  wire[11:0] nl_operator_11_false_1_acc_nl;
  wire[9:0] operator_10_false_1_acc_1_nl;
  wire[10:0] nl_operator_10_false_1_acc_1_nl;
  wire MROW_MROW_and_1_nl;
  wire[9:0] MROW_mux_2_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [33:0] nl_EdgeDetect_IP_Mix_run_rgb_out_rsci_inst_rgb_out_rsci_idat;
  assign nl_EdgeDetect_IP_Mix_run_rgb_out_rsci_inst_rgb_out_rsci_idat = {rgb_out_rsci_idat_33
      , rgb_out_rsci_idat_32 , 7'b0000000 , rgb_out_rsci_idat_24 , rgb_out_rsci_idat_23_16
      , rgb_out_rsci_idat_15_8 , rgb_out_rsci_idat_7_0};
  wire  nl_EdgeDetect_IP_Mix_run_run_fsm_inst_MCOL_C_0_tr0;
  assign nl_EdgeDetect_IP_Mix_run_run_fsm_inst_MCOL_C_0_tr0 = ~ MCOL_stage_0;
  EdgeDetect_IP_Mix_run_grb_in_rsci EdgeDetect_IP_Mix_run_grb_in_rsci_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .grb_in_rsc_dat(grb_in_rsc_dat),
      .grb_in_rsc_vld(grb_in_rsc_vld),
      .grb_in_rsc_rdy(grb_in_rsc_rdy),
      .run_wen(run_wen),
      .grb_in_rsci_oswt(reg_magn_rsci_oswt_cse),
      .grb_in_rsci_wen_comp(grb_in_rsci_wen_comp),
      .grb_in_rsci_idat_mxwt(grb_in_rsci_idat_mxwt)
    );
  EdgeDetect_IP_Mix_run_magn_rsci EdgeDetect_IP_Mix_run_magn_rsci_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .magn_rsc_dat(magn_rsc_dat),
      .magn_rsc_vld(magn_rsc_vld),
      .magn_rsc_rdy(magn_rsc_rdy),
      .run_wen(run_wen),
      .magn_rsci_oswt(reg_magn_rsci_oswt_cse),
      .magn_rsci_wen_comp(magn_rsci_wen_comp),
      .magn_rsci_idat_mxwt(magn_rsci_idat_mxwt)
    );
  EdgeDetect_IP_Mix_run_rgb_out_rsci EdgeDetect_IP_Mix_run_rgb_out_rsci_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .rgb_out_rsc_dat(rgb_out_rsc_dat),
      .rgb_out_rsc_vld(rgb_out_rsc_vld),
      .rgb_out_rsc_rdy(rgb_out_rsc_rdy),
      .run_wen(run_wen),
      .rgb_out_rsci_oswt(reg_rgb_out_rsci_oswt_cse),
      .rgb_out_rsci_wen_comp(rgb_out_rsci_wen_comp),
      .rgb_out_rsci_idat(nl_EdgeDetect_IP_Mix_run_rgb_out_rsci_inst_rgb_out_rsci_idat[33:0])
    );
  EdgeDetect_IP_Mix_run_staller EdgeDetect_IP_Mix_run_staller_inst (
      .run_wen(run_wen),
      .grb_in_rsci_wen_comp(grb_in_rsci_wen_comp),
      .magn_rsci_wen_comp(magn_rsci_wen_comp),
      .rgb_out_rsci_wen_comp(rgb_out_rsci_wen_comp)
    );
  EdgeDetect_IP_Mix_run_run_fsm EdgeDetect_IP_Mix_run_run_fsm_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .MCOL_C_0_tr0(nl_EdgeDetect_IP_Mix_run_run_fsm_inst_MCOL_C_0_tr0),
      .MROW_C_0_tr0(MROW_equal_tmp)
    );
  assign MROW_y_or_cse = (fsm_output[0]) | (fsm_output[2]);
  assign MCOL_and_3_cse = run_wen & (fsm_output[1]) & MCOL_stage_0;
  assign nand_cse = ~(MCOL_stage_0 & MCOL_equal_1_tmp);
  assign nl_operator_11_false_1_acc_nl = widthIn + 11'b11111111111;
  assign operator_11_false_1_acc_nl = nl_operator_11_false_1_acc_nl[10:0];
  assign MCOL_equal_1_tmp = MCOL_x_sva == operator_11_false_1_acc_nl;
  assign nl_operator_10_false_1_acc_1_nl = heightIn + 10'b1111111111;
  assign operator_10_false_1_acc_1_nl = nl_operator_10_false_1_acc_1_nl[9:0];
  assign MROW_equal_tmp = MROW_y_sva == operator_10_false_1_acc_1_nl;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_magn_rsci_oswt_cse <= 1'b0;
      MCOL_stage_0 <= 1'b0;
      reg_rgb_out_rsci_oswt_cse <= 1'b0;
    end
    else if ( rst ) begin
      reg_magn_rsci_oswt_cse <= 1'b0;
      MCOL_stage_0 <= 1'b0;
      reg_rgb_out_rsci_oswt_cse <= 1'b0;
    end
    else if ( run_wen ) begin
      reg_magn_rsci_oswt_cse <= ~((fsm_output[3]) | ((~(nand_cse & MCOL_stage_0))
          & (fsm_output[1])) | (MROW_equal_tmp & (fsm_output[2])));
      MCOL_stage_0 <= (MCOL_stage_0 & nand_cse) | MROW_y_or_cse;
      reg_rgb_out_rsci_oswt_cse <= MCOL_stage_0 & (fsm_output[1]);
    end
  end
  always @(posedge clk) begin
    if ( run_wen & MROW_y_or_cse ) begin
      MROW_y_sva <= MUX_v_10_2_2(10'b0000000000, (z_out[9:0]), MROW_y_not_1_nl);
    end
  end
  always @(posedge clk) begin
    if ( MCOL_and_3_cse ) begin
      rgb_out_rsci_idat_24 <= MROW_equal_tmp & MCOL_equal_1_tmp;
      rgb_out_rsci_idat_23_16 <= (grb_in_rsci_idat_mxwt[23:16]) & magn_rsci_idat_mxwt;
      rgb_out_rsci_idat_15_8 <= (grb_in_rsci_idat_mxwt[15:8]) & magn_rsci_idat_mxwt;
      rgb_out_rsci_idat_32 <= ~((MROW_y_sva!=10'b0000000000) | (MCOL_x_sva!=11'b00000000000));
      rgb_out_rsci_idat_7_0 <= (grb_in_rsci_idat_mxwt[7:0]) & magn_rsci_idat_mxwt;
      rgb_out_rsci_idat_33 <= MCOL_equal_1_tmp;
    end
  end
  always @(posedge clk) begin
    if ( run_wen & (MCOL_stage_0 | MROW_y_or_cse) ) begin
      MCOL_x_sva <= MUX_v_11_2_2(11'b00000000000, z_out, not_nl);
    end
  end
  assign MROW_y_not_1_nl = ~ (fsm_output[0]);
  assign not_nl = ~ MROW_y_or_cse;
  assign MROW_MROW_and_1_nl = (MCOL_x_sva[10]) & (fsm_output[1]);
  assign MROW_mux_2_nl = MUX_v_10_2_2(MROW_y_sva, (MCOL_x_sva[9:0]), fsm_output[1]);
  assign nl_z_out = ({MROW_MROW_and_1_nl , MROW_mux_2_nl}) + 11'b00000000001;
  assign z_out = nl_z_out[10:0];

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input  sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input  sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix_struct
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix_struct (
  clk, rst, arst_n, grb_in_rsc_dat_b_pixelType, grb_in_rsc_dat_g_pixelType, grb_in_rsc_dat_r_pixelType,
      grb_in_rsc_vld, grb_in_rsc_rdy, widthIn, heightIn, magn_rsc_dat, magn_rsc_vld,
      magn_rsc_rdy, rgb_out_rsc_dat_eol, rgb_out_rsc_dat_sof, rgb_out_rsc_dat_dummy,
      rgb_out_rsc_dat_b_pixelType, rgb_out_rsc_dat_g_pixelType, rgb_out_rsc_dat_r_pixelType,
      rgb_out_rsc_vld, rgb_out_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [7:0] grb_in_rsc_dat_b_pixelType;
  input [7:0] grb_in_rsc_dat_g_pixelType;
  input [7:0] grb_in_rsc_dat_r_pixelType;
  input grb_in_rsc_vld;
  output grb_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  input [7:0] magn_rsc_dat;
  input magn_rsc_vld;
  output magn_rsc_rdy;
  output rgb_out_rsc_dat_eol;
  output rgb_out_rsc_dat_sof;
  output [7:0] rgb_out_rsc_dat_dummy;
  output [7:0] rgb_out_rsc_dat_b_pixelType;
  output [7:0] rgb_out_rsc_dat_g_pixelType;
  output [7:0] rgb_out_rsc_dat_r_pixelType;
  output rgb_out_rsc_vld;
  input rgb_out_rsc_rdy;


  // Interconnect Declarations
  wire [33:0] rgb_out_rsc_dat;


  // Interconnect Declarations for Component Instantiations 
  wire [23:0] nl_EdgeDetect_IP_Mix_run_inst_grb_in_rsc_dat;
  assign nl_EdgeDetect_IP_Mix_run_inst_grb_in_rsc_dat = {grb_in_rsc_dat_b_pixelType
      , grb_in_rsc_dat_g_pixelType , grb_in_rsc_dat_r_pixelType};
  EdgeDetect_IP_Mix_run EdgeDetect_IP_Mix_run_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .grb_in_rsc_dat(nl_EdgeDetect_IP_Mix_run_inst_grb_in_rsc_dat[23:0]),
      .grb_in_rsc_vld(grb_in_rsc_vld),
      .grb_in_rsc_rdy(grb_in_rsc_rdy),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .magn_rsc_dat(magn_rsc_dat),
      .magn_rsc_vld(magn_rsc_vld),
      .magn_rsc_rdy(magn_rsc_rdy),
      .rgb_out_rsc_dat(rgb_out_rsc_dat),
      .rgb_out_rsc_vld(rgb_out_rsc_vld),
      .rgb_out_rsc_rdy(rgb_out_rsc_rdy)
    );
  assign rgb_out_rsc_dat_r_pixelType = rgb_out_rsc_dat[7:0];
  assign rgb_out_rsc_dat_g_pixelType = rgb_out_rsc_dat[15:8];
  assign rgb_out_rsc_dat_b_pixelType = rgb_out_rsc_dat[23:16];
  assign rgb_out_rsc_dat_dummy = rgb_out_rsc_dat[31:24];
  assign rgb_out_rsc_dat_sof = rgb_out_rsc_dat[32];
  assign rgb_out_rsc_dat_eol = rgb_out_rsc_dat[33];
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Mix
// ------------------------------------------------------------------


module EdgeDetect_IP_Mix (
  clk, rst, arst_n, grb_in_rsc_dat, grb_in_rsc_vld, grb_in_rsc_rdy, widthIn, heightIn,
      magn_rsc_dat, magn_rsc_vld, magn_rsc_rdy, rgb_out_rsc_dat, rgb_out_rsc_vld,
      rgb_out_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [23:0] grb_in_rsc_dat;
  input grb_in_rsc_vld;
  output grb_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  input [7:0] magn_rsc_dat;
  input magn_rsc_vld;
  output magn_rsc_rdy;
  output [33:0] rgb_out_rsc_dat;
  output rgb_out_rsc_vld;
  input rgb_out_rsc_rdy;


  // Interconnect Declarations
  wire rgb_out_rsc_dat_eol;
  wire rgb_out_rsc_dat_sof;
  wire [7:0] rgb_out_rsc_dat_dummy;
  wire [7:0] rgb_out_rsc_dat_b_pixelType;
  wire [7:0] rgb_out_rsc_dat_g_pixelType;
  wire [7:0] rgb_out_rsc_dat_r_pixelType;


  // Interconnect Declarations for Component Instantiations 
  wire [7:0] nl_EdgeDetect_IP_Mix_struct_inst_grb_in_rsc_dat_b_pixelType;
  assign nl_EdgeDetect_IP_Mix_struct_inst_grb_in_rsc_dat_b_pixelType = grb_in_rsc_dat[23:16];
  wire [7:0] nl_EdgeDetect_IP_Mix_struct_inst_grb_in_rsc_dat_g_pixelType;
  assign nl_EdgeDetect_IP_Mix_struct_inst_grb_in_rsc_dat_g_pixelType = grb_in_rsc_dat[15:8];
  wire [7:0] nl_EdgeDetect_IP_Mix_struct_inst_grb_in_rsc_dat_r_pixelType;
  assign nl_EdgeDetect_IP_Mix_struct_inst_grb_in_rsc_dat_r_pixelType = grb_in_rsc_dat[7:0];
  EdgeDetect_IP_Mix_struct EdgeDetect_IP_Mix_struct_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .grb_in_rsc_dat_b_pixelType(nl_EdgeDetect_IP_Mix_struct_inst_grb_in_rsc_dat_b_pixelType[7:0]),
      .grb_in_rsc_dat_g_pixelType(nl_EdgeDetect_IP_Mix_struct_inst_grb_in_rsc_dat_g_pixelType[7:0]),
      .grb_in_rsc_dat_r_pixelType(nl_EdgeDetect_IP_Mix_struct_inst_grb_in_rsc_dat_r_pixelType[7:0]),
      .grb_in_rsc_vld(grb_in_rsc_vld),
      .grb_in_rsc_rdy(grb_in_rsc_rdy),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .magn_rsc_dat(magn_rsc_dat),
      .magn_rsc_vld(magn_rsc_vld),
      .magn_rsc_rdy(magn_rsc_rdy),
      .rgb_out_rsc_dat_eol(rgb_out_rsc_dat_eol),
      .rgb_out_rsc_dat_sof(rgb_out_rsc_dat_sof),
      .rgb_out_rsc_dat_dummy(rgb_out_rsc_dat_dummy),
      .rgb_out_rsc_dat_b_pixelType(rgb_out_rsc_dat_b_pixelType),
      .rgb_out_rsc_dat_g_pixelType(rgb_out_rsc_dat_g_pixelType),
      .rgb_out_rsc_dat_r_pixelType(rgb_out_rsc_dat_r_pixelType),
      .rgb_out_rsc_vld(rgb_out_rsc_vld),
      .rgb_out_rsc_rdy(rgb_out_rsc_rdy)
    );
  assign rgb_out_rsc_dat = {rgb_out_rsc_dat_eol , rgb_out_rsc_dat_sof , rgb_out_rsc_dat_dummy
      , rgb_out_rsc_dat_b_pixelType , rgb_out_rsc_dat_g_pixelType , rgb_out_rsc_dat_r_pixelType};
endmodule




//------> ../EdgeDetect_IP_Kmean.v1/rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r2k41022@cad16
//  Generated date: Thu Jun 13 14:09:25 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_run_run_fsm (
  clk, rst, arst_n, run_wen, fsm_output, KCOL_C_0_tr0, KROW_C_0_tr0
);
  input clk;
  input rst;
  input arst_n;
  input run_wen;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;
  input KCOL_C_0_tr0;
  input KROW_C_0_tr0;


  // FSM State Type Declaration for EdgeDetect_IP_Kmean_run_run_fsm_1
  parameter
    main_C_0 = 2'd0,
    KCOL_C_0 = 2'd1,
    KROW_C_0 = 2'd2,
    main_C_1 = 2'd3;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : EdgeDetect_IP_Kmean_run_run_fsm_1
    case (state_var)
      KCOL_C_0 : begin
        fsm_output = 4'b0010;
        if ( KCOL_C_0_tr0 ) begin
          state_var_NS = KROW_C_0;
        end
        else begin
          state_var_NS = KCOL_C_0;
        end
      end
      KROW_C_0 : begin
        fsm_output = 4'b0100;
        if ( KROW_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = KCOL_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 4'b1000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 4'b0001;
        state_var_NS = KCOL_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= main_C_0;
    end
    else if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_run_staller
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_run_staller (
  run_wen, kmean_in_rsci_wen_comp, kmean_out_rsci_wen_comp
);
  output run_wen;
  input kmean_in_rsci_wen_comp;
  input kmean_out_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = kmean_in_rsci_wen_comp & kmean_out_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_run_kmean_out_rsci_kmean_out_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_run_kmean_out_rsci_kmean_out_wait_dp (
  clk, rst, arst_n, kmean_out_rsci_oswt, kmean_out_rsci_wen_comp, kmean_out_rsci_biwt,
      kmean_out_rsci_bdwt, kmean_out_rsci_bcwt
);
  input clk;
  input rst;
  input arst_n;
  input kmean_out_rsci_oswt;
  output kmean_out_rsci_wen_comp;
  input kmean_out_rsci_biwt;
  input kmean_out_rsci_bdwt;
  output kmean_out_rsci_bcwt;
  reg kmean_out_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign kmean_out_rsci_wen_comp = (~ kmean_out_rsci_oswt) | kmean_out_rsci_biwt
      | kmean_out_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      kmean_out_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      kmean_out_rsci_bcwt <= 1'b0;
    end
    else begin
      kmean_out_rsci_bcwt <= ~((~(kmean_out_rsci_bcwt | kmean_out_rsci_biwt)) | kmean_out_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_run_kmean_out_rsci_kmean_out_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_run_kmean_out_rsci_kmean_out_wait_ctrl (
  run_wen, kmean_out_rsci_oswt, kmean_out_rsci_biwt, kmean_out_rsci_bdwt, kmean_out_rsci_bcwt,
      kmean_out_rsci_irdy, kmean_out_rsci_ivld_run_sct
);
  input run_wen;
  input kmean_out_rsci_oswt;
  output kmean_out_rsci_biwt;
  output kmean_out_rsci_bdwt;
  input kmean_out_rsci_bcwt;
  input kmean_out_rsci_irdy;
  output kmean_out_rsci_ivld_run_sct;


  // Interconnect Declarations
  wire kmean_out_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign kmean_out_rsci_bdwt = kmean_out_rsci_oswt & run_wen;
  assign kmean_out_rsci_biwt = kmean_out_rsci_ogwt & kmean_out_rsci_irdy;
  assign kmean_out_rsci_ogwt = kmean_out_rsci_oswt & (~ kmean_out_rsci_bcwt);
  assign kmean_out_rsci_ivld_run_sct = kmean_out_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_run_kmean_in_rsci_kmean_in_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_run_kmean_in_rsci_kmean_in_wait_dp (
  clk, rst, arst_n, kmean_in_rsci_oswt, kmean_in_rsci_wen_comp, kmean_in_rsci_idat_mxwt,
      kmean_in_rsci_biwt, kmean_in_rsci_bdwt, kmean_in_rsci_bcwt, kmean_in_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  input kmean_in_rsci_oswt;
  output kmean_in_rsci_wen_comp;
  output [23:0] kmean_in_rsci_idat_mxwt;
  input kmean_in_rsci_biwt;
  input kmean_in_rsci_bdwt;
  output kmean_in_rsci_bcwt;
  reg kmean_in_rsci_bcwt;
  input [33:0] kmean_in_rsci_idat;


  // Interconnect Declarations
  reg [23:0] kmean_in_rsci_idat_bfwt_23_0;


  // Interconnect Declarations for Component Instantiations 
  assign kmean_in_rsci_wen_comp = (~ kmean_in_rsci_oswt) | kmean_in_rsci_biwt | kmean_in_rsci_bcwt;
  assign kmean_in_rsci_idat_mxwt = MUX_v_24_2_2((kmean_in_rsci_idat[23:0]), kmean_in_rsci_idat_bfwt_23_0,
      kmean_in_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      kmean_in_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      kmean_in_rsci_bcwt <= 1'b0;
    end
    else begin
      kmean_in_rsci_bcwt <= ~((~(kmean_in_rsci_bcwt | kmean_in_rsci_biwt)) | kmean_in_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( kmean_in_rsci_biwt ) begin
      kmean_in_rsci_idat_bfwt_23_0 <= kmean_in_rsci_idat[23:0];
    end
  end

  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input  sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_run_kmean_in_rsci_kmean_in_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_run_kmean_in_rsci_kmean_in_wait_ctrl (
  run_wen, kmean_in_rsci_oswt, kmean_in_rsci_biwt, kmean_in_rsci_bdwt, kmean_in_rsci_bcwt,
      kmean_in_rsci_irdy_run_sct, kmean_in_rsci_ivld
);
  input run_wen;
  input kmean_in_rsci_oswt;
  output kmean_in_rsci_biwt;
  output kmean_in_rsci_bdwt;
  input kmean_in_rsci_bcwt;
  output kmean_in_rsci_irdy_run_sct;
  input kmean_in_rsci_ivld;


  // Interconnect Declarations
  wire kmean_in_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign kmean_in_rsci_bdwt = kmean_in_rsci_oswt & run_wen;
  assign kmean_in_rsci_biwt = kmean_in_rsci_ogwt & kmean_in_rsci_ivld;
  assign kmean_in_rsci_ogwt = kmean_in_rsci_oswt & (~ kmean_in_rsci_bcwt);
  assign kmean_in_rsci_irdy_run_sct = kmean_in_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_run_kmean_out_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_run_kmean_out_rsci (
  clk, rst, arst_n, kmean_out_rsc_dat, kmean_out_rsc_vld, kmean_out_rsc_rdy, run_wen,
      kmean_out_rsci_oswt, kmean_out_rsci_wen_comp, kmean_out_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  output [23:0] kmean_out_rsc_dat;
  output kmean_out_rsc_vld;
  input kmean_out_rsc_rdy;
  input run_wen;
  input kmean_out_rsci_oswt;
  output kmean_out_rsci_wen_comp;
  input [23:0] kmean_out_rsci_idat;


  // Interconnect Declarations
  wire kmean_out_rsci_biwt;
  wire kmean_out_rsci_bdwt;
  wire kmean_out_rsci_bcwt;
  wire kmean_out_rsci_irdy;
  wire kmean_out_rsci_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd4),
  .width(32'sd24)) kmean_out_rsci (
      .irdy(kmean_out_rsci_irdy),
      .ivld(kmean_out_rsci_ivld_run_sct),
      .idat(kmean_out_rsci_idat),
      .rdy(kmean_out_rsc_rdy),
      .vld(kmean_out_rsc_vld),
      .dat(kmean_out_rsc_dat)
    );
  EdgeDetect_IP_Kmean_run_kmean_out_rsci_kmean_out_wait_ctrl EdgeDetect_IP_Kmean_run_kmean_out_rsci_kmean_out_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .kmean_out_rsci_oswt(kmean_out_rsci_oswt),
      .kmean_out_rsci_biwt(kmean_out_rsci_biwt),
      .kmean_out_rsci_bdwt(kmean_out_rsci_bdwt),
      .kmean_out_rsci_bcwt(kmean_out_rsci_bcwt),
      .kmean_out_rsci_irdy(kmean_out_rsci_irdy),
      .kmean_out_rsci_ivld_run_sct(kmean_out_rsci_ivld_run_sct)
    );
  EdgeDetect_IP_Kmean_run_kmean_out_rsci_kmean_out_wait_dp EdgeDetect_IP_Kmean_run_kmean_out_rsci_kmean_out_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .kmean_out_rsci_oswt(kmean_out_rsci_oswt),
      .kmean_out_rsci_wen_comp(kmean_out_rsci_wen_comp),
      .kmean_out_rsci_biwt(kmean_out_rsci_biwt),
      .kmean_out_rsci_bdwt(kmean_out_rsci_bdwt),
      .kmean_out_rsci_bcwt(kmean_out_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_run_kmean_in_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_run_kmean_in_rsci (
  clk, rst, arst_n, kmean_in_rsc_dat, kmean_in_rsc_vld, kmean_in_rsc_rdy, run_wen,
      kmean_in_rsci_oswt, kmean_in_rsci_wen_comp, kmean_in_rsci_idat_mxwt
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] kmean_in_rsc_dat;
  input kmean_in_rsc_vld;
  output kmean_in_rsc_rdy;
  input run_wen;
  input kmean_in_rsci_oswt;
  output kmean_in_rsci_wen_comp;
  output [23:0] kmean_in_rsci_idat_mxwt;


  // Interconnect Declarations
  wire kmean_in_rsci_biwt;
  wire kmean_in_rsci_bdwt;
  wire kmean_in_rsci_bcwt;
  wire kmean_in_rsci_irdy_run_sct;
  wire kmean_in_rsci_ivld;
  wire [33:0] kmean_in_rsci_idat;
  wire [23:0] kmean_in_rsci_idat_mxwt_pconst;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd1),
  .width(32'sd34)) kmean_in_rsci (
      .rdy(kmean_in_rsc_rdy),
      .vld(kmean_in_rsc_vld),
      .dat(kmean_in_rsc_dat),
      .irdy(kmean_in_rsci_irdy_run_sct),
      .ivld(kmean_in_rsci_ivld),
      .idat(kmean_in_rsci_idat)
    );
  EdgeDetect_IP_Kmean_run_kmean_in_rsci_kmean_in_wait_ctrl EdgeDetect_IP_Kmean_run_kmean_in_rsci_kmean_in_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .kmean_in_rsci_oswt(kmean_in_rsci_oswt),
      .kmean_in_rsci_biwt(kmean_in_rsci_biwt),
      .kmean_in_rsci_bdwt(kmean_in_rsci_bdwt),
      .kmean_in_rsci_bcwt(kmean_in_rsci_bcwt),
      .kmean_in_rsci_irdy_run_sct(kmean_in_rsci_irdy_run_sct),
      .kmean_in_rsci_ivld(kmean_in_rsci_ivld)
    );
  EdgeDetect_IP_Kmean_run_kmean_in_rsci_kmean_in_wait_dp EdgeDetect_IP_Kmean_run_kmean_in_rsci_kmean_in_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .kmean_in_rsci_oswt(kmean_in_rsci_oswt),
      .kmean_in_rsci_wen_comp(kmean_in_rsci_wen_comp),
      .kmean_in_rsci_idat_mxwt(kmean_in_rsci_idat_mxwt_pconst),
      .kmean_in_rsci_biwt(kmean_in_rsci_biwt),
      .kmean_in_rsci_bdwt(kmean_in_rsci_bdwt),
      .kmean_in_rsci_bcwt(kmean_in_rsci_bcwt),
      .kmean_in_rsci_idat(kmean_in_rsci_idat)
    );
  assign kmean_in_rsci_idat_mxwt = kmean_in_rsci_idat_mxwt_pconst;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_run
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_run (
  clk, rst, arst_n, kmean_in_rsc_dat, kmean_in_rsc_vld, kmean_in_rsc_rdy, widthIn,
      heightIn, kmean_out_rsc_dat, kmean_out_rsc_vld, kmean_out_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] kmean_in_rsc_dat;
  input kmean_in_rsc_vld;
  output kmean_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [23:0] kmean_out_rsc_dat;
  output kmean_out_rsc_vld;
  input kmean_out_rsc_rdy;


  // Interconnect Declarations
  wire run_wen;
  wire kmean_in_rsci_wen_comp;
  wire [23:0] kmean_in_rsci_idat_mxwt;
  wire kmean_out_rsci_wen_comp;
  reg [7:0] kmean_out_rsci_idat_23_16;
  reg [7:0] kmean_out_rsci_idat_15_8;
  reg [7:0] kmean_out_rsci_idat_7_0;
  wire [3:0] fsm_output;
  wire KCOL_equal_tmp;
  wire or_dcpl_4;
  wire [2:0] KCOL_for_j_2_0_lpi_3_dfm_2;
  reg [2:0] KCOL_for_j_2_0_lpi_3;
  wire [3:0] nl_KCOL_for_j_2_0_lpi_3;
  reg exitL_exit_KCOL_for_sva;
  reg KCOL_stage_0;
  reg KCOL_stage_0_2;
  reg [2:0] KCOL_for_j_2_0_lpi_3_dfm_st_1;
  reg KCOL_asn_4_itm_1;
  reg KCOL_for_and_itm_1;
  wire operator_33_true_unequal_tmp_1;
  wire [23:0] kmean_in_crt_lpi_3_dfm_1_23_0_mx0;
  wire [7:0] EdgeDetect_IP_Kmean_distance_a_sva_1;
  wire KCOL_and_cse;
  reg reg_kmean_in_rsci_oswt_cse;
  reg reg_kmean_out_rsci_oswt_cse;
  wire or_25_cse;
  wire [10:0] z_out;
  wire [11:0] nl_z_out;
  wire or_tmp_18;
  wire [7:0] z_out_1;
  wire or_tmp_20;
  wire [7:0] z_out_2;
  wire or_tmp_22;
  wire [7:0] z_out_3;
  wire [10:0] z_out_4;
  wire [11:0] nl_z_out_4;
  reg [9:0] KROW_y_sva;
  reg [10:0] KCOL_x_sva;
  reg [7:0] KROW_distance_pix_r_pixelType_lpi_3_dfm_1;
  reg [7:0] KROW_distance_pix_g_pixelType_lpi_3_dfm_1;
  reg [7:0] KROW_distance_pix_b_pixelType_lpi_3_dfm_1;
  reg [2:0] KCOL_for_KCOL_for_and_itm_1;
  reg [2:0] KCOL_for_KCOL_for_and_1_itm_1;
  reg [2:0] KCOL_for_KCOL_for_and_2_itm_1;
  reg [23:0] kmean_in_crt_lpi_3_23_0;
  wire [2:0] KROW_index_pix_b_pixelType_2_0_lpi_3_dfm_1_mx0;
  wire [2:0] KROW_index_pix_r_pixelType_2_0_lpi_3_dfm_1_mx0;
  wire [2:0] KROW_index_pix_g_pixelType_2_0_lpi_3_dfm_1_mx0;
  wire KCOL_and_3_cse;
  wire KROW_y_or_cse;
  wire operator_11_false_acc_itm_11_1;
  wire KCOL_for_if_2_acc_itm_8;
  wire KCOL_for_if_1_acc_itm_8;
  wire KCOL_for_if_acc_itm_8;

  wire KROW_y_not_1_nl;
  wire not_nl;
  wire KCOL_for_not_33_nl;
  wire[7:0] KCOL_for_mux_5_nl;
  wire KCOL_for_not_22_nl;
  wire[7:0] KCOL_for_mux_6_nl;
  wire KCOL_for_not_31_nl;
  wire[7:0] KCOL_for_mux_7_nl;
  wire[11:0] operator_11_false_acc_nl;
  wire[12:0] nl_operator_11_false_acc_nl;
  wire KCOL_for_not_32_nl;
  wire[8:0] KCOL_for_if_2_acc_nl;
  wire[9:0] nl_KCOL_for_if_2_acc_nl;
  wire[8:0] KCOL_for_if_1_acc_nl;
  wire[9:0] nl_KCOL_for_if_1_acc_nl;
  wire[8:0] KCOL_for_if_acc_nl;
  wire[9:0] nl_KCOL_for_if_acc_nl;
  wire[8:0] EdgeDetect_IP_Kmean_distance_if_acc_1_nl;
  wire[9:0] nl_EdgeDetect_IP_Kmean_distance_if_acc_1_nl;
  wire[8:0] EdgeDetect_IP_Kmean_distance_2_if_acc_1_nl;
  wire[9:0] nl_EdgeDetect_IP_Kmean_distance_2_if_acc_1_nl;
  wire[8:0] EdgeDetect_IP_Kmean_distance_1_if_acc_1_nl;
  wire[9:0] nl_EdgeDetect_IP_Kmean_distance_1_if_acc_1_nl;
  wire KROW_KROW_and_1_nl;
  wire[9:0] KROW_mux_2_nl;
  wire[8:0] acc_1_nl;
  wire[9:0] nl_acc_1_nl;
  wire[7:0] EdgeDetect_IP_Kmean_distance_else_mux_2_nl;
  wire[7:0] EdgeDetect_IP_Kmean_distance_else_mux_3_nl;
  wire[8:0] acc_2_nl;
  wire[9:0] nl_acc_2_nl;
  wire[7:0] EdgeDetect_IP_Kmean_distance_2_else_mux_2_nl;
  wire[7:0] EdgeDetect_IP_Kmean_distance_2_else_mux_3_nl;
  wire[8:0] acc_3_nl;
  wire[9:0] nl_acc_3_nl;
  wire[7:0] EdgeDetect_IP_Kmean_distance_1_else_mux_2_nl;
  wire[7:0] EdgeDetect_IP_Kmean_distance_1_else_mux_3_nl;
  wire operator_11_false_1_operator_11_false_1_and_1_nl;
  wire[9:0] operator_11_false_1_mux_2_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [23:0] nl_EdgeDetect_IP_Kmean_run_kmean_out_rsci_inst_kmean_out_rsci_idat;
  assign nl_EdgeDetect_IP_Kmean_run_kmean_out_rsci_inst_kmean_out_rsci_idat = {kmean_out_rsci_idat_23_16
      , kmean_out_rsci_idat_15_8 , kmean_out_rsci_idat_7_0};
  wire  nl_EdgeDetect_IP_Kmean_run_run_fsm_inst_KCOL_C_0_tr0;
  assign nl_EdgeDetect_IP_Kmean_run_run_fsm_inst_KCOL_C_0_tr0 = ~(KCOL_stage_0_2
      | KCOL_stage_0);
  wire  nl_EdgeDetect_IP_Kmean_run_run_fsm_inst_KROW_C_0_tr0;
  assign nl_EdgeDetect_IP_Kmean_run_run_fsm_inst_KROW_C_0_tr0 = KROW_y_sva == (z_out_4[9:0]);
  EdgeDetect_IP_Kmean_run_kmean_in_rsci EdgeDetect_IP_Kmean_run_kmean_in_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .kmean_in_rsc_dat(kmean_in_rsc_dat),
      .kmean_in_rsc_vld(kmean_in_rsc_vld),
      .kmean_in_rsc_rdy(kmean_in_rsc_rdy),
      .run_wen(run_wen),
      .kmean_in_rsci_oswt(reg_kmean_in_rsci_oswt_cse),
      .kmean_in_rsci_wen_comp(kmean_in_rsci_wen_comp),
      .kmean_in_rsci_idat_mxwt(kmean_in_rsci_idat_mxwt)
    );
  EdgeDetect_IP_Kmean_run_kmean_out_rsci EdgeDetect_IP_Kmean_run_kmean_out_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .kmean_out_rsc_dat(kmean_out_rsc_dat),
      .kmean_out_rsc_vld(kmean_out_rsc_vld),
      .kmean_out_rsc_rdy(kmean_out_rsc_rdy),
      .run_wen(run_wen),
      .kmean_out_rsci_oswt(reg_kmean_out_rsci_oswt_cse),
      .kmean_out_rsci_wen_comp(kmean_out_rsci_wen_comp),
      .kmean_out_rsci_idat(nl_EdgeDetect_IP_Kmean_run_kmean_out_rsci_inst_kmean_out_rsci_idat[23:0])
    );
  EdgeDetect_IP_Kmean_run_staller EdgeDetect_IP_Kmean_run_staller_inst (
      .run_wen(run_wen),
      .kmean_in_rsci_wen_comp(kmean_in_rsci_wen_comp),
      .kmean_out_rsci_wen_comp(kmean_out_rsci_wen_comp)
    );
  EdgeDetect_IP_Kmean_run_run_fsm EdgeDetect_IP_Kmean_run_run_fsm_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .KCOL_C_0_tr0(nl_EdgeDetect_IP_Kmean_run_run_fsm_inst_KCOL_C_0_tr0),
      .KROW_C_0_tr0(nl_EdgeDetect_IP_Kmean_run_run_fsm_inst_KROW_C_0_tr0)
    );
  assign KCOL_and_cse = run_wen & (~((~ (fsm_output[1])) | (~(KCOL_stage_0_2 & (KCOL_for_j_2_0_lpi_3_dfm_st_1[2])))
      | (KCOL_for_j_2_0_lpi_3_dfm_st_1[1:0]!=2'b00)));
  assign KCOL_and_3_cse = run_wen & KCOL_stage_0;
  assign KROW_y_or_cse = (fsm_output[0]) | (fsm_output[2]);
  assign or_25_cse = or_dcpl_4 | (KCOL_for_j_2_0_lpi_3[2:1]!=2'b10);
  assign nl_operator_11_false_acc_nl = ({1'b1 , widthIn}) + conv_u2s_11_12(~ KCOL_x_sva);
  assign operator_11_false_acc_nl = nl_operator_11_false_acc_nl[11:0];
  assign operator_11_false_acc_itm_11_1 = readslicef_12_1_11(operator_11_false_acc_nl);
  assign KCOL_for_not_32_nl = ~ exitL_exit_KCOL_for_sva;
  assign KCOL_for_j_2_0_lpi_3_dfm_2 = MUX_v_3_2_2(3'b000, KCOL_for_j_2_0_lpi_3, KCOL_for_not_32_nl);
  assign kmean_in_crt_lpi_3_dfm_1_23_0_mx0 = MUX_v_24_2_2(kmean_in_crt_lpi_3_23_0,
      kmean_in_rsci_idat_mxwt, KCOL_for_and_itm_1);
  assign EdgeDetect_IP_Kmean_distance_a_sva_1 = MUX_v_8_5_2(8'b00000000, 8'b00110100,
      8'b10011010, 8'b11001101, 8'b11111111, KCOL_for_j_2_0_lpi_3_dfm_st_1);
  assign KROW_index_pix_b_pixelType_2_0_lpi_3_dfm_1_mx0 = MUX_v_3_2_2(KCOL_for_KCOL_for_and_2_itm_1,
      KCOL_for_j_2_0_lpi_3_dfm_st_1, KCOL_for_if_2_acc_itm_8);
  assign KROW_index_pix_r_pixelType_2_0_lpi_3_dfm_1_mx0 = MUX_v_3_2_2(KCOL_for_KCOL_for_and_itm_1,
      KCOL_for_j_2_0_lpi_3_dfm_st_1, KCOL_for_if_acc_itm_8);
  assign KROW_index_pix_g_pixelType_2_0_lpi_3_dfm_1_mx0 = MUX_v_3_2_2(KCOL_for_KCOL_for_and_1_itm_1,
      KCOL_for_j_2_0_lpi_3_dfm_st_1, KCOL_for_if_1_acc_itm_8);
  assign KCOL_equal_tmp = KCOL_x_sva == z_out_4;
  assign operator_33_true_unequal_tmp_1 = ~((KCOL_for_j_2_0_lpi_3_dfm_2==3'b100));
  assign nl_KCOL_for_if_2_acc_nl = ({1'b1 , z_out_2}) + conv_u2u_8_9(~ KROW_distance_pix_b_pixelType_lpi_3_dfm_1)
      + 9'b000000001;
  assign KCOL_for_if_2_acc_nl = nl_KCOL_for_if_2_acc_nl[8:0];
  assign KCOL_for_if_2_acc_itm_8 = readslicef_9_1_8(KCOL_for_if_2_acc_nl);
  assign nl_KCOL_for_if_1_acc_nl = ({1'b1 , z_out_3}) + conv_u2u_8_9(~ KROW_distance_pix_g_pixelType_lpi_3_dfm_1)
      + 9'b000000001;
  assign KCOL_for_if_1_acc_nl = nl_KCOL_for_if_1_acc_nl[8:0];
  assign KCOL_for_if_1_acc_itm_8 = readslicef_9_1_8(KCOL_for_if_1_acc_nl);
  assign nl_KCOL_for_if_acc_nl = ({1'b1 , z_out_1}) + conv_u2u_8_9(~ KROW_distance_pix_r_pixelType_lpi_3_dfm_1)
      + 9'b000000001;
  assign KCOL_for_if_acc_nl = nl_KCOL_for_if_acc_nl[8:0];
  assign KCOL_for_if_acc_itm_8 = readslicef_9_1_8(KCOL_for_if_acc_nl);
  assign or_dcpl_4 = exitL_exit_KCOL_for_sva | (KCOL_for_j_2_0_lpi_3[0]);
  assign nl_EdgeDetect_IP_Kmean_distance_if_acc_1_nl = ({1'b1 , (kmean_in_crt_lpi_3_dfm_1_23_0_mx0[7:0])})
      + conv_u2u_8_9(~ EdgeDetect_IP_Kmean_distance_a_sva_1) + 9'b000000001;
  assign EdgeDetect_IP_Kmean_distance_if_acc_1_nl = nl_EdgeDetect_IP_Kmean_distance_if_acc_1_nl[8:0];
  assign or_tmp_18 = (readslicef_9_1_8(EdgeDetect_IP_Kmean_distance_if_acc_1_nl))
      & (fsm_output[1]);
  assign nl_EdgeDetect_IP_Kmean_distance_2_if_acc_1_nl = ({1'b1 , (kmean_in_crt_lpi_3_dfm_1_23_0_mx0[23:16])})
      + conv_u2u_8_9(~ EdgeDetect_IP_Kmean_distance_a_sva_1) + 9'b000000001;
  assign EdgeDetect_IP_Kmean_distance_2_if_acc_1_nl = nl_EdgeDetect_IP_Kmean_distance_2_if_acc_1_nl[8:0];
  assign or_tmp_20 = (readslicef_9_1_8(EdgeDetect_IP_Kmean_distance_2_if_acc_1_nl))
      & (fsm_output[1]);
  assign nl_EdgeDetect_IP_Kmean_distance_1_if_acc_1_nl = ({1'b1 , (kmean_in_crt_lpi_3_dfm_1_23_0_mx0[15:8])})
      + conv_u2u_8_9(~ EdgeDetect_IP_Kmean_distance_a_sva_1) + 9'b000000001;
  assign EdgeDetect_IP_Kmean_distance_1_if_acc_1_nl = nl_EdgeDetect_IP_Kmean_distance_1_if_acc_1_nl[8:0];
  assign or_tmp_22 = (readslicef_9_1_8(EdgeDetect_IP_Kmean_distance_1_if_acc_1_nl))
      & (fsm_output[1]);
  always @(posedge clk) begin
    if ( KCOL_and_cse ) begin
      kmean_out_rsci_idat_23_16 <= MUX_v_8_5_2(8'b00000000, 8'b00110100, 8'b10011010,
          8'b11001101, 8'b11111111, KROW_index_pix_b_pixelType_2_0_lpi_3_dfm_1_mx0);
      kmean_out_rsci_idat_7_0 <= MUX_v_8_5_2(8'b00000000, 8'b00110100, 8'b10011010,
          8'b11001101, 8'b11111111, KROW_index_pix_r_pixelType_2_0_lpi_3_dfm_1_mx0);
      kmean_out_rsci_idat_15_8 <= MUX_v_8_5_2(8'b00000000, 8'b00110100, 8'b10011010,
          8'b11001101, 8'b11111111, KROW_index_pix_g_pixelType_2_0_lpi_3_dfm_1_mx0);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      KCOL_asn_4_itm_1 <= 1'b0;
      KCOL_for_j_2_0_lpi_3_dfm_st_1 <= 3'b000;
      KCOL_for_and_itm_1 <= 1'b0;
    end
    else if ( rst ) begin
      KCOL_asn_4_itm_1 <= 1'b0;
      KCOL_for_j_2_0_lpi_3_dfm_st_1 <= 3'b000;
      KCOL_for_and_itm_1 <= 1'b0;
    end
    else if ( KCOL_and_3_cse ) begin
      KCOL_asn_4_itm_1 <= KCOL_equal_tmp & (~ operator_33_true_unequal_tmp_1);
      KCOL_for_j_2_0_lpi_3_dfm_st_1 <= KCOL_for_j_2_0_lpi_3_dfm_2;
      KCOL_for_and_itm_1 <= (~ operator_11_false_acc_itm_11_1) & exitL_exit_KCOL_for_sva;
    end
  end
  always @(posedge clk) begin
    if ( run_wen & (fsm_output[1]) & ((~(exitL_exit_KCOL_for_sva & KCOL_stage_0))
        | operator_11_false_acc_itm_11_1) & (~((~(KCOL_for_and_itm_1 & KCOL_stage_0_2))
        | (KCOL_asn_4_itm_1 & KCOL_stage_0))) ) begin
      kmean_in_crt_lpi_3_23_0 <= kmean_in_rsci_idat_mxwt;
    end
  end
  always @(posedge clk) begin
    if ( run_wen & KROW_y_or_cse ) begin
      KROW_y_sva <= MUX_v_10_2_2(10'b0000000000, (z_out[9:0]), KROW_y_not_1_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      KCOL_stage_0 <= 1'b0;
      exitL_exit_KCOL_for_sva <= 1'b0;
      KCOL_stage_0_2 <= 1'b0;
      reg_kmean_in_rsci_oswt_cse <= 1'b0;
      reg_kmean_out_rsci_oswt_cse <= 1'b0;
    end
    else if ( rst ) begin
      KCOL_stage_0 <= 1'b0;
      exitL_exit_KCOL_for_sva <= 1'b0;
      KCOL_stage_0_2 <= 1'b0;
      reg_kmean_in_rsci_oswt_cse <= 1'b0;
      reg_kmean_out_rsci_oswt_cse <= 1'b0;
    end
    else if ( run_wen ) begin
      KCOL_stage_0 <= (KCOL_stage_0 & (or_dcpl_4 | (KCOL_for_j_2_0_lpi_3[1]) | (~((KCOL_for_j_2_0_lpi_3[2])
          & KCOL_equal_tmp)))) | KROW_y_or_cse;
      exitL_exit_KCOL_for_sva <= (~(KCOL_equal_tmp | operator_33_true_unequal_tmp_1))
          | KROW_y_or_cse;
      KCOL_stage_0_2 <= KCOL_stage_0 & (~ KROW_y_or_cse);
      reg_kmean_in_rsci_oswt_cse <= exitL_exit_KCOL_for_sva & KCOL_stage_0 & (~ operator_11_false_acc_itm_11_1)
          & (fsm_output[1]);
      reg_kmean_out_rsci_oswt_cse <= KCOL_stage_0_2 & (KCOL_for_j_2_0_lpi_3_dfm_st_1==3'b100)
          & (fsm_output[1]);
    end
  end
  always @(posedge clk) begin
    if ( run_wen & ((~ or_25_cse) | KROW_y_or_cse) ) begin
      KCOL_x_sva <= MUX_v_11_2_2(11'b00000000000, z_out, not_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      KCOL_for_j_2_0_lpi_3 <= 3'b000;
    end
    else if ( rst ) begin
      KCOL_for_j_2_0_lpi_3 <= 3'b000;
    end
    else if ( run_wen & or_25_cse & KCOL_stage_0 ) begin
      KCOL_for_j_2_0_lpi_3 <= nl_KCOL_for_j_2_0_lpi_3[2:0];
    end
  end
  always @(posedge clk) begin
    if ( KCOL_and_3_cse & (KCOL_for_if_2_acc_itm_8 | exitL_exit_KCOL_for_sva) ) begin
      KCOL_for_KCOL_for_and_2_itm_1 <= MUX_v_3_2_2(3'b000, KROW_index_pix_b_pixelType_2_0_lpi_3_dfm_1_mx0,
          KCOL_for_not_33_nl);
    end
  end
  always @(posedge clk) begin
    if ( KCOL_and_3_cse ) begin
      KROW_distance_pix_b_pixelType_lpi_3_dfm_1 <= MUX_v_8_2_2(KCOL_for_mux_5_nl,
          8'b11111111, exitL_exit_KCOL_for_sva);
      KROW_distance_pix_g_pixelType_lpi_3_dfm_1 <= MUX_v_8_2_2(KCOL_for_mux_6_nl,
          8'b11111111, exitL_exit_KCOL_for_sva);
      KROW_distance_pix_r_pixelType_lpi_3_dfm_1 <= MUX_v_8_2_2(KCOL_for_mux_7_nl,
          8'b11111111, exitL_exit_KCOL_for_sva);
    end
  end
  always @(posedge clk) begin
    if ( KCOL_and_3_cse & (KCOL_for_if_1_acc_itm_8 | exitL_exit_KCOL_for_sva) ) begin
      KCOL_for_KCOL_for_and_1_itm_1 <= MUX_v_3_2_2(3'b000, KROW_index_pix_g_pixelType_2_0_lpi_3_dfm_1_mx0,
          KCOL_for_not_22_nl);
    end
  end
  always @(posedge clk) begin
    if ( KCOL_and_3_cse & (KCOL_for_if_acc_itm_8 | exitL_exit_KCOL_for_sva) ) begin
      KCOL_for_KCOL_for_and_itm_1 <= MUX_v_3_2_2(3'b000, KROW_index_pix_r_pixelType_2_0_lpi_3_dfm_1_mx0,
          KCOL_for_not_31_nl);
    end
  end
  assign KROW_y_not_1_nl = ~ (fsm_output[0]);
  assign not_nl = ~ KROW_y_or_cse;
  assign nl_KCOL_for_j_2_0_lpi_3  = conv_u2s_2_3(KCOL_for_j_2_0_lpi_3_dfm_2[1:0])
      + 3'b001;
  assign KCOL_for_not_33_nl = ~ exitL_exit_KCOL_for_sva;
  assign KCOL_for_mux_5_nl = MUX_v_8_2_2(KROW_distance_pix_b_pixelType_lpi_3_dfm_1,
      z_out_2, KCOL_for_if_2_acc_itm_8);
  assign KCOL_for_mux_6_nl = MUX_v_8_2_2(KROW_distance_pix_g_pixelType_lpi_3_dfm_1,
      z_out_3, KCOL_for_if_1_acc_itm_8);
  assign KCOL_for_mux_7_nl = MUX_v_8_2_2(KROW_distance_pix_r_pixelType_lpi_3_dfm_1,
      z_out_1, KCOL_for_if_acc_itm_8);
  assign KCOL_for_not_22_nl = ~ exitL_exit_KCOL_for_sva;
  assign KCOL_for_not_31_nl = ~ exitL_exit_KCOL_for_sva;
  assign KROW_KROW_and_1_nl = (KCOL_x_sva[10]) & (fsm_output[1]);
  assign KROW_mux_2_nl = MUX_v_10_2_2(KROW_y_sva, (KCOL_x_sva[9:0]), fsm_output[1]);
  assign nl_z_out = ({KROW_KROW_and_1_nl , KROW_mux_2_nl}) + 11'b00000000001;
  assign z_out = nl_z_out[10:0];
  assign EdgeDetect_IP_Kmean_distance_else_mux_2_nl = MUX_v_8_2_2((kmean_in_crt_lpi_3_dfm_1_23_0_mx0[7:0]),
      EdgeDetect_IP_Kmean_distance_a_sva_1, or_tmp_18);
  assign EdgeDetect_IP_Kmean_distance_else_mux_3_nl = MUX_v_8_2_2((~ EdgeDetect_IP_Kmean_distance_a_sva_1),
      (~ (kmean_in_crt_lpi_3_dfm_1_23_0_mx0[7:0])), or_tmp_18);
  assign nl_acc_1_nl = ({EdgeDetect_IP_Kmean_distance_else_mux_2_nl , 1'b1}) + ({EdgeDetect_IP_Kmean_distance_else_mux_3_nl
      , 1'b1});
  assign acc_1_nl = nl_acc_1_nl[8:0];
  assign z_out_1 = readslicef_9_8_1(acc_1_nl);
  assign EdgeDetect_IP_Kmean_distance_2_else_mux_2_nl = MUX_v_8_2_2((kmean_in_crt_lpi_3_dfm_1_23_0_mx0[23:16]),
      EdgeDetect_IP_Kmean_distance_a_sva_1, or_tmp_20);
  assign EdgeDetect_IP_Kmean_distance_2_else_mux_3_nl = MUX_v_8_2_2((~ EdgeDetect_IP_Kmean_distance_a_sva_1),
      (~ (kmean_in_crt_lpi_3_dfm_1_23_0_mx0[23:16])), or_tmp_20);
  assign nl_acc_2_nl = ({EdgeDetect_IP_Kmean_distance_2_else_mux_2_nl , 1'b1}) +
      ({EdgeDetect_IP_Kmean_distance_2_else_mux_3_nl , 1'b1});
  assign acc_2_nl = nl_acc_2_nl[8:0];
  assign z_out_2 = readslicef_9_8_1(acc_2_nl);
  assign EdgeDetect_IP_Kmean_distance_1_else_mux_2_nl = MUX_v_8_2_2((kmean_in_crt_lpi_3_dfm_1_23_0_mx0[15:8]),
      EdgeDetect_IP_Kmean_distance_a_sva_1, or_tmp_22);
  assign EdgeDetect_IP_Kmean_distance_1_else_mux_3_nl = MUX_v_8_2_2((~ EdgeDetect_IP_Kmean_distance_a_sva_1),
      (~ (kmean_in_crt_lpi_3_dfm_1_23_0_mx0[15:8])), or_tmp_22);
  assign nl_acc_3_nl = ({EdgeDetect_IP_Kmean_distance_1_else_mux_2_nl , 1'b1}) +
      ({EdgeDetect_IP_Kmean_distance_1_else_mux_3_nl , 1'b1});
  assign acc_3_nl = nl_acc_3_nl[8:0];
  assign z_out_3 = readslicef_9_8_1(acc_3_nl);
  assign operator_11_false_1_operator_11_false_1_and_1_nl = (widthIn[10]) & (~ (fsm_output[2]));
  assign operator_11_false_1_mux_2_nl = MUX_v_10_2_2((widthIn[9:0]), heightIn, fsm_output[2]);
  assign nl_z_out_4 = ({operator_11_false_1_operator_11_false_1_and_1_nl , operator_11_false_1_mux_2_nl})
      + 11'b11111111111;
  assign z_out_4 = nl_z_out_4[10:0];

  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input  sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input  sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input  sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction


  function automatic [2:0] MUX_v_3_2_2;
    input [2:0] input_0;
    input [2:0] input_1;
    input  sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_5_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input [7:0] input_2;
    input [7:0] input_3;
    input [7:0] input_4;
    input [2:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = input_0;
      end
      3'b001 : begin
        result = input_1;
      end
      3'b010 : begin
        result = input_2;
      end
      3'b011 : begin
        result = input_3;
      end
      default : begin
        result = input_4;
      end
    endcase
    MUX_v_8_5_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function automatic [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function automatic [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 =  {1'b0, vector};
  end
  endfunction


  function automatic [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 =  {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean_struct
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean_struct (
  clk, rst, arst_n, kmean_in_rsc_dat_eol, kmean_in_rsc_dat_sof, kmean_in_rsc_dat_dummy,
      kmean_in_rsc_dat_b_pixelType, kmean_in_rsc_dat_g_pixelType, kmean_in_rsc_dat_r_pixelType,
      kmean_in_rsc_vld, kmean_in_rsc_rdy, widthIn, heightIn, kmean_out_rsc_dat_b_pixelType,
      kmean_out_rsc_dat_g_pixelType, kmean_out_rsc_dat_r_pixelType, kmean_out_rsc_vld,
      kmean_out_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input kmean_in_rsc_dat_eol;
  input kmean_in_rsc_dat_sof;
  input [7:0] kmean_in_rsc_dat_dummy;
  input [7:0] kmean_in_rsc_dat_b_pixelType;
  input [7:0] kmean_in_rsc_dat_g_pixelType;
  input [7:0] kmean_in_rsc_dat_r_pixelType;
  input kmean_in_rsc_vld;
  output kmean_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [7:0] kmean_out_rsc_dat_b_pixelType;
  output [7:0] kmean_out_rsc_dat_g_pixelType;
  output [7:0] kmean_out_rsc_dat_r_pixelType;
  output kmean_out_rsc_vld;
  input kmean_out_rsc_rdy;


  // Interconnect Declarations
  wire [23:0] kmean_out_rsc_dat;


  // Interconnect Declarations for Component Instantiations 
  wire [33:0] nl_EdgeDetect_IP_Kmean_run_inst_kmean_in_rsc_dat;
  assign nl_EdgeDetect_IP_Kmean_run_inst_kmean_in_rsc_dat = {kmean_in_rsc_dat_eol
      , kmean_in_rsc_dat_sof , kmean_in_rsc_dat_dummy , kmean_in_rsc_dat_b_pixelType
      , kmean_in_rsc_dat_g_pixelType , kmean_in_rsc_dat_r_pixelType};
  EdgeDetect_IP_Kmean_run EdgeDetect_IP_Kmean_run_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .kmean_in_rsc_dat(nl_EdgeDetect_IP_Kmean_run_inst_kmean_in_rsc_dat[33:0]),
      .kmean_in_rsc_vld(kmean_in_rsc_vld),
      .kmean_in_rsc_rdy(kmean_in_rsc_rdy),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .kmean_out_rsc_dat(kmean_out_rsc_dat),
      .kmean_out_rsc_vld(kmean_out_rsc_vld),
      .kmean_out_rsc_rdy(kmean_out_rsc_rdy)
    );
  assign kmean_out_rsc_dat_r_pixelType = kmean_out_rsc_dat[7:0];
  assign kmean_out_rsc_dat_g_pixelType = kmean_out_rsc_dat[15:8];
  assign kmean_out_rsc_dat_b_pixelType = kmean_out_rsc_dat[23:16];
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_Kmean
// ------------------------------------------------------------------


module EdgeDetect_IP_Kmean (
  clk, rst, arst_n, kmean_in_rsc_dat, kmean_in_rsc_vld, kmean_in_rsc_rdy, widthIn,
      heightIn, kmean_out_rsc_dat, kmean_out_rsc_vld, kmean_out_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] kmean_in_rsc_dat;
  input kmean_in_rsc_vld;
  output kmean_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [23:0] kmean_out_rsc_dat;
  output kmean_out_rsc_vld;
  input kmean_out_rsc_rdy;


  // Interconnect Declarations
  wire [7:0] kmean_out_rsc_dat_b_pixelType;
  wire [7:0] kmean_out_rsc_dat_g_pixelType;
  wire [7:0] kmean_out_rsc_dat_r_pixelType;


  // Interconnect Declarations for Component Instantiations 
  wire  nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_eol;
  assign nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_eol = kmean_in_rsc_dat[33];
  wire  nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_sof;
  assign nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_sof = kmean_in_rsc_dat[32];
  wire [7:0] nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_dummy;
  assign nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_dummy = kmean_in_rsc_dat[31:24];
  wire [7:0] nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_b_pixelType;
  assign nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_b_pixelType = kmean_in_rsc_dat[23:16];
  wire [7:0] nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_g_pixelType;
  assign nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_g_pixelType = kmean_in_rsc_dat[15:8];
  wire [7:0] nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_r_pixelType;
  assign nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_r_pixelType = kmean_in_rsc_dat[7:0];
  EdgeDetect_IP_Kmean_struct EdgeDetect_IP_Kmean_struct_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .kmean_in_rsc_dat_eol(nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_eol),
      .kmean_in_rsc_dat_sof(nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_sof),
      .kmean_in_rsc_dat_dummy(nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_dummy[7:0]),
      .kmean_in_rsc_dat_b_pixelType(nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_b_pixelType[7:0]),
      .kmean_in_rsc_dat_g_pixelType(nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_g_pixelType[7:0]),
      .kmean_in_rsc_dat_r_pixelType(nl_EdgeDetect_IP_Kmean_struct_inst_kmean_in_rsc_dat_r_pixelType[7:0]),
      .kmean_in_rsc_vld(kmean_in_rsc_vld),
      .kmean_in_rsc_rdy(kmean_in_rsc_rdy),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .kmean_out_rsc_dat_b_pixelType(kmean_out_rsc_dat_b_pixelType),
      .kmean_out_rsc_dat_g_pixelType(kmean_out_rsc_dat_g_pixelType),
      .kmean_out_rsc_dat_r_pixelType(kmean_out_rsc_dat_r_pixelType),
      .kmean_out_rsc_vld(kmean_out_rsc_vld),
      .kmean_out_rsc_rdy(kmean_out_rsc_rdy)
    );
  assign kmean_out_rsc_dat = {kmean_out_rsc_dat_b_pixelType , kmean_out_rsc_dat_g_pixelType
      , kmean_out_rsc_dat_r_pixelType};
endmodule




//------> /usr/mentor/Catapult/2023.2/Mgc_home/pkgs/siflibs/mgc_io_sync_v2.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------


module mgc_io_sync_v2 (ld, lz);
    parameter valid = 0;

    input  ld;
    output lz;

    wire   lz;

    assign lz = ld;

endmodule


//------> /usr/mentor/Catapult/2023.2/Mgc_home/pkgs/siflibs/ccs_in_v1.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------


module ccs_in_v1 (idat, dat);

  parameter integer rscid = 1;
  parameter integer width = 8;

  output [width-1:0] idat;
  input  [width-1:0] dat;

  wire   [width-1:0] idat;

  assign idat = dat;

endmodule


//------> ../EdgeDetect_IP_EdgeDetect_MagAng.v1/rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r2k41022@cad16
//  Generated date: Thu Jun 13 14:09:53 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_run_fsm (
  clk, rst, arst_n, run_wen, fsm_output, MCOL_C_0_tr0, MROW_C_0_tr0
);
  input clk;
  input rst;
  input arst_n;
  input run_wen;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;
  input MCOL_C_0_tr0;
  input MROW_C_0_tr0;


  // FSM State Type Declaration for EdgeDetect_IP_EdgeDetect_MagAng_run_run_fsm_1
  parameter
    main_C_0 = 2'd0,
    MCOL_C_0 = 2'd1,
    MROW_C_0 = 2'd2,
    main_C_1 = 2'd3;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : EdgeDetect_IP_EdgeDetect_MagAng_run_run_fsm_1
    case (state_var)
      MCOL_C_0 : begin
        fsm_output = 4'b0010;
        if ( MCOL_C_0_tr0 ) begin
          state_var_NS = MROW_C_0;
        end
        else begin
          state_var_NS = MCOL_C_0;
        end
      end
      MROW_C_0 : begin
        fsm_output = 4'b0100;
        if ( MROW_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = MCOL_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 4'b1000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 4'b0001;
        state_var_NS = MCOL_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= main_C_0;
    end
    else if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_staller
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_staller (
  clk, rst, arst_n, run_wen, run_wten, dx_in_rsci_wen_comp, dy_in_rsci_wen_comp,
      magn_rsci_wen_comp
);
  input clk;
  input rst;
  input arst_n;
  output run_wen;
  output run_wten;
  reg run_wten;
  input dx_in_rsci_wen_comp;
  input dy_in_rsci_wen_comp;
  input magn_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = dx_in_rsci_wen_comp & dy_in_rsci_wen_comp & magn_rsci_wen_comp;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      run_wten <= 1'b0;
    end
    else if ( rst ) begin
      run_wten <= 1'b0;
    end
    else begin
      run_wten <= ~ run_wen;
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_heightIn_triosy_obj_heightIn_triosy_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_heightIn_triosy_obj_heightIn_triosy_wait_ctrl
    (
  run_wten, heightIn_triosy_obj_iswt0, heightIn_triosy_obj_biwt
);
  input run_wten;
  input heightIn_triosy_obj_iswt0;
  output heightIn_triosy_obj_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign heightIn_triosy_obj_biwt = (~ run_wten) & heightIn_triosy_obj_iswt0;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_widthIn_triosy_obj_widthIn_triosy_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_widthIn_triosy_obj_widthIn_triosy_wait_ctrl
    (
  run_wten, widthIn_triosy_obj_iswt0, widthIn_triosy_obj_biwt
);
  input run_wten;
  input widthIn_triosy_obj_iswt0;
  output widthIn_triosy_obj_biwt;



  // Interconnect Declarations for Component Instantiations 
  assign widthIn_triosy_obj_biwt = (~ run_wten) & widthIn_triosy_obj_iswt0;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_magn_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_magn_wait_dp (
  clk, rst, arst_n, magn_rsci_oswt, magn_rsci_wen_comp, magn_rsci_biwt, magn_rsci_bdwt,
      magn_rsci_bcwt
);
  input clk;
  input rst;
  input arst_n;
  input magn_rsci_oswt;
  output magn_rsci_wen_comp;
  input magn_rsci_biwt;
  input magn_rsci_bdwt;
  output magn_rsci_bcwt;
  reg magn_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign magn_rsci_wen_comp = (~ magn_rsci_oswt) | magn_rsci_biwt | magn_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      magn_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      magn_rsci_bcwt <= 1'b0;
    end
    else begin
      magn_rsci_bcwt <= ~((~(magn_rsci_bcwt | magn_rsci_biwt)) | magn_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_magn_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_magn_wait_ctrl (
  run_wen, magn_rsci_oswt, magn_rsci_biwt, magn_rsci_bdwt, magn_rsci_bcwt, magn_rsci_irdy,
      magn_rsci_ivld_run_sct
);
  input run_wen;
  input magn_rsci_oswt;
  output magn_rsci_biwt;
  output magn_rsci_bdwt;
  input magn_rsci_bcwt;
  input magn_rsci_irdy;
  output magn_rsci_ivld_run_sct;


  // Interconnect Declarations
  wire magn_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign magn_rsci_bdwt = magn_rsci_oswt & run_wen;
  assign magn_rsci_biwt = magn_rsci_ogwt & magn_rsci_irdy;
  assign magn_rsci_ogwt = magn_rsci_oswt & (~ magn_rsci_bcwt);
  assign magn_rsci_ivld_run_sct = magn_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci_dy_in_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci_dy_in_wait_dp (
  clk, rst, arst_n, dy_in_rsci_oswt, dy_in_rsci_wen_comp, dy_in_rsci_idat_mxwt, dy_in_rsci_biwt,
      dy_in_rsci_bdwt, dy_in_rsci_bcwt, dy_in_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  input dy_in_rsci_oswt;
  output dy_in_rsci_wen_comp;
  output [8:0] dy_in_rsci_idat_mxwt;
  input dy_in_rsci_biwt;
  input dy_in_rsci_bdwt;
  output dy_in_rsci_bcwt;
  reg dy_in_rsci_bcwt;
  input [8:0] dy_in_rsci_idat;


  // Interconnect Declarations
  reg [8:0] dy_in_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign dy_in_rsci_wen_comp = (~ dy_in_rsci_oswt) | dy_in_rsci_biwt | dy_in_rsci_bcwt;
  assign dy_in_rsci_idat_mxwt = MUX_v_9_2_2(dy_in_rsci_idat, dy_in_rsci_idat_bfwt,
      dy_in_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dy_in_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      dy_in_rsci_bcwt <= 1'b0;
    end
    else begin
      dy_in_rsci_bcwt <= ~((~(dy_in_rsci_bcwt | dy_in_rsci_biwt)) | dy_in_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( dy_in_rsci_biwt ) begin
      dy_in_rsci_idat_bfwt <= dy_in_rsci_idat;
    end
  end

  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input  sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci_dy_in_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci_dy_in_wait_ctrl (
  run_wen, dy_in_rsci_oswt, dy_in_rsci_biwt, dy_in_rsci_bdwt, dy_in_rsci_bcwt, dy_in_rsci_irdy_run_sct,
      dy_in_rsci_ivld
);
  input run_wen;
  input dy_in_rsci_oswt;
  output dy_in_rsci_biwt;
  output dy_in_rsci_bdwt;
  input dy_in_rsci_bcwt;
  output dy_in_rsci_irdy_run_sct;
  input dy_in_rsci_ivld;


  // Interconnect Declarations
  wire dy_in_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dy_in_rsci_bdwt = dy_in_rsci_oswt & run_wen;
  assign dy_in_rsci_biwt = dy_in_rsci_ogwt & dy_in_rsci_ivld;
  assign dy_in_rsci_ogwt = dy_in_rsci_oswt & (~ dy_in_rsci_bcwt);
  assign dy_in_rsci_irdy_run_sct = dy_in_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci_dx_in_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci_dx_in_wait_dp (
  clk, rst, arst_n, dx_in_rsci_oswt, dx_in_rsci_wen_comp, dx_in_rsci_idat_mxwt, dx_in_rsci_biwt,
      dx_in_rsci_bdwt, dx_in_rsci_bcwt, dx_in_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  input dx_in_rsci_oswt;
  output dx_in_rsci_wen_comp;
  output [8:0] dx_in_rsci_idat_mxwt;
  input dx_in_rsci_biwt;
  input dx_in_rsci_bdwt;
  output dx_in_rsci_bcwt;
  reg dx_in_rsci_bcwt;
  input [8:0] dx_in_rsci_idat;


  // Interconnect Declarations
  reg [8:0] dx_in_rsci_idat_bfwt;


  // Interconnect Declarations for Component Instantiations 
  assign dx_in_rsci_wen_comp = (~ dx_in_rsci_oswt) | dx_in_rsci_biwt | dx_in_rsci_bcwt;
  assign dx_in_rsci_idat_mxwt = MUX_v_9_2_2(dx_in_rsci_idat, dx_in_rsci_idat_bfwt,
      dx_in_rsci_bcwt);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dx_in_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      dx_in_rsci_bcwt <= 1'b0;
    end
    else begin
      dx_in_rsci_bcwt <= ~((~(dx_in_rsci_bcwt | dx_in_rsci_biwt)) | dx_in_rsci_bdwt);
    end
  end
  always @(posedge clk) begin
    if ( dx_in_rsci_biwt ) begin
      dx_in_rsci_idat_bfwt <= dx_in_rsci_idat;
    end
  end

  function automatic [8:0] MUX_v_9_2_2;
    input [8:0] input_0;
    input [8:0] input_1;
    input  sel;
    reg [8:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_9_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci_dx_in_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci_dx_in_wait_ctrl (
  run_wen, dx_in_rsci_oswt, dx_in_rsci_biwt, dx_in_rsci_bdwt, dx_in_rsci_bcwt, dx_in_rsci_irdy_run_sct,
      dx_in_rsci_ivld
);
  input run_wen;
  input dx_in_rsci_oswt;
  output dx_in_rsci_biwt;
  output dx_in_rsci_bdwt;
  input dx_in_rsci_bcwt;
  output dx_in_rsci_irdy_run_sct;
  input dx_in_rsci_ivld;


  // Interconnect Declarations
  wire dx_in_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dx_in_rsci_bdwt = dx_in_rsci_oswt & run_wen;
  assign dx_in_rsci_biwt = dx_in_rsci_ogwt & dx_in_rsci_ivld;
  assign dx_in_rsci_ogwt = dx_in_rsci_oswt & (~ dx_in_rsci_bcwt);
  assign dx_in_rsci_irdy_run_sct = dx_in_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_heightIn_triosy_obj
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_heightIn_triosy_obj (
  heightIn_triosy_lz, run_wten, heightIn_triosy_obj_iswt0
);
  output heightIn_triosy_lz;
  input run_wten;
  input heightIn_triosy_obj_iswt0;


  // Interconnect Declarations
  wire heightIn_triosy_obj_biwt;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) heightIn_triosy_obj (
      .ld(heightIn_triosy_obj_biwt),
      .lz(heightIn_triosy_lz)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_heightIn_triosy_obj_heightIn_triosy_wait_ctrl
      EdgeDetect_IP_EdgeDetect_MagAng_run_heightIn_triosy_obj_heightIn_triosy_wait_ctrl_inst
      (
      .run_wten(run_wten),
      .heightIn_triosy_obj_iswt0(heightIn_triosy_obj_iswt0),
      .heightIn_triosy_obj_biwt(heightIn_triosy_obj_biwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_widthIn_triosy_obj
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_widthIn_triosy_obj (
  widthIn_triosy_lz, run_wten, widthIn_triosy_obj_iswt0
);
  output widthIn_triosy_lz;
  input run_wten;
  input widthIn_triosy_obj_iswt0;


  // Interconnect Declarations
  wire widthIn_triosy_obj_biwt;


  // Interconnect Declarations for Component Instantiations 
  mgc_io_sync_v2 #(.valid(32'sd0)) widthIn_triosy_obj (
      .ld(widthIn_triosy_obj_biwt),
      .lz(widthIn_triosy_lz)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_widthIn_triosy_obj_widthIn_triosy_wait_ctrl
      EdgeDetect_IP_EdgeDetect_MagAng_run_widthIn_triosy_obj_widthIn_triosy_wait_ctrl_inst
      (
      .run_wten(run_wten),
      .widthIn_triosy_obj_iswt0(widthIn_triosy_obj_iswt0),
      .widthIn_triosy_obj_biwt(widthIn_triosy_obj_biwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci (
  clk, rst, arst_n, magn_rsc_dat, magn_rsc_vld, magn_rsc_rdy, run_wen, magn_rsci_oswt,
      magn_rsci_wen_comp, magn_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  output [7:0] magn_rsc_dat;
  output magn_rsc_vld;
  input magn_rsc_rdy;
  input run_wen;
  input magn_rsci_oswt;
  output magn_rsci_wen_comp;
  input [7:0] magn_rsci_idat;


  // Interconnect Declarations
  wire magn_rsci_biwt;
  wire magn_rsci_bdwt;
  wire magn_rsci_bcwt;
  wire magn_rsci_irdy;
  wire magn_rsci_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd5),
  .width(32'sd8)) magn_rsci (
      .irdy(magn_rsci_irdy),
      .ivld(magn_rsci_ivld_run_sct),
      .idat(magn_rsci_idat),
      .rdy(magn_rsc_rdy),
      .vld(magn_rsc_vld),
      .dat(magn_rsc_dat)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_magn_wait_ctrl EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_magn_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .magn_rsci_oswt(magn_rsci_oswt),
      .magn_rsci_biwt(magn_rsci_biwt),
      .magn_rsci_bdwt(magn_rsci_bdwt),
      .magn_rsci_bcwt(magn_rsci_bcwt),
      .magn_rsci_irdy(magn_rsci_irdy),
      .magn_rsci_ivld_run_sct(magn_rsci_ivld_run_sct)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_magn_wait_dp EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_magn_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .magn_rsci_oswt(magn_rsci_oswt),
      .magn_rsci_wen_comp(magn_rsci_wen_comp),
      .magn_rsci_biwt(magn_rsci_biwt),
      .magn_rsci_bdwt(magn_rsci_bdwt),
      .magn_rsci_bcwt(magn_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci (
  clk, rst, arst_n, dy_in_rsc_dat, dy_in_rsc_vld, dy_in_rsc_rdy, run_wen, dy_in_rsci_oswt,
      dy_in_rsci_wen_comp, dy_in_rsci_idat_mxwt
);
  input clk;
  input rst;
  input arst_n;
  input [8:0] dy_in_rsc_dat;
  input dy_in_rsc_vld;
  output dy_in_rsc_rdy;
  input run_wen;
  input dy_in_rsci_oswt;
  output dy_in_rsci_wen_comp;
  output [8:0] dy_in_rsci_idat_mxwt;


  // Interconnect Declarations
  wire dy_in_rsci_biwt;
  wire dy_in_rsci_bdwt;
  wire dy_in_rsci_bcwt;
  wire dy_in_rsci_irdy_run_sct;
  wire dy_in_rsci_ivld;
  wire [8:0] dy_in_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd2),
  .width(32'sd9)) dy_in_rsci (
      .rdy(dy_in_rsc_rdy),
      .vld(dy_in_rsc_vld),
      .dat(dy_in_rsc_dat),
      .irdy(dy_in_rsci_irdy_run_sct),
      .ivld(dy_in_rsci_ivld),
      .idat(dy_in_rsci_idat)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci_dy_in_wait_ctrl EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci_dy_in_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dy_in_rsci_oswt(dy_in_rsci_oswt),
      .dy_in_rsci_biwt(dy_in_rsci_biwt),
      .dy_in_rsci_bdwt(dy_in_rsci_bdwt),
      .dy_in_rsci_bcwt(dy_in_rsci_bcwt),
      .dy_in_rsci_irdy_run_sct(dy_in_rsci_irdy_run_sct),
      .dy_in_rsci_ivld(dy_in_rsci_ivld)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci_dy_in_wait_dp EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci_dy_in_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dy_in_rsci_oswt(dy_in_rsci_oswt),
      .dy_in_rsci_wen_comp(dy_in_rsci_wen_comp),
      .dy_in_rsci_idat_mxwt(dy_in_rsci_idat_mxwt),
      .dy_in_rsci_biwt(dy_in_rsci_biwt),
      .dy_in_rsci_bdwt(dy_in_rsci_bdwt),
      .dy_in_rsci_bcwt(dy_in_rsci_bcwt),
      .dy_in_rsci_idat(dy_in_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci (
  clk, rst, arst_n, dx_in_rsc_dat, dx_in_rsc_vld, dx_in_rsc_rdy, run_wen, dx_in_rsci_oswt,
      dx_in_rsci_wen_comp, dx_in_rsci_idat_mxwt
);
  input clk;
  input rst;
  input arst_n;
  input [8:0] dx_in_rsc_dat;
  input dx_in_rsc_vld;
  output dx_in_rsc_rdy;
  input run_wen;
  input dx_in_rsci_oswt;
  output dx_in_rsci_wen_comp;
  output [8:0] dx_in_rsci_idat_mxwt;


  // Interconnect Declarations
  wire dx_in_rsci_biwt;
  wire dx_in_rsci_bdwt;
  wire dx_in_rsci_bcwt;
  wire dx_in_rsci_irdy_run_sct;
  wire dx_in_rsci_ivld;
  wire [8:0] dx_in_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_v1 #(.rscid(32'sd1),
  .width(32'sd9)) dx_in_rsci (
      .rdy(dx_in_rsc_rdy),
      .vld(dx_in_rsc_vld),
      .dat(dx_in_rsc_dat),
      .irdy(dx_in_rsci_irdy_run_sct),
      .ivld(dx_in_rsci_ivld),
      .idat(dx_in_rsci_idat)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci_dx_in_wait_ctrl EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci_dx_in_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dx_in_rsci_oswt(dx_in_rsci_oswt),
      .dx_in_rsci_biwt(dx_in_rsci_biwt),
      .dx_in_rsci_bdwt(dx_in_rsci_bdwt),
      .dx_in_rsci_bcwt(dx_in_rsci_bcwt),
      .dx_in_rsci_irdy_run_sct(dx_in_rsci_irdy_run_sct),
      .dx_in_rsci_ivld(dx_in_rsci_ivld)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci_dx_in_wait_dp EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci_dx_in_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dx_in_rsci_oswt(dx_in_rsci_oswt),
      .dx_in_rsci_wen_comp(dx_in_rsci_wen_comp),
      .dx_in_rsci_idat_mxwt(dx_in_rsci_idat_mxwt),
      .dx_in_rsci_biwt(dx_in_rsci_biwt),
      .dx_in_rsci_bdwt(dx_in_rsci_bdwt),
      .dx_in_rsci_bcwt(dx_in_rsci_bcwt),
      .dx_in_rsci_idat(dx_in_rsci_idat)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng_run
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng_run (
  clk, rst, arst_n, dx_in_rsc_dat, dx_in_rsc_vld, dx_in_rsc_rdy, dy_in_rsc_dat, dy_in_rsc_vld,
      dy_in_rsc_rdy, widthIn_rsc_dat, widthIn_triosy_lz, heightIn_rsc_dat, heightIn_triosy_lz,
      magn_rsc_dat, magn_rsc_vld, magn_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [8:0] dx_in_rsc_dat;
  input dx_in_rsc_vld;
  output dx_in_rsc_rdy;
  input [8:0] dy_in_rsc_dat;
  input dy_in_rsc_vld;
  output dy_in_rsc_rdy;
  input [10:0] widthIn_rsc_dat;
  output widthIn_triosy_lz;
  input [9:0] heightIn_rsc_dat;
  output heightIn_triosy_lz;
  output [7:0] magn_rsc_dat;
  output magn_rsc_vld;
  input magn_rsc_rdy;


  // Interconnect Declarations
  wire run_wen;
  wire run_wten;
  wire dx_in_rsci_wen_comp;
  wire [8:0] dx_in_rsci_idat_mxwt;
  wire dy_in_rsci_wen_comp;
  wire [8:0] dy_in_rsci_idat_mxwt;
  wire [10:0] widthIn_rsci_idat;
  wire [9:0] heightIn_rsci_idat;
  wire magn_rsci_wen_comp;
  reg magn_rsci_idat_0;
  wire [3:0] fsm_output;
  wire MROW_equal_tmp;
  wire and_11_cse;
  reg MCOL_stage_0;
  reg reg_dy_in_rsci_oswt_cse;
  reg reg_magn_rsci_oswt_cse;
  reg reg_widthIn_triosy_obj_iswt0_cse;
  wire nand_cse;
  reg [10:0] MCOL_x_sva;
  wire [9:0] z_out;
  wire [10:0] nl_z_out;
  wire [10:0] z_out_1;
  wire [11:0] nl_z_out_1;
  reg [9:0] MROW_y_sva;
  wire [8:0] EdgeDetect_IP_EdgeDetect_MagAng_abs_return_1_sva_1;
  wire [9:0] nl_EdgeDetect_IP_EdgeDetect_MagAng_abs_return_1_sva_1;
  wire MROW_y_or_cse;
  wire operator_9_true_acc_itm_9;
  wire operator_9_true_1_acc_itm_9_1;

  wire[9:0] operator_9_true_acc_nl;
  wire[10:0] nl_operator_9_true_acc_nl;
  wire[10:0] MCOL_if_acc_nl;
  wire[11:0] nl_MCOL_if_acc_nl;
  wire[8:0] MCOL_if_acc_2_nl;
  wire[9:0] nl_MCOL_if_acc_2_nl;
  wire MCOL_if_EdgeDetect_IP_EdgeDetect_MagAng_abs_1_nand_nl;
  wire[6:0] EdgeDetect_IP_EdgeDetect_MagAng_abs_1_mux_5_nl;
  wire EdgeDetect_IP_EdgeDetect_MagAng_abs_1_mux_nl;
  wire MCOL_if_EdgeDetect_IP_EdgeDetect_MagAng_abs_nand_nl;
  wire[7:0] EdgeDetect_IP_EdgeDetect_MagAng_abs_mux_1_nl;
  wire MROW_y_not_1_nl;
  wire[10:0] MCOL_acc_1_nl;
  wire[11:0] nl_MCOL_acc_1_nl;
  wire not_nl;
  wire[9:0] operator_9_true_1_acc_nl;
  wire[10:0] nl_operator_9_true_1_acc_nl;
  wire[9:0] operator_9_true_mux_1_nl;
  wire operator_11_false_operator_11_false_and_1_nl;
  wire[9:0] operator_11_false_mux_2_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [7:0] nl_EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_inst_magn_rsci_idat;
  assign nl_EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_inst_magn_rsci_idat = {{7{magn_rsci_idat_0}},
      magn_rsci_idat_0};
  wire  nl_EdgeDetect_IP_EdgeDetect_MagAng_run_run_fsm_inst_MCOL_C_0_tr0;
  assign nl_EdgeDetect_IP_EdgeDetect_MagAng_run_run_fsm_inst_MCOL_C_0_tr0 = ~ MCOL_stage_0;
  ccs_in_v1 #(.rscid(32'sd3),
  .width(32'sd11)) widthIn_rsci (
      .dat(widthIn_rsc_dat),
      .idat(widthIn_rsci_idat)
    );
  ccs_in_v1 #(.rscid(32'sd4),
  .width(32'sd10)) heightIn_rsci (
      .dat(heightIn_rsc_dat),
      .idat(heightIn_rsci_idat)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci EdgeDetect_IP_EdgeDetect_MagAng_run_dx_in_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dx_in_rsc_dat(dx_in_rsc_dat),
      .dx_in_rsc_vld(dx_in_rsc_vld),
      .dx_in_rsc_rdy(dx_in_rsc_rdy),
      .run_wen(run_wen),
      .dx_in_rsci_oswt(reg_dy_in_rsci_oswt_cse),
      .dx_in_rsci_wen_comp(dx_in_rsci_wen_comp),
      .dx_in_rsci_idat_mxwt(dx_in_rsci_idat_mxwt)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci EdgeDetect_IP_EdgeDetect_MagAng_run_dy_in_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dy_in_rsc_dat(dy_in_rsc_dat),
      .dy_in_rsc_vld(dy_in_rsc_vld),
      .dy_in_rsc_rdy(dy_in_rsc_rdy),
      .run_wen(run_wen),
      .dy_in_rsci_oswt(reg_dy_in_rsci_oswt_cse),
      .dy_in_rsci_wen_comp(dy_in_rsci_wen_comp),
      .dy_in_rsci_idat_mxwt(dy_in_rsci_idat_mxwt)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .magn_rsc_dat(magn_rsc_dat),
      .magn_rsc_vld(magn_rsc_vld),
      .magn_rsc_rdy(magn_rsc_rdy),
      .run_wen(run_wen),
      .magn_rsci_oswt(reg_magn_rsci_oswt_cse),
      .magn_rsci_wen_comp(magn_rsci_wen_comp),
      .magn_rsci_idat(nl_EdgeDetect_IP_EdgeDetect_MagAng_run_magn_rsci_inst_magn_rsci_idat[7:0])
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_widthIn_triosy_obj EdgeDetect_IP_EdgeDetect_MagAng_run_widthIn_triosy_obj_inst
      (
      .widthIn_triosy_lz(widthIn_triosy_lz),
      .run_wten(run_wten),
      .widthIn_triosy_obj_iswt0(reg_widthIn_triosy_obj_iswt0_cse)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_heightIn_triosy_obj EdgeDetect_IP_EdgeDetect_MagAng_run_heightIn_triosy_obj_inst
      (
      .heightIn_triosy_lz(heightIn_triosy_lz),
      .run_wten(run_wten),
      .heightIn_triosy_obj_iswt0(reg_widthIn_triosy_obj_iswt0_cse)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_staller EdgeDetect_IP_EdgeDetect_MagAng_run_staller_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .run_wten(run_wten),
      .dx_in_rsci_wen_comp(dx_in_rsci_wen_comp),
      .dy_in_rsci_wen_comp(dy_in_rsci_wen_comp),
      .magn_rsci_wen_comp(magn_rsci_wen_comp)
    );
  EdgeDetect_IP_EdgeDetect_MagAng_run_run_fsm EdgeDetect_IP_EdgeDetect_MagAng_run_run_fsm_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .MCOL_C_0_tr0(nl_EdgeDetect_IP_EdgeDetect_MagAng_run_run_fsm_inst_MCOL_C_0_tr0),
      .MROW_C_0_tr0(MROW_equal_tmp)
    );
  assign nl_operator_9_true_acc_nl =  -conv_s2s_9_10(dx_in_rsci_idat_mxwt);
  assign operator_9_true_acc_nl = nl_operator_9_true_acc_nl[9:0];
  assign operator_9_true_acc_itm_9 = readslicef_10_1_9(operator_9_true_acc_nl);
  assign MROW_y_or_cse = (fsm_output[0]) | (fsm_output[2]);
  assign nand_cse = ~(MCOL_stage_0 & (MCOL_x_sva == z_out_1));
  assign nl_EdgeDetect_IP_EdgeDetect_MagAng_abs_return_1_sva_1 =  -dy_in_rsci_idat_mxwt;
  assign EdgeDetect_IP_EdgeDetect_MagAng_abs_return_1_sva_1 = nl_EdgeDetect_IP_EdgeDetect_MagAng_abs_return_1_sva_1[8:0];
  assign MROW_equal_tmp = MROW_y_sva == (z_out_1[9:0]);
  assign nl_operator_9_true_1_acc_nl =  -conv_s2s_9_10(dy_in_rsci_idat_mxwt);
  assign operator_9_true_1_acc_nl = nl_operator_9_true_1_acc_nl[9:0];
  assign operator_9_true_1_acc_itm_9_1 = readslicef_10_1_9(operator_9_true_1_acc_nl);
  assign and_11_cse = MROW_equal_tmp & (fsm_output[2]);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_dy_in_rsci_oswt_cse <= 1'b0;
      MCOL_stage_0 <= 1'b0;
      reg_magn_rsci_oswt_cse <= 1'b0;
      reg_widthIn_triosy_obj_iswt0_cse <= 1'b0;
    end
    else if ( rst ) begin
      reg_dy_in_rsci_oswt_cse <= 1'b0;
      MCOL_stage_0 <= 1'b0;
      reg_magn_rsci_oswt_cse <= 1'b0;
      reg_widthIn_triosy_obj_iswt0_cse <= 1'b0;
    end
    else if ( run_wen ) begin
      reg_dy_in_rsci_oswt_cse <= ~((fsm_output[3]) | ((~(nand_cse & MCOL_stage_0))
          & (fsm_output[1])) | and_11_cse);
      MCOL_stage_0 <= (MCOL_stage_0 & nand_cse) | MROW_y_or_cse;
      reg_magn_rsci_oswt_cse <= MCOL_stage_0 & (fsm_output[1]);
      reg_widthIn_triosy_obj_iswt0_cse <= and_11_cse;
    end
  end
  always @(posedge clk) begin
    if ( run_wen & (fsm_output[1]) & MCOL_stage_0 ) begin
      magn_rsci_idat_0 <= ~ (readslicef_11_1_10(MCOL_if_acc_nl));
    end
  end
  always @(posedge clk) begin
    if ( run_wen & MROW_y_or_cse ) begin
      MROW_y_sva <= MUX_v_10_2_2(10'b0000000000, z_out, MROW_y_not_1_nl);
    end
  end
  always @(posedge clk) begin
    if ( run_wen & (MCOL_stage_0 | MROW_y_or_cse) ) begin
      MCOL_x_sva <= MUX_v_11_2_2(11'b00000000000, MCOL_acc_1_nl, not_nl);
    end
  end
  assign MCOL_if_EdgeDetect_IP_EdgeDetect_MagAng_abs_1_nand_nl = ~((EdgeDetect_IP_EdgeDetect_MagAng_abs_return_1_sva_1[8])
      & (~ operator_9_true_1_acc_itm_9_1));
  assign EdgeDetect_IP_EdgeDetect_MagAng_abs_1_mux_5_nl = MUX_v_7_2_2((EdgeDetect_IP_EdgeDetect_MagAng_abs_return_1_sva_1[7:1]),
      (dy_in_rsci_idat_mxwt[7:1]), operator_9_true_1_acc_itm_9_1);
  assign nl_MCOL_if_acc_2_nl = conv_s2s_8_9({MCOL_if_EdgeDetect_IP_EdgeDetect_MagAng_abs_1_nand_nl
      , (~ EdgeDetect_IP_EdgeDetect_MagAng_abs_1_mux_5_nl)}) + 9'b000110011;
  assign MCOL_if_acc_2_nl = nl_MCOL_if_acc_2_nl[8:0];
  assign EdgeDetect_IP_EdgeDetect_MagAng_abs_1_mux_nl = MUX_s_1_2_2((EdgeDetect_IP_EdgeDetect_MagAng_abs_return_1_sva_1[0]),
      (dy_in_rsci_idat_mxwt[0]), operator_9_true_1_acc_itm_9_1);
  assign MCOL_if_EdgeDetect_IP_EdgeDetect_MagAng_abs_nand_nl = ~((z_out[8]) & (~
      operator_9_true_acc_itm_9));
  assign EdgeDetect_IP_EdgeDetect_MagAng_abs_mux_1_nl = MUX_v_8_2_2((z_out[7:0]),
      (dx_in_rsci_idat_mxwt[7:0]), operator_9_true_acc_itm_9);
  assign nl_MCOL_if_acc_nl = conv_s2s_10_11({MCOL_if_acc_2_nl , (~ EdgeDetect_IP_EdgeDetect_MagAng_abs_1_mux_nl)})
      + conv_s2s_9_11({MCOL_if_EdgeDetect_IP_EdgeDetect_MagAng_abs_nand_nl , (~ EdgeDetect_IP_EdgeDetect_MagAng_abs_mux_1_nl)});
  assign MCOL_if_acc_nl = nl_MCOL_if_acc_nl[10:0];
  assign MROW_y_not_1_nl = ~ (fsm_output[0]);
  assign nl_MCOL_acc_1_nl = MCOL_x_sva + 11'b00000000001;
  assign MCOL_acc_1_nl = nl_MCOL_acc_1_nl[10:0];
  assign not_nl = ~ MROW_y_or_cse;
  assign operator_9_true_mux_1_nl = MUX_v_10_2_2((signext_10_9(~ dx_in_rsci_idat_mxwt)),
      MROW_y_sva, fsm_output[2]);
  assign nl_z_out = operator_9_true_mux_1_nl + 10'b0000000001;
  assign z_out = nl_z_out[9:0];
  assign operator_11_false_operator_11_false_and_1_nl = (widthIn_rsci_idat[10]) &
      (~ (fsm_output[2]));
  assign operator_11_false_mux_2_nl = MUX_v_10_2_2((widthIn_rsci_idat[9:0]), heightIn_rsci_idat,
      fsm_output[2]);
  assign nl_z_out_1 = ({operator_11_false_operator_11_false_and_1_nl , operator_11_false_mux_2_nl})
      + 11'b11111111111;
  assign z_out_1 = nl_z_out_1[10:0];

  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input  sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input  sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [6:0] MUX_v_7_2_2;
    input [6:0] input_0;
    input [6:0] input_1;
    input  sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function automatic [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function automatic [9:0] signext_10_9;
    input [8:0] vector;
  begin
    signext_10_9= {{1{vector[8]}}, vector};
  end
  endfunction


  function automatic [8:0] conv_s2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_s2s_8_9 = {vector[7], vector};
  end
  endfunction


  function automatic [9:0] conv_s2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_s2s_9_10 = {vector[8], vector};
  end
  endfunction


  function automatic [10:0] conv_s2s_9_11 ;
    input [8:0]  vector ;
  begin
    conv_s2s_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function automatic [10:0] conv_s2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_s2s_10_11 = {vector[9], vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_MagAng
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_MagAng (
  clk, rst, arst_n, dx_in_rsc_dat, dx_in_rsc_vld, dx_in_rsc_rdy, dy_in_rsc_dat, dy_in_rsc_vld,
      dy_in_rsc_rdy, widthIn_rsc_dat, widthIn_triosy_lz, heightIn_rsc_dat, heightIn_triosy_lz,
      magn_rsc_dat, magn_rsc_vld, magn_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [8:0] dx_in_rsc_dat;
  input dx_in_rsc_vld;
  output dx_in_rsc_rdy;
  input [8:0] dy_in_rsc_dat;
  input dy_in_rsc_vld;
  output dy_in_rsc_rdy;
  input [10:0] widthIn_rsc_dat;
  output widthIn_triosy_lz;
  input [9:0] heightIn_rsc_dat;
  output heightIn_triosy_lz;
  output [7:0] magn_rsc_dat;
  output magn_rsc_vld;
  input magn_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  EdgeDetect_IP_EdgeDetect_MagAng_run EdgeDetect_IP_EdgeDetect_MagAng_run_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dx_in_rsc_dat(dx_in_rsc_dat),
      .dx_in_rsc_vld(dx_in_rsc_vld),
      .dx_in_rsc_rdy(dx_in_rsc_rdy),
      .dy_in_rsc_dat(dy_in_rsc_dat),
      .dy_in_rsc_vld(dy_in_rsc_vld),
      .dy_in_rsc_rdy(dy_in_rsc_rdy),
      .widthIn_rsc_dat(widthIn_rsc_dat),
      .widthIn_triosy_lz(widthIn_triosy_lz),
      .heightIn_rsc_dat(heightIn_rsc_dat),
      .heightIn_triosy_lz(heightIn_triosy_lz),
      .magn_rsc_dat(magn_rsc_dat),
      .magn_rsc_vld(magn_rsc_vld),
      .magn_rsc_rdy(magn_rsc_rdy)
    );
endmodule




//------> /usr/mentor/Catapult/2023.2/Mgc_home/pkgs/siflibs/ccs_in_wait_coupled_v1.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------


module ccs_in_wait_coupled_v1 (idat, rdy, ivld, dat, irdy, vld);

  parameter integer rscid = 1;
  parameter integer width = 8;

  output [width-1:0] idat;
  output             rdy;
  output             ivld;
  input  [width-1:0] dat;
  input              irdy;
  input              vld;

  wire   [width-1:0] idat;
  wire               rdy;
  wire               ivld;

  assign idat = dat;
  assign rdy = irdy;
  assign ivld = vld;

endmodule


//------> ../EdgeDetect_IP_EdgeDetect_HorDer.v1/rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r2k41022@cad16
//  Generated date: Thu Jun 13 14:08:54 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm (
  clk, rst, arst_n, run_wen, fsm_output, HCOL_C_0_tr0, HROW_C_0_tr0
);
  input clk;
  input rst;
  input arst_n;
  input run_wen;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;
  input HCOL_C_0_tr0;
  input HROW_C_0_tr0;


  // FSM State Type Declaration for EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_1
  parameter
    main_C_0 = 2'd0,
    HCOL_C_0 = 2'd1,
    HROW_C_0 = 2'd2,
    main_C_1 = 2'd3;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_1
    case (state_var)
      HCOL_C_0 : begin
        fsm_output = 4'b0010;
        if ( HCOL_C_0_tr0 ) begin
          state_var_NS = HROW_C_0;
        end
        else begin
          state_var_NS = HCOL_C_0;
        end
      end
      HROW_C_0 : begin
        fsm_output = 4'b0100;
        if ( HROW_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = HCOL_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 4'b1000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 4'b0001;
        state_var_NS = HCOL_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= main_C_0;
    end
    else if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_staller
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_staller (
  run_wen, dat_in_rsci_wen_comp, dx_rsci_wen_comp
);
  output run_wen;
  input dat_in_rsci_wen_comp;
  input dx_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = dat_in_rsci_wen_comp & dx_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci_dx_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci_dx_wait_dp (
  clk, rst, arst_n, dx_rsci_oswt, dx_rsci_wen_comp, dx_rsci_biwt, dx_rsci_bdwt, dx_rsci_bcwt
);
  input clk;
  input rst;
  input arst_n;
  input dx_rsci_oswt;
  output dx_rsci_wen_comp;
  input dx_rsci_biwt;
  input dx_rsci_bdwt;
  output dx_rsci_bcwt;
  reg dx_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dx_rsci_wen_comp = (~ dx_rsci_oswt) | dx_rsci_biwt | dx_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dx_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      dx_rsci_bcwt <= 1'b0;
    end
    else begin
      dx_rsci_bcwt <= ~((~(dx_rsci_bcwt | dx_rsci_biwt)) | dx_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci_dx_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci_dx_wait_ctrl (
  run_wen, dx_rsci_oswt, dx_rsci_biwt, dx_rsci_bdwt, dx_rsci_bcwt, dx_rsci_irdy,
      dx_rsci_ivld_run_sct
);
  input run_wen;
  input dx_rsci_oswt;
  output dx_rsci_biwt;
  output dx_rsci_bdwt;
  input dx_rsci_bcwt;
  input dx_rsci_irdy;
  output dx_rsci_ivld_run_sct;


  // Interconnect Declarations
  wire dx_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dx_rsci_bdwt = dx_rsci_oswt & run_wen;
  assign dx_rsci_biwt = dx_rsci_ogwt & dx_rsci_irdy;
  assign dx_rsci_ogwt = dx_rsci_oswt & (~ dx_rsci_bcwt);
  assign dx_rsci_ivld_run_sct = dx_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_dat_in_rsci_dat_in_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_dat_in_rsci_dat_in_wait_ctrl (
  run_wen, dat_in_rsci_iswt0, dat_in_rsci_irdy_run_sct
);
  input run_wen;
  input dat_in_rsci_iswt0;
  output dat_in_rsci_irdy_run_sct;



  // Interconnect Declarations for Component Instantiations 
  assign dat_in_rsci_irdy_run_sct = dat_in_rsci_iswt0 & run_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci (
  clk, rst, arst_n, dx_rsc_dat, dx_rsc_vld, dx_rsc_rdy, run_wen, dx_rsci_oswt, dx_rsci_wen_comp,
      dx_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  output [8:0] dx_rsc_dat;
  output dx_rsc_vld;
  input dx_rsc_rdy;
  input run_wen;
  input dx_rsci_oswt;
  output dx_rsci_wen_comp;
  input [8:0] dx_rsci_idat;


  // Interconnect Declarations
  wire dx_rsci_biwt;
  wire dx_rsci_bdwt;
  wire dx_rsci_bcwt;
  wire dx_rsci_irdy;
  wire dx_rsci_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd4),
  .width(32'sd9)) dx_rsci (
      .irdy(dx_rsci_irdy),
      .ivld(dx_rsci_ivld_run_sct),
      .idat(dx_rsci_idat),
      .rdy(dx_rsc_rdy),
      .vld(dx_rsc_vld),
      .dat(dx_rsc_dat)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci_dx_wait_ctrl EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci_dx_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dx_rsci_oswt(dx_rsci_oswt),
      .dx_rsci_biwt(dx_rsci_biwt),
      .dx_rsci_bdwt(dx_rsci_bdwt),
      .dx_rsci_bcwt(dx_rsci_bcwt),
      .dx_rsci_irdy(dx_rsci_irdy),
      .dx_rsci_ivld_run_sct(dx_rsci_ivld_run_sct)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci_dx_wait_dp EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci_dx_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dx_rsci_oswt(dx_rsci_oswt),
      .dx_rsci_wen_comp(dx_rsci_wen_comp),
      .dx_rsci_biwt(dx_rsci_biwt),
      .dx_rsci_bdwt(dx_rsci_bdwt),
      .dx_rsci_bcwt(dx_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run_dat_in_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run_dat_in_rsci (
  dat_in_rsc_dat, dat_in_rsc_vld, dat_in_rsc_rdy, run_wen, dat_in_rsci_oswt, dat_in_rsci_wen_comp,
      dat_in_rsci_idat_mxwt
);
  input [7:0] dat_in_rsc_dat;
  input dat_in_rsc_vld;
  output dat_in_rsc_rdy;
  input run_wen;
  input dat_in_rsci_oswt;
  output dat_in_rsci_wen_comp;
  output [7:0] dat_in_rsci_idat_mxwt;


  // Interconnect Declarations
  wire dat_in_rsci_irdy_run_sct;
  wire dat_in_rsci_ivld;
  wire [7:0] dat_in_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_coupled_v1 #(.rscid(32'sd1),
  .width(32'sd8)) dat_in_rsci (
      .rdy(dat_in_rsc_rdy),
      .vld(dat_in_rsc_vld),
      .dat(dat_in_rsc_dat),
      .irdy(dat_in_rsci_irdy_run_sct),
      .ivld(dat_in_rsci_ivld),
      .idat(dat_in_rsci_idat)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_dat_in_rsci_dat_in_wait_ctrl EdgeDetect_IP_EdgeDetect_HorDer_run_dat_in_rsci_dat_in_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dat_in_rsci_iswt0(dat_in_rsci_oswt),
      .dat_in_rsci_irdy_run_sct(dat_in_rsci_irdy_run_sct)
    );
  assign dat_in_rsci_idat_mxwt = dat_in_rsci_idat;
  assign dat_in_rsci_wen_comp = (~ dat_in_rsci_oswt) | dat_in_rsci_ivld;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer_run
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer_run (
  clk, rst, arst_n, dat_in_rsc_dat, dat_in_rsc_vld, dat_in_rsc_rdy, widthIn, heightIn,
      dx_rsc_dat, dx_rsc_vld, dx_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [7:0] dat_in_rsc_dat;
  input dat_in_rsc_vld;
  output dat_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [8:0] dx_rsc_dat;
  output dx_rsc_vld;
  input dx_rsc_rdy;


  // Interconnect Declarations
  wire run_wen;
  wire dat_in_rsci_wen_comp;
  wire [7:0] dat_in_rsci_idat_mxwt;
  wire dx_rsci_wen_comp;
  reg [8:0] dx_rsci_idat;
  wire [3:0] fsm_output;
  wire HCOL_equal_tmp;
  wire HCOL_nor_1_tmp;
  wire and_dcpl_17;
  reg HCOL_stage_0_2;
  reg HCOL_stage_0_1;
  reg [10:0] HCOL_x_sva;
  reg [10:0] HCOL_asn_1_itm_1;
  reg HCOL_if_slc_HCOL_acc_11_svs_1;
  reg reg_dat_in_rsci_oswt_cse;
  reg reg_dx_rsci_oswt_cse;
  wire [10:0] HCOL_x_mux_2_cse;
  wire nand_cse;
  wire HCOL_HCOL_and_cse;
  wire [9:0] z_out;
  wire [10:0] z_out_1;
  wire [11:0] nl_z_out_1;
  reg [9:0] HROW_y_sva;
  reg [7:0] pix0_lpi_3;
  reg [7:0] pix_buf1_lpi_3;
  reg [7:0] pix_buf0_lpi_3;
  reg HCOL_nor_1_itm_1;
  wire HROW_y_or_cse;
  wire operator_11_false_acc_itm_11_1;
  wire HCOL_HCOL_nand_tmp;

  wire not_36_nl;
  wire HROW_y_not_1_nl;
  wire pix0_not_2_nl;
  wire mux_2_nl;
  wire nor_1_nl;
  wire mux_5_nl;
  wire or_nl;
  wire nor_4_nl;
  wire pix_buf0_and_1_nl;
  wire[11:0] operator_11_false_acc_nl;
  wire[12:0] nl_operator_11_false_acc_nl;
  wire[10:0] acc_nl;
  wire[11:0] nl_acc_nl;
  wire[1:0] operator_8_false_2_operator_8_false_2_or_1_nl;
  wire operator_8_false_2_not_4_nl;
  wire[7:0] operator_8_false_2_operator_8_false_2_mux1h_1_nl;
  wire operator_8_false_2_operator_8_false_2_nor_1_nl;
  wire operator_8_false_2_and_2_nl;
  wire operator_8_false_2_or_1_nl;
  wire[7:0] operator_8_false_2_operator_8_false_2_nand_1_nl;
  wire[7:0] pix0_mux_1_nl;
  wire operator_8_false_2_not_6_nl;
  wire HROW_HROW_and_1_nl;
  wire[9:0] HROW_mux_2_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst_HCOL_C_0_tr0;
  assign nl_EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst_HCOL_C_0_tr0 = ~(HCOL_stage_0_2
      | HCOL_stage_0_1);
  wire  nl_EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst_HROW_C_0_tr0;
  assign nl_EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst_HROW_C_0_tr0 = HROW_y_sva
      == (z_out);
  EdgeDetect_IP_EdgeDetect_HorDer_run_dat_in_rsci EdgeDetect_IP_EdgeDetect_HorDer_run_dat_in_rsci_inst
      (
      .dat_in_rsc_dat(dat_in_rsc_dat),
      .dat_in_rsc_vld(dat_in_rsc_vld),
      .dat_in_rsc_rdy(dat_in_rsc_rdy),
      .run_wen(run_wen),
      .dat_in_rsci_oswt(reg_dat_in_rsci_oswt_cse),
      .dat_in_rsci_wen_comp(dat_in_rsci_wen_comp),
      .dat_in_rsci_idat_mxwt(dat_in_rsci_idat_mxwt)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci EdgeDetect_IP_EdgeDetect_HorDer_run_dx_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dx_rsc_dat(dx_rsc_dat),
      .dx_rsc_vld(dx_rsc_vld),
      .dx_rsc_rdy(dx_rsc_rdy),
      .run_wen(run_wen),
      .dx_rsci_oswt(reg_dx_rsci_oswt_cse),
      .dx_rsci_wen_comp(dx_rsci_wen_comp),
      .dx_rsci_idat(dx_rsci_idat)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_staller EdgeDetect_IP_EdgeDetect_HorDer_run_staller_inst
      (
      .run_wen(run_wen),
      .dat_in_rsci_wen_comp(dat_in_rsci_wen_comp),
      .dx_rsci_wen_comp(dx_rsci_wen_comp)
    );
  EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .HCOL_C_0_tr0(nl_EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst_HCOL_C_0_tr0),
      .HROW_C_0_tr0(nl_EdgeDetect_IP_EdgeDetect_HorDer_run_run_fsm_inst_HROW_C_0_tr0)
    );
  assign HROW_y_or_cse = (fsm_output[0]) | (fsm_output[2]);
  assign HCOL_x_mux_2_cse = MUX_v_11_2_2(HCOL_x_sva, z_out_1, HCOL_stage_0_2);
  assign HCOL_HCOL_and_cse = HCOL_stage_0_1 & nand_cse;
  assign HCOL_nor_1_tmp = ~((HCOL_x_mux_2_cse[10:1]!=10'b0000000000));
  assign nl_operator_11_false_acc_nl = ({1'b1 , widthIn}) + conv_u2s_11_12(~ HCOL_x_mux_2_cse);
  assign operator_11_false_acc_nl = nl_operator_11_false_acc_nl[11:0];
  assign operator_11_false_acc_itm_11_1 = readslicef_12_1_11(operator_11_false_acc_nl);
  assign HCOL_equal_tmp = HCOL_x_sva == widthIn;
  assign nand_cse = ~(HCOL_equal_tmp & HCOL_stage_0_2);
  assign and_dcpl_17 = ~(HCOL_if_slc_HCOL_acc_11_svs_1 | HCOL_equal_tmp);
  assign HCOL_HCOL_nand_tmp = ~((HCOL_x_sva[0]) & HCOL_nor_1_itm_1);
  always @(posedge clk) begin
    if ( run_wen & (fsm_output[1]) & (~((HCOL_asn_1_itm_1==11'b00000000000))) & HCOL_stage_0_2
        ) begin
      dx_rsci_idat <= z_out[8:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      HCOL_x_sva <= 11'b00000000000;
    end
    else if ( rst ) begin
      HCOL_x_sva <= 11'b00000000000;
    end
    else if ( (HCOL_stage_0_2 | (fsm_output[2]) | (fsm_output[0])) & run_wen ) begin
      HCOL_x_sva <= MUX_v_11_2_2(11'b00000000000, HCOL_x_mux_2_cse, not_36_nl);
    end
  end
  always @(posedge clk) begin
    if ( run_wen & HROW_y_or_cse ) begin
      HROW_y_sva <= MUX_v_10_2_2(10'b0000000000, (z_out_1[9:0]), HROW_y_not_1_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      HCOL_stage_0_1 <= 1'b0;
      HCOL_asn_1_itm_1 <= 11'b00000000000;
      HCOL_stage_0_2 <= 1'b0;
      reg_dat_in_rsci_oswt_cse <= 1'b0;
      reg_dx_rsci_oswt_cse <= 1'b0;
    end
    else if ( rst ) begin
      HCOL_stage_0_1 <= 1'b0;
      HCOL_asn_1_itm_1 <= 11'b00000000000;
      HCOL_stage_0_2 <= 1'b0;
      reg_dat_in_rsci_oswt_cse <= 1'b0;
      reg_dx_rsci_oswt_cse <= 1'b0;
    end
    else if ( run_wen ) begin
      HCOL_stage_0_1 <= HCOL_HCOL_and_cse | HROW_y_or_cse;
      HCOL_asn_1_itm_1 <= HCOL_x_mux_2_cse;
      HCOL_stage_0_2 <= HCOL_HCOL_and_cse & (~ HROW_y_or_cse);
      reg_dat_in_rsci_oswt_cse <= nand_cse & (~ operator_11_false_acc_itm_11_1) &
          HCOL_stage_0_1 & (fsm_output[1]);
      reg_dx_rsci_oswt_cse <= ((HCOL_asn_1_itm_1!=11'b00000000000)) & HCOL_stage_0_2
          & (fsm_output[1]);
    end
  end
  always @(posedge clk) begin
    if ( run_wen & ((fsm_output[0]) | (and_dcpl_17 & HCOL_stage_0_2 & (fsm_output[1])))
        ) begin
      pix0_lpi_3 <= MUX_v_8_2_2(8'b00000000, dat_in_rsci_idat_mxwt, pix0_not_2_nl);
    end
  end
  always @(posedge clk) begin
    if ( run_wen & (~(HCOL_equal_tmp | mux_2_nl)) & HCOL_stage_0_1 & HCOL_stage_0_2
        ) begin
      pix_buf1_lpi_3 <= pix_buf0_lpi_3;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      HCOL_nor_1_itm_1 <= 1'b0;
    end
    else if ( rst ) begin
      HCOL_nor_1_itm_1 <= 1'b0;
    end
    else if ( run_wen & mux_5_nl & HCOL_stage_0_1 ) begin
      HCOL_nor_1_itm_1 <= HCOL_nor_1_tmp;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      HCOL_if_slc_HCOL_acc_11_svs_1 <= 1'b0;
    end
    else if ( rst ) begin
      HCOL_if_slc_HCOL_acc_11_svs_1 <= 1'b0;
    end
    else if ( run_wen & HCOL_HCOL_and_cse ) begin
      HCOL_if_slc_HCOL_acc_11_svs_1 <= operator_11_false_acc_itm_11_1;
    end
  end
  always @(posedge clk) begin
    if ( run_wen & (HCOL_stage_0_2 | HROW_y_or_cse) ) begin
      pix_buf0_lpi_3 <= MUX_v_8_2_2(pix0_lpi_3, dat_in_rsci_idat_mxwt, pix_buf0_and_1_nl);
    end
  end
  assign not_36_nl = ~ HROW_y_or_cse;
  assign HROW_y_not_1_nl = ~ (fsm_output[0]);
  assign pix0_not_2_nl = ~ (fsm_output[0]);
  assign nor_1_nl = ~((z_out_1[10:1]!=10'b0000000000));
  assign mux_2_nl = MUX_s_1_2_2(nor_1_nl, HCOL_nor_1_tmp, z_out_1[0]);
  assign or_nl = (HCOL_x_sva!=11'b00000000000);
  assign nor_4_nl = ~((~((z_out_1!=11'b00000000000))) | HCOL_equal_tmp);
  assign mux_5_nl = MUX_s_1_2_2(or_nl, nor_4_nl, HCOL_stage_0_2);
  assign pix_buf0_and_1_nl = (~ HCOL_if_slc_HCOL_acc_11_svs_1) & HCOL_stage_0_2 &
      (~ HROW_y_or_cse);
  assign operator_8_false_2_not_4_nl = ~ (fsm_output[2]);
  assign operator_8_false_2_operator_8_false_2_or_1_nl = MUX_v_2_2_2((heightIn[9:8]),
      2'b11, operator_8_false_2_not_4_nl);
  assign operator_8_false_2_operator_8_false_2_nor_1_nl = ~(HCOL_HCOL_nand_tmp |
      (fsm_output[2]));
  assign operator_8_false_2_and_2_nl = HCOL_HCOL_nand_tmp & (~ (fsm_output[2]));
  assign operator_8_false_2_operator_8_false_2_mux1h_1_nl = MUX1HOT_v_8_3_2(pix0_lpi_3,
      pix_buf1_lpi_3, (heightIn[7:0]), {operator_8_false_2_operator_8_false_2_nor_1_nl
      , operator_8_false_2_and_2_nl , (fsm_output[2])});
  assign operator_8_false_2_or_1_nl = (fsm_output[2:1]!=2'b10);
  assign pix0_mux_1_nl = MUX_v_8_2_2(pix0_lpi_3, dat_in_rsci_idat_mxwt, and_dcpl_17);
  assign operator_8_false_2_not_6_nl = ~ (fsm_output[2]);
  assign operator_8_false_2_operator_8_false_2_nand_1_nl = ~(MUX_v_8_2_2(8'b00000000,
      pix0_mux_1_nl, operator_8_false_2_not_6_nl));
  assign nl_acc_nl = ({operator_8_false_2_operator_8_false_2_or_1_nl , operator_8_false_2_operator_8_false_2_mux1h_1_nl
      , operator_8_false_2_or_1_nl}) + conv_s2u_10_11({(fsm_output[2]) , operator_8_false_2_operator_8_false_2_nand_1_nl
      , 1'b1});
  assign acc_nl = nl_acc_nl[10:0];
  assign z_out = readslicef_11_10_1(acc_nl);
  assign HROW_HROW_and_1_nl = (HCOL_x_sva[10]) & (fsm_output[1]);
  assign HROW_mux_2_nl = MUX_v_10_2_2(HROW_y_sva, (HCOL_x_sva[9:0]), fsm_output[1]);
  assign nl_z_out_1 = ({HROW_HROW_and_1_nl , HROW_mux_2_nl}) + 11'b00000000001;
  assign z_out_1 = nl_z_out_1[10:0];

  function automatic [7:0] MUX1HOT_v_8_3_2;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [2:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | (input_1 & {8{sel[1]}});
    result = result | (input_2 & {8{sel[2]}});
    MUX1HOT_v_8_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input  sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input  sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [1:0] MUX_v_2_2_2;
    input [1:0] input_0;
    input [1:0] input_1;
    input  sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function automatic [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function automatic [10:0] conv_s2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_s2u_10_11 = {vector[9], vector};
  end
  endfunction


  function automatic [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_HorDer
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_HorDer (
  clk, rst, arst_n, dat_in_rsc_dat, dat_in_rsc_vld, dat_in_rsc_rdy, widthIn, heightIn,
      dx_rsc_dat, dx_rsc_vld, dx_rsc_rdy
);
  input clk;
  input rst;
  input arst_n;
  input [7:0] dat_in_rsc_dat;
  input dat_in_rsc_vld;
  output dat_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [8:0] dx_rsc_dat;
  output dx_rsc_vld;
  input dx_rsc_rdy;



  // Interconnect Declarations for Component Instantiations 
  EdgeDetect_IP_EdgeDetect_HorDer_run EdgeDetect_IP_EdgeDetect_HorDer_run_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dat_in_rsc_dat(dat_in_rsc_dat),
      .dat_in_rsc_vld(dat_in_rsc_vld),
      .dat_in_rsc_rdy(dat_in_rsc_rdy),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .dx_rsc_dat(dx_rsc_dat),
      .dx_rsc_vld(dx_rsc_vld),
      .dx_rsc_rdy(dx_rsc_rdy)
    );
endmodule




//------> ../EdgeDetect_IP_EdgeDetect_VerDer.v1/rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r2k41022@cad16
//  Generated date: Thu Jun 13 14:08:27 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_12_12_10_963_963_12_5_gen
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_12_12_10_963_963_12_5_gen
    (
  en, q, we, d, adr, adr_d, d_d, en_d, we_d, q_d, port_0_rw_ram_ir_internal_RMASK_B_d,
      port_0_rw_ram_ir_internal_WMASK_B_d
);
  output en;
  input [11:0] q;
  output we;
  output [11:0] d;
  output [9:0] adr;
  input [9:0] adr_d;
  input [11:0] d_d;
  input en_d;
  input we_d;
  output [11:0] q_d;
  input port_0_rw_ram_ir_internal_RMASK_B_d;
  input port_0_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = (en_d);
  assign q_d = q;
  assign we = (port_0_rw_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign adr = (adr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_11_12_10_963_963_12_5_gen
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_11_12_10_963_963_12_5_gen
    (
  en, q, we, d, adr, adr_d, d_d, en_d, we_d, q_d, port_0_rw_ram_ir_internal_RMASK_B_d,
      port_0_rw_ram_ir_internal_WMASK_B_d
);
  output en;
  input [11:0] q;
  output we;
  output [11:0] d;
  output [9:0] adr;
  input [9:0] adr_d;
  input [11:0] d_d;
  input en_d;
  input we_d;
  output [11:0] q_d;
  input port_0_rw_ram_ir_internal_RMASK_B_d;
  input port_0_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = (en_d);
  assign q_d = q;
  assign we = (port_0_rw_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign adr = (adr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_10_12_10_963_963_12_5_gen
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_10_12_10_963_963_12_5_gen
    (
  en, q, we, d, adr, adr_d, d_d, en_d, we_d, q_d, port_0_rw_ram_ir_internal_RMASK_B_d,
      port_0_rw_ram_ir_internal_WMASK_B_d
);
  output en;
  input [11:0] q;
  output we;
  output [11:0] d;
  output [9:0] adr;
  input [9:0] adr_d;
  input [11:0] d_d;
  input en_d;
  input we_d;
  output [11:0] q_d;
  input port_0_rw_ram_ir_internal_RMASK_B_d;
  input port_0_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = (en_d);
  assign q_d = q;
  assign we = (port_0_rw_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign adr = (adr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_9_16_10_963_963_16_5_gen
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_9_16_10_963_963_16_5_gen
    (
  en, q, we, d, adr, adr_d, d_d, en_d, we_d, q_d, port_0_rw_ram_ir_internal_RMASK_B_d,
      port_0_rw_ram_ir_internal_WMASK_B_d
);
  output en;
  input [15:0] q;
  output we;
  output [15:0] d;
  output [9:0] adr;
  input [9:0] adr_d;
  input [15:0] d_d;
  input en_d;
  input we_d;
  output [15:0] q_d;
  input port_0_rw_ram_ir_internal_RMASK_B_d;
  input port_0_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = (en_d);
  assign q_d = q;
  assign we = (port_0_rw_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign adr = (adr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_8_16_10_963_963_16_5_gen
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_8_16_10_963_963_16_5_gen
    (
  en, q, we, d, adr, adr_d, d_d, en_d, we_d, q_d, port_0_rw_ram_ir_internal_RMASK_B_d,
      port_0_rw_ram_ir_internal_WMASK_B_d
);
  output en;
  input [15:0] q;
  output we;
  output [15:0] d;
  output [9:0] adr;
  input [9:0] adr_d;
  input [15:0] d_d;
  input en_d;
  input we_d;
  output [15:0] q_d;
  input port_0_rw_ram_ir_internal_RMASK_B_d;
  input port_0_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = (en_d);
  assign q_d = q;
  assign we = (port_0_rw_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign adr = (adr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_7_16_10_963_963_16_5_gen
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_7_16_10_963_963_16_5_gen
    (
  en, q, we, d, adr, adr_d, d_d, en_d, we_d, q_d, port_0_rw_ram_ir_internal_RMASK_B_d,
      port_0_rw_ram_ir_internal_WMASK_B_d
);
  output en;
  input [15:0] q;
  output we;
  output [15:0] d;
  output [9:0] adr;
  input [9:0] adr_d;
  input [15:0] d_d;
  input en_d;
  input we_d;
  output [15:0] q_d;
  input port_0_rw_ram_ir_internal_RMASK_B_d;
  input port_0_rw_ram_ir_internal_WMASK_B_d;



  // Interconnect Declarations for Component Instantiations 
  assign en = (en_d);
  assign q_d = q;
  assign we = (port_0_rw_ram_ir_internal_WMASK_B_d);
  assign d = (d_d);
  assign adr = (adr_d);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_run_fsm
//  FSM Module
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_run_fsm (
  clk, rst, arst_n, run_wen, fsm_output, VCOL_C_0_tr0, VROW_C_0_tr0
);
  input clk;
  input rst;
  input arst_n;
  input run_wen;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;
  input VCOL_C_0_tr0;
  input VROW_C_0_tr0;


  // FSM State Type Declaration for EdgeDetect_IP_EdgeDetect_VerDer_run_run_fsm_1
  parameter
    main_C_0 = 2'd0,
    VCOL_C_0 = 2'd1,
    VROW_C_0 = 2'd2,
    main_C_1 = 2'd3;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : EdgeDetect_IP_EdgeDetect_VerDer_run_run_fsm_1
    case (state_var)
      VCOL_C_0 : begin
        fsm_output = 4'b0010;
        if ( VCOL_C_0_tr0 ) begin
          state_var_NS = VROW_C_0;
        end
        else begin
          state_var_NS = VCOL_C_0;
        end
      end
      VROW_C_0 : begin
        fsm_output = 4'b0100;
        if ( VROW_C_0_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = VCOL_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 4'b1000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 4'b0001;
        state_var_NS = VCOL_C_0;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= main_C_0;
    end
    else if ( rst ) begin
      state_var <= main_C_0;
    end
    else if ( run_wen ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_staller
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_staller (
  run_wen, dat_in_rsci_wen_comp, dat_out_rsci_wen_comp, dat_rgb_rsci_wen_comp, dy_rsci_wen_comp
);
  output run_wen;
  input dat_in_rsci_wen_comp;
  input dat_out_rsci_wen_comp;
  input dat_rgb_rsci_wen_comp;
  input dy_rsci_wen_comp;



  // Interconnect Declarations for Component Instantiations 
  assign run_wen = dat_in_rsci_wen_comp & dat_out_rsci_wen_comp & dat_rgb_rsci_wen_comp
      & dy_rsci_wen_comp;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_wait_dp (
  line_buf0_r_pixelType_rsci_en_d, run_wen, line_buf0_r_pixelType_rsci_cgo, line_buf0_r_pixelType_rsci_cgo_ir_unreg
);
  output line_buf0_r_pixelType_rsci_en_d;
  input run_wen;
  input line_buf0_r_pixelType_rsci_cgo;
  input line_buf0_r_pixelType_rsci_cgo_ir_unreg;



  // Interconnect Declarations for Component Instantiations 
  assign line_buf0_r_pixelType_rsci_en_d = run_wen & (line_buf0_r_pixelType_rsci_cgo
      | line_buf0_r_pixelType_rsci_cgo_ir_unreg);
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci_dy_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci_dy_wait_dp (
  clk, rst, arst_n, dy_rsci_oswt, dy_rsci_wen_comp, dy_rsci_biwt, dy_rsci_bdwt, dy_rsci_bcwt
);
  input clk;
  input rst;
  input arst_n;
  input dy_rsci_oswt;
  output dy_rsci_wen_comp;
  input dy_rsci_biwt;
  input dy_rsci_bdwt;
  output dy_rsci_bcwt;
  reg dy_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dy_rsci_wen_comp = (~ dy_rsci_oswt) | dy_rsci_biwt | dy_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dy_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      dy_rsci_bcwt <= 1'b0;
    end
    else begin
      dy_rsci_bcwt <= ~((~(dy_rsci_bcwt | dy_rsci_biwt)) | dy_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci_dy_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci_dy_wait_ctrl (
  run_wen, dy_rsci_oswt, dy_rsci_biwt, dy_rsci_bdwt, dy_rsci_bcwt, dy_rsci_irdy,
      dy_rsci_ivld_run_sct
);
  input run_wen;
  input dy_rsci_oswt;
  output dy_rsci_biwt;
  output dy_rsci_bdwt;
  input dy_rsci_bcwt;
  input dy_rsci_irdy;
  output dy_rsci_ivld_run_sct;


  // Interconnect Declarations
  wire dy_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dy_rsci_bdwt = dy_rsci_oswt & run_wen;
  assign dy_rsci_biwt = dy_rsci_ogwt & dy_rsci_irdy;
  assign dy_rsci_ogwt = dy_rsci_oswt & (~ dy_rsci_bcwt);
  assign dy_rsci_ivld_run_sct = dy_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_dat_rgb_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_dat_rgb_wait_dp (
  clk, rst, arst_n, dat_rgb_rsci_oswt, dat_rgb_rsci_wen_comp, dat_rgb_rsci_biwt,
      dat_rgb_rsci_bdwt, dat_rgb_rsci_bcwt
);
  input clk;
  input rst;
  input arst_n;
  input dat_rgb_rsci_oswt;
  output dat_rgb_rsci_wen_comp;
  input dat_rgb_rsci_biwt;
  input dat_rgb_rsci_bdwt;
  output dat_rgb_rsci_bcwt;
  reg dat_rgb_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dat_rgb_rsci_wen_comp = (~ dat_rgb_rsci_oswt) | dat_rgb_rsci_biwt | dat_rgb_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dat_rgb_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      dat_rgb_rsci_bcwt <= 1'b0;
    end
    else begin
      dat_rgb_rsci_bcwt <= ~((~(dat_rgb_rsci_bcwt | dat_rgb_rsci_biwt)) | dat_rgb_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_dat_rgb_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_dat_rgb_wait_ctrl (
  run_wen, dat_rgb_rsci_oswt, dat_rgb_rsci_biwt, dat_rgb_rsci_bdwt, dat_rgb_rsci_bcwt,
      dat_rgb_rsci_irdy, dat_rgb_rsci_ivld_run_sct
);
  input run_wen;
  input dat_rgb_rsci_oswt;
  output dat_rgb_rsci_biwt;
  output dat_rgb_rsci_bdwt;
  input dat_rgb_rsci_bcwt;
  input dat_rgb_rsci_irdy;
  output dat_rgb_rsci_ivld_run_sct;


  // Interconnect Declarations
  wire dat_rgb_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dat_rgb_rsci_bdwt = dat_rgb_rsci_oswt & run_wen;
  assign dat_rgb_rsci_biwt = dat_rgb_rsci_ogwt & dat_rgb_rsci_irdy;
  assign dat_rgb_rsci_ogwt = dat_rgb_rsci_oswt & (~ dat_rgb_rsci_bcwt);
  assign dat_rgb_rsci_ivld_run_sct = dat_rgb_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci_dat_out_wait_dp
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci_dat_out_wait_dp (
  clk, rst, arst_n, dat_out_rsci_oswt, dat_out_rsci_wen_comp, dat_out_rsci_biwt,
      dat_out_rsci_bdwt, dat_out_rsci_bcwt
);
  input clk;
  input rst;
  input arst_n;
  input dat_out_rsci_oswt;
  output dat_out_rsci_wen_comp;
  input dat_out_rsci_biwt;
  input dat_out_rsci_bdwt;
  output dat_out_rsci_bcwt;
  reg dat_out_rsci_bcwt;



  // Interconnect Declarations for Component Instantiations 
  assign dat_out_rsci_wen_comp = (~ dat_out_rsci_oswt) | dat_out_rsci_biwt | dat_out_rsci_bcwt;
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      dat_out_rsci_bcwt <= 1'b0;
    end
    else if ( rst ) begin
      dat_out_rsci_bcwt <= 1'b0;
    end
    else begin
      dat_out_rsci_bcwt <= ~((~(dat_out_rsci_bcwt | dat_out_rsci_biwt)) | dat_out_rsci_bdwt);
    end
  end
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci_dat_out_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci_dat_out_wait_ctrl (
  run_wen, dat_out_rsci_oswt, dat_out_rsci_biwt, dat_out_rsci_bdwt, dat_out_rsci_bcwt,
      dat_out_rsci_irdy, dat_out_rsci_ivld_run_sct
);
  input run_wen;
  input dat_out_rsci_oswt;
  output dat_out_rsci_biwt;
  output dat_out_rsci_bdwt;
  input dat_out_rsci_bcwt;
  input dat_out_rsci_irdy;
  output dat_out_rsci_ivld_run_sct;


  // Interconnect Declarations
  wire dat_out_rsci_ogwt;


  // Interconnect Declarations for Component Instantiations 
  assign dat_out_rsci_bdwt = dat_out_rsci_oswt & run_wen;
  assign dat_out_rsci_biwt = dat_out_rsci_ogwt & dat_out_rsci_irdy;
  assign dat_out_rsci_ogwt = dat_out_rsci_oswt & (~ dat_out_rsci_bcwt);
  assign dat_out_rsci_ivld_run_sct = dat_out_rsci_ogwt;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dat_in_rsci_dat_in_wait_ctrl
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dat_in_rsci_dat_in_wait_ctrl (
  run_wen, dat_in_rsci_iswt0, dat_in_rsci_irdy_run_sct
);
  input run_wen;
  input dat_in_rsci_iswt0;
  output dat_in_rsci_irdy_run_sct;



  // Interconnect Declarations for Component Instantiations 
  assign dat_in_rsci_irdy_run_sct = dat_in_rsci_iswt0 & run_wen;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci (
  clk, rst, arst_n, dy_rsc_dat, dy_rsc_vld, dy_rsc_rdy, run_wen, dy_rsci_oswt, dy_rsci_wen_comp,
      dy_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  output [8:0] dy_rsc_dat;
  output dy_rsc_vld;
  input dy_rsc_rdy;
  input run_wen;
  input dy_rsci_oswt;
  output dy_rsci_wen_comp;
  input [8:0] dy_rsci_idat;


  // Interconnect Declarations
  wire dy_rsci_biwt;
  wire dy_rsci_bdwt;
  wire dy_rsci_bcwt;
  wire dy_rsci_irdy;
  wire dy_rsci_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd6),
  .width(32'sd9)) dy_rsci (
      .irdy(dy_rsci_irdy),
      .ivld(dy_rsci_ivld_run_sct),
      .idat(dy_rsci_idat),
      .rdy(dy_rsc_rdy),
      .vld(dy_rsc_vld),
      .dat(dy_rsc_dat)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci_dy_wait_ctrl EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci_dy_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dy_rsci_oswt(dy_rsci_oswt),
      .dy_rsci_biwt(dy_rsci_biwt),
      .dy_rsci_bdwt(dy_rsci_bdwt),
      .dy_rsci_bcwt(dy_rsci_bcwt),
      .dy_rsci_irdy(dy_rsci_irdy),
      .dy_rsci_ivld_run_sct(dy_rsci_ivld_run_sct)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci_dy_wait_dp EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci_dy_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dy_rsci_oswt(dy_rsci_oswt),
      .dy_rsci_wen_comp(dy_rsci_wen_comp),
      .dy_rsci_biwt(dy_rsci_biwt),
      .dy_rsci_bdwt(dy_rsci_bdwt),
      .dy_rsci_bcwt(dy_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci (
  clk, rst, arst_n, dat_rgb_rsc_dat, dat_rgb_rsc_vld, dat_rgb_rsc_rdy, run_wen, dat_rgb_rsci_oswt,
      dat_rgb_rsci_wen_comp, dat_rgb_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  output [33:0] dat_rgb_rsc_dat;
  output dat_rgb_rsc_vld;
  input dat_rgb_rsc_rdy;
  input run_wen;
  input dat_rgb_rsci_oswt;
  output dat_rgb_rsci_wen_comp;
  input [33:0] dat_rgb_rsci_idat;


  // Interconnect Declarations
  wire dat_rgb_rsci_biwt;
  wire dat_rgb_rsci_bdwt;
  wire dat_rgb_rsci_bcwt;
  wire dat_rgb_rsci_irdy;
  wire dat_rgb_rsci_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  wire [33:0] nl_dat_rgb_rsci_idat;
  assign nl_dat_rgb_rsci_idat = {10'b0000000000 , (dat_rgb_rsci_idat[23:0])};
  ccs_out_wait_v1 #(.rscid(32'sd5),
  .width(32'sd34)) dat_rgb_rsci (
      .irdy(dat_rgb_rsci_irdy),
      .ivld(dat_rgb_rsci_ivld_run_sct),
      .idat(nl_dat_rgb_rsci_idat[33:0]),
      .rdy(dat_rgb_rsc_rdy),
      .vld(dat_rgb_rsc_vld),
      .dat(dat_rgb_rsc_dat)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_dat_rgb_wait_ctrl EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_dat_rgb_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dat_rgb_rsci_oswt(dat_rgb_rsci_oswt),
      .dat_rgb_rsci_biwt(dat_rgb_rsci_biwt),
      .dat_rgb_rsci_bdwt(dat_rgb_rsci_bdwt),
      .dat_rgb_rsci_bcwt(dat_rgb_rsci_bcwt),
      .dat_rgb_rsci_irdy(dat_rgb_rsci_irdy),
      .dat_rgb_rsci_ivld_run_sct(dat_rgb_rsci_ivld_run_sct)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_dat_rgb_wait_dp EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_dat_rgb_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dat_rgb_rsci_oswt(dat_rgb_rsci_oswt),
      .dat_rgb_rsci_wen_comp(dat_rgb_rsci_wen_comp),
      .dat_rgb_rsci_biwt(dat_rgb_rsci_biwt),
      .dat_rgb_rsci_bdwt(dat_rgb_rsci_bdwt),
      .dat_rgb_rsci_bcwt(dat_rgb_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci (
  clk, rst, arst_n, dat_out_rsc_dat, dat_out_rsc_vld, dat_out_rsc_rdy, run_wen, dat_out_rsci_oswt,
      dat_out_rsci_wen_comp, dat_out_rsci_idat
);
  input clk;
  input rst;
  input arst_n;
  output [7:0] dat_out_rsc_dat;
  output dat_out_rsc_vld;
  input dat_out_rsc_rdy;
  input run_wen;
  input dat_out_rsci_oswt;
  output dat_out_rsci_wen_comp;
  input [7:0] dat_out_rsci_idat;


  // Interconnect Declarations
  wire dat_out_rsci_biwt;
  wire dat_out_rsci_bdwt;
  wire dat_out_rsci_bcwt;
  wire dat_out_rsci_irdy;
  wire dat_out_rsci_ivld_run_sct;


  // Interconnect Declarations for Component Instantiations 
  ccs_out_wait_v1 #(.rscid(32'sd4),
  .width(32'sd8)) dat_out_rsci (
      .irdy(dat_out_rsci_irdy),
      .ivld(dat_out_rsci_ivld_run_sct),
      .idat(dat_out_rsci_idat),
      .rdy(dat_out_rsc_rdy),
      .vld(dat_out_rsc_vld),
      .dat(dat_out_rsc_dat)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci_dat_out_wait_ctrl EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci_dat_out_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dat_out_rsci_oswt(dat_out_rsci_oswt),
      .dat_out_rsci_biwt(dat_out_rsci_biwt),
      .dat_out_rsci_bdwt(dat_out_rsci_bdwt),
      .dat_out_rsci_bcwt(dat_out_rsci_bcwt),
      .dat_out_rsci_irdy(dat_out_rsci_irdy),
      .dat_out_rsci_ivld_run_sct(dat_out_rsci_ivld_run_sct)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci_dat_out_wait_dp EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci_dat_out_wait_dp_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dat_out_rsci_oswt(dat_out_rsci_oswt),
      .dat_out_rsci_wen_comp(dat_out_rsci_wen_comp),
      .dat_out_rsci_biwt(dat_out_rsci_biwt),
      .dat_out_rsci_bdwt(dat_out_rsci_bdwt),
      .dat_out_rsci_bcwt(dat_out_rsci_bcwt)
    );
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run_dat_in_rsci
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run_dat_in_rsci (
  dat_in_rsc_dat, dat_in_rsc_vld, dat_in_rsc_rdy, run_wen, dat_in_rsci_oswt, dat_in_rsci_wen_comp,
      dat_in_rsci_idat_mxwt
);
  input [33:0] dat_in_rsc_dat;
  input dat_in_rsc_vld;
  output dat_in_rsc_rdy;
  input run_wen;
  input dat_in_rsci_oswt;
  output dat_in_rsci_wen_comp;
  output [23:0] dat_in_rsci_idat_mxwt;


  // Interconnect Declarations
  wire dat_in_rsci_irdy_run_sct;
  wire dat_in_rsci_ivld;
  wire [33:0] dat_in_rsci_idat;


  // Interconnect Declarations for Component Instantiations 
  ccs_in_wait_coupled_v1 #(.rscid(32'sd1),
  .width(32'sd34)) dat_in_rsci (
      .rdy(dat_in_rsc_rdy),
      .vld(dat_in_rsc_vld),
      .dat(dat_in_rsc_dat),
      .irdy(dat_in_rsci_irdy_run_sct),
      .ivld(dat_in_rsci_ivld),
      .idat(dat_in_rsci_idat)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dat_in_rsci_dat_in_wait_ctrl EdgeDetect_IP_EdgeDetect_VerDer_run_dat_in_rsci_dat_in_wait_ctrl_inst
      (
      .run_wen(run_wen),
      .dat_in_rsci_iswt0(dat_in_rsci_oswt),
      .dat_in_rsci_irdy_run_sct(dat_in_rsci_irdy_run_sct)
    );
  assign dat_in_rsci_idat_mxwt = dat_in_rsci_idat[23:0];
  assign dat_in_rsci_wen_comp = (~ dat_in_rsci_oswt) | dat_in_rsci_ivld;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_run
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_run (
  clk, rst, arst_n, dat_in_rsc_dat, dat_in_rsc_vld, dat_in_rsc_rdy, widthIn, heightIn,
      dat_out_rsc_dat, dat_out_rsc_vld, dat_out_rsc_rdy, dat_rgb_rsc_dat, dat_rgb_rsc_vld,
      dat_rgb_rsc_rdy, dy_rsc_dat, dy_rsc_vld, dy_rsc_rdy, line_buf0_r_pixelType_rsci_d_d,
      line_buf0_r_pixelType_rsci_en_d, line_buf0_r_pixelType_rsci_q_d, line_buf0_g_pixelType_rsci_d_d,
      line_buf0_g_pixelType_rsci_q_d, line_buf0_b_pixelType_rsci_d_d, line_buf0_b_pixelType_rsci_q_d,
      line_buf1_r_pixelType_rsci_d_d, line_buf1_r_pixelType_rsci_q_d, line_buf1_g_pixelType_rsci_d_d,
      line_buf1_g_pixelType_rsci_q_d, line_buf1_b_pixelType_rsci_d_d, line_buf1_b_pixelType_rsci_q_d,
      line_buf0_r_pixelType_rsci_adr_d_pff, line_buf0_r_pixelType_rsci_we_d_pff,
      line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_pff
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] dat_in_rsc_dat;
  input dat_in_rsc_vld;
  output dat_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [7:0] dat_out_rsc_dat;
  output dat_out_rsc_vld;
  input dat_out_rsc_rdy;
  output [33:0] dat_rgb_rsc_dat;
  output dat_rgb_rsc_vld;
  input dat_rgb_rsc_rdy;
  output [8:0] dy_rsc_dat;
  output dy_rsc_vld;
  input dy_rsc_rdy;
  output [15:0] line_buf0_r_pixelType_rsci_d_d;
  output line_buf0_r_pixelType_rsci_en_d;
  input [15:0] line_buf0_r_pixelType_rsci_q_d;
  output [15:0] line_buf0_g_pixelType_rsci_d_d;
  input [15:0] line_buf0_g_pixelType_rsci_q_d;
  output [15:0] line_buf0_b_pixelType_rsci_d_d;
  input [15:0] line_buf0_b_pixelType_rsci_q_d;
  output [11:0] line_buf1_r_pixelType_rsci_d_d;
  input [11:0] line_buf1_r_pixelType_rsci_q_d;
  output [11:0] line_buf1_g_pixelType_rsci_d_d;
  input [11:0] line_buf1_g_pixelType_rsci_q_d;
  output [11:0] line_buf1_b_pixelType_rsci_d_d;
  input [11:0] line_buf1_b_pixelType_rsci_q_d;
  output [9:0] line_buf0_r_pixelType_rsci_adr_d_pff;
  output line_buf0_r_pixelType_rsci_we_d_pff;
  output line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_pff;


  // Interconnect Declarations
  wire run_wen;
  wire dat_in_rsci_wen_comp;
  wire [23:0] dat_in_rsci_idat_mxwt;
  wire dat_out_rsci_wen_comp;
  reg [7:0] dat_out_rsci_idat;
  wire [9:0] nl_dat_out_rsci_idat;
  wire dat_rgb_rsci_wen_comp;
  wire dy_rsci_wen_comp;
  reg [8:0] dy_rsci_idat;
  wire [9:0] nl_dy_rsci_idat;
  reg [7:0] dat_rgb_rsci_idat_23_16;
  reg [7:0] dat_rgb_rsci_idat_15_8;
  reg [7:0] dat_rgb_rsci_idat_7_0;
  reg [7:0] pix0_r_pixelType_lpi_3_dfm;
  reg [7:0] pix0_g_pixelType_lpi_3_dfm;
  reg [7:0] pix0_b_pixelType_lpi_3_dfm;
  wire [3:0] fsm_output;
  wire VROW_equal_tmp;
  wire VCOL_equal_1_tmp;
  wire or_tmp_2;
  wire or_dcpl_34;
  wire or_dcpl_41;
  wire and_dcpl_30;
  wire and_dcpl_31;
  wire or_tmp_9;
  reg [9:0] VROW_y_sva;
  reg VCOL_nor_1_itm_2;
  reg VCOL_stage_0_2;
  reg VCOL_stage_0_1;
  reg [10:0] VCOL_x_sva;
  reg [9:0] VCOL_asn_12_itm_1;
  reg VCOL_nor_1_itm_1;
  reg operator_11_false_operator_11_false_slc_VCOL_x_0_2_itm_1;
  reg [9:0] VCOL_asn_12_itm;
  reg VCOL_stage_0_3;
  reg [9:0] VCOL_asn_12_itm_2;
  reg VCOL_if_slc_operator_10_false_acc_10_svs_1;
  reg VCOL_asn_24_itm_1;
  wire VCOL_if_5_and_cse;
  wire VCOL_if_5_and_3_cse;
  reg reg_dat_in_rsci_oswt_cse;
  reg reg_dat_out_rsci_oswt_cse;
  reg reg_line_buf0_r_pixelType_rsci_cgo_cse;
  reg reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse;
  wire [7:0] VCOL_mux_17_cse;
  wire [7:0] VCOL_mux_16_cse;
  wire [7:0] VCOL_mux_15_cse;
  wire nand_3_cse;
  wire VCOL_VCOL_and_cse;
  wire or_51_cse;
  wire pix0_b_pixelType_or_1_cse;
  wire VCOL_and_cse;
  wire VCOL_and_10_cse;
  wire and_95_rmff;
  reg [7:0] wrbuf0_pix_r_pixelType_7_0_lpi_4;
  reg [7:0] wrbuf0_pix_g_pixelType_7_0_lpi_4;
  reg [7:0] wrbuf0_pix_b_pixelType_7_0_lpi_4;
  wire [15:0] rdbuf0_pix_r_pixelType_lpi_3_mx0;
  wire [15:0] rdbuf0_pix_g_pixelType_lpi_3_mx0;
  wire [15:0] rdbuf0_pix_b_pixelType_lpi_3_mx0;
  wire [10:0] z_out;
  wire [11:0] nl_z_out;
  reg [7:0] pix0_r_pixelType_lpi_3;
  reg [7:0] pix0_g_pixelType_lpi_3;
  reg [7:0] pix0_b_pixelType_lpi_3;
  reg [11:0] VCOL_if_2_read_mem_line_buf1_g_pixelType_rsc_cse_lpi_3;
  reg [11:0] VCOL_if_2_read_mem_line_buf1_b_pixelType_rsc_cse_lpi_3;
  reg [15:0] rdbuf0_pix_r_pixelType_lpi_3;
  reg [15:0] rdbuf0_pix_g_pixelType_lpi_3;
  reg [15:0] rdbuf0_pix_b_pixelType_lpi_3;
  reg [5:0] VCOL_if_2_read_mem_line_buf1_r_pixelType_rsc_cse_lpi_3_11_6;
  wire [10:0] VCOL_x_sva_mx1;
  wire [7:0] pix0_r_pixelType_lpi_3_dfm_2_mx0;
  wire [7:0] pix0_g_pixelType_lpi_3_dfm_2_mx0;
  wire [7:0] pix0_b_pixelType_lpi_3_dfm_2_mx0;
  wire [7:0] VCOL_qr_3_lpi_3_dfm_mx1;
  wire [7:0] VCOL_qr_5_lpi_3_dfm_mx1;
  wire [7:0] VCOL_qr_4_lpi_3_dfm_mx0;
  wire VCOL_unequal_tmp_1;
  wire [11:0] VCOL_if_2_read_mem_line_buf1_b_pixelType_rsc_cse_lpi_3_dfm_mx0;
  wire [11:0] VCOL_if_2_read_mem_line_buf1_g_pixelType_rsc_cse_lpi_3_dfm_mx0;
  wire [15:0] rdbuf0_pix_b_pixelType_lpi_3_dfm_mx0;
  wire [15:0] rdbuf0_pix_g_pixelType_lpi_3_dfm_mx0;
  wire [15:0] rdbuf0_pix_r_pixelType_lpi_3_dfm_mx0;
  wire VCOL_and_7;
  wire VCOL_and_9;
  wire [5:0] VCOL_qr_3_lpi_3_dfm_mx0_7_2;
  wire [5:0] VCOL_qr_5_lpi_3_dfm_mx0_7_2;
  wire VCOL_and_15_cse;
  wire VCOL_and_17_cse;
  wire VROW_y_or_cse;
  wire pix0_b_pixelType_and_3_cse;
  wire VCOL_if_2_and_cse;
  wire wrbuf0_pix_b_pixelType_and_cse;
  wire and_153_cse;
  wire and_160_cse;
  wire or_111_cse;
  wire operator_10_false_acc_itm_10;

  wire[8:0] operator_40_true_2_acc_nl;
  wire[10:0] nl_operator_40_true_2_acc_nl;
  wire[6:0] operator_40_true_2_acc_1_nl;
  wire[8:0] nl_operator_40_true_2_acc_1_nl;
  wire[5:0] VCOL_VCOL_mux1h_1_nl;
  wire operator_40_true_5_nor_nl;
  wire[6:0] operator_40_true_2_acc_2_nl;
  wire[8:0] nl_operator_40_true_2_acc_2_nl;
  wire[5:0] VCOL_VCOL_mux1h_2_nl;
  wire operator_40_true_2_nor_nl;
  wire operator_40_true_8_nor_nl;
  wire[5:0] VCOL_VCOL_mux1h_nl;
  wire VROW_y_not_2_nl;
  wire not_nl;
  wire[9:0] VROW_y_mux_nl;
  wire VCOL_nor_nl;
  wire mux_3_nl;
  wire mux_1_nl;
  wire nand_nl;
  wire[10:0] operator_11_false_acc_nl;
  wire[11:0] nl_operator_11_false_acc_nl;
  wire[10:0] operator_10_false_acc_nl;
  wire[11:0] nl_operator_10_false_acc_nl;
  wire VROW_VROW_and_1_nl;
  wire[9:0] VROW_mux_2_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [33:0] nl_EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_inst_dat_rgb_rsci_idat;
  assign nl_EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_inst_dat_rgb_rsci_idat
      = {10'b0000000000 , dat_rgb_rsci_idat_23_16 , dat_rgb_rsci_idat_15_8 , dat_rgb_rsci_idat_7_0};
  wire  nl_EdgeDetect_IP_EdgeDetect_VerDer_run_run_fsm_inst_VCOL_C_0_tr0;
  assign nl_EdgeDetect_IP_EdgeDetect_VerDer_run_run_fsm_inst_VCOL_C_0_tr0 = ~(VCOL_stage_0_1
      | VCOL_stage_0_2 | VCOL_stage_0_3);
  EdgeDetect_IP_EdgeDetect_VerDer_run_dat_in_rsci EdgeDetect_IP_EdgeDetect_VerDer_run_dat_in_rsci_inst
      (
      .dat_in_rsc_dat(dat_in_rsc_dat),
      .dat_in_rsc_vld(dat_in_rsc_vld),
      .dat_in_rsc_rdy(dat_in_rsc_rdy),
      .run_wen(run_wen),
      .dat_in_rsci_oswt(reg_dat_in_rsci_oswt_cse),
      .dat_in_rsci_wen_comp(dat_in_rsci_wen_comp),
      .dat_in_rsci_idat_mxwt(dat_in_rsci_idat_mxwt)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci EdgeDetect_IP_EdgeDetect_VerDer_run_dat_out_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dat_out_rsc_dat(dat_out_rsc_dat),
      .dat_out_rsc_vld(dat_out_rsc_vld),
      .dat_out_rsc_rdy(dat_out_rsc_rdy),
      .run_wen(run_wen),
      .dat_out_rsci_oswt(reg_dat_out_rsci_oswt_cse),
      .dat_out_rsci_wen_comp(dat_out_rsci_wen_comp),
      .dat_out_rsci_idat(dat_out_rsci_idat)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dat_rgb_rsc_dat(dat_rgb_rsc_dat),
      .dat_rgb_rsc_vld(dat_rgb_rsc_vld),
      .dat_rgb_rsc_rdy(dat_rgb_rsc_rdy),
      .run_wen(run_wen),
      .dat_rgb_rsci_oswt(reg_dat_out_rsci_oswt_cse),
      .dat_rgb_rsci_wen_comp(dat_rgb_rsci_wen_comp),
      .dat_rgb_rsci_idat(nl_EdgeDetect_IP_EdgeDetect_VerDer_run_dat_rgb_rsci_inst_dat_rgb_rsci_idat[33:0])
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci EdgeDetect_IP_EdgeDetect_VerDer_run_dy_rsci_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dy_rsc_dat(dy_rsc_dat),
      .dy_rsc_vld(dy_rsc_vld),
      .dy_rsc_rdy(dy_rsc_rdy),
      .run_wen(run_wen),
      .dy_rsci_oswt(reg_dat_out_rsci_oswt_cse),
      .dy_rsci_wen_comp(dy_rsci_wen_comp),
      .dy_rsci_idat(dy_rsci_idat)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_wait_dp EdgeDetect_IP_EdgeDetect_VerDer_run_wait_dp_inst
      (
      .line_buf0_r_pixelType_rsci_en_d(line_buf0_r_pixelType_rsci_en_d),
      .run_wen(run_wen),
      .line_buf0_r_pixelType_rsci_cgo(reg_line_buf0_r_pixelType_rsci_cgo_cse),
      .line_buf0_r_pixelType_rsci_cgo_ir_unreg(and_95_rmff)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_staller EdgeDetect_IP_EdgeDetect_VerDer_run_staller_inst
      (
      .run_wen(run_wen),
      .dat_in_rsci_wen_comp(dat_in_rsci_wen_comp),
      .dat_out_rsci_wen_comp(dat_out_rsci_wen_comp),
      .dat_rgb_rsci_wen_comp(dat_rgb_rsci_wen_comp),
      .dy_rsci_wen_comp(dy_rsci_wen_comp)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run_run_fsm EdgeDetect_IP_EdgeDetect_VerDer_run_run_fsm_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .run_wen(run_wen),
      .fsm_output(fsm_output),
      .VCOL_C_0_tr0(nl_EdgeDetect_IP_EdgeDetect_VerDer_run_run_fsm_inst_VCOL_C_0_tr0),
      .VROW_C_0_tr0(VROW_equal_tmp)
    );
  assign VCOL_if_5_and_cse = run_wen & ((or_dcpl_34 & VCOL_stage_0_3 & reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse
      & (fsm_output[1])) | or_tmp_9);
  assign VCOL_if_5_and_3_cse = run_wen & (fsm_output[1]) & (~((VCOL_asn_12_itm_2==10'b0000000000)))
      & VCOL_stage_0_3;
  assign VROW_y_or_cse = (fsm_output[0]) | (fsm_output[2]);
  assign VCOL_and_15_cse = run_wen & VCOL_stage_0_2;
  assign VCOL_and_17_cse = run_wen & VCOL_VCOL_and_cse;
  assign and_95_rmff = (VCOL_stage_0_2 | VCOL_stage_0_3) & (fsm_output[1]);
  assign and_153_cse = (VROW_equal_tmp | VCOL_asn_24_itm_1 | (~(VCOL_stage_0_3 &
      VCOL_if_slc_operator_10_false_acc_10_svs_1))) & run_wen;
  assign pix0_b_pixelType_or_1_cse = (VROW_equal_tmp & and_dcpl_30) | (and_dcpl_31
      & VROW_equal_tmp);
  assign pix0_b_pixelType_and_3_cse = run_wen & (fsm_output[1]) & (~((~((~ VCOL_stage_0_1)
      | operator_10_false_acc_itm_10)) | VCOL_stage_0_2)) & (((~ VROW_equal_tmp)
      & and_dcpl_30) | (and_dcpl_31 & (~ VROW_equal_tmp)) | pix0_b_pixelType_or_1_cse);
  assign or_111_cse = (~ VCOL_stage_0_1) | (z_out[0]) | VCOL_equal_1_tmp | operator_10_false_acc_itm_10
      | (VCOL_asn_12_itm_1!=10'b0000000000);
  assign mux_3_nl = MUX_s_1_2_2(VCOL_stage_0_1, or_111_cse, VCOL_stage_0_2);
  assign and_160_cse = mux_3_nl & VCOL_stage_0_3 & (~ VCOL_asn_24_itm_1) & (~ reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse)
      & run_wen & (VCOL_x_sva[0]);
  assign or_51_cse = or_dcpl_41 | reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse;
  assign nand_nl = ~(((~ (z_out[0])) | VCOL_equal_1_tmp) & (~((~((VROW_y_sva[0])
      & VCOL_nor_1_itm_1)) & or_tmp_2)));
  assign mux_1_nl = MUX_s_1_2_2(VCOL_stage_0_1, nand_nl, VCOL_stage_0_2);
  assign VCOL_if_2_and_cse = run_wen & mux_1_nl & (VCOL_x_sva[0]) & (~ or_51_cse);
  assign VCOL_and_cse = (~ or_dcpl_41) & VCOL_if_slc_operator_10_false_acc_10_svs_1;
  assign VCOL_and_10_cse = or_dcpl_41 & VCOL_if_slc_operator_10_false_acc_10_svs_1;
  assign VCOL_mux_15_cse = MUX1HOT_v_8_3_2((dat_in_rsci_idat_mxwt[23:16]), pix0_b_pixelType_lpi_3_dfm_2_mx0,
      pix0_b_pixelType_lpi_3, {(~ VCOL_if_slc_operator_10_false_acc_10_svs_1) , VCOL_and_cse
      , VCOL_and_10_cse});
  assign wrbuf0_pix_b_pixelType_and_cse = run_wen & (~((~ (z_out[0])) | VCOL_equal_1_tmp))
      & VCOL_stage_0_2 & VCOL_stage_0_1 & (~ (VCOL_x_sva[0]));
  assign VCOL_mux_16_cse = MUX1HOT_v_8_3_2((dat_in_rsci_idat_mxwt[15:8]), pix0_g_pixelType_lpi_3_dfm_2_mx0,
      pix0_g_pixelType_lpi_3, {(~ VCOL_if_slc_operator_10_false_acc_10_svs_1) , VCOL_and_cse
      , VCOL_and_10_cse});
  assign VCOL_mux_17_cse = MUX1HOT_v_8_3_2((dat_in_rsci_idat_mxwt[7:0]), pix0_r_pixelType_lpi_3_dfm_2_mx0,
      pix0_r_pixelType_lpi_3, {(~ VCOL_if_slc_operator_10_false_acc_10_svs_1) , VCOL_and_cse
      , VCOL_and_10_cse});
  assign nl_operator_11_false_acc_nl = widthIn + 11'b11111111111;
  assign operator_11_false_acc_nl = nl_operator_11_false_acc_nl[10:0];
  assign VCOL_equal_1_tmp = VCOL_x_sva == operator_11_false_acc_nl;
  assign VCOL_VCOL_and_cse = VCOL_stage_0_1 & nand_3_cse;
  assign VCOL_x_sva_mx1 = MUX_v_11_2_2(VCOL_x_sva, z_out, VCOL_stage_0_2);
  assign rdbuf0_pix_b_pixelType_lpi_3_mx0 = MUX_v_16_2_2(line_buf0_b_pixelType_rsci_q_d,
      rdbuf0_pix_b_pixelType_lpi_3, or_51_cse);
  assign rdbuf0_pix_g_pixelType_lpi_3_mx0 = MUX_v_16_2_2(line_buf0_g_pixelType_rsci_q_d,
      rdbuf0_pix_g_pixelType_lpi_3, or_51_cse);
  assign rdbuf0_pix_r_pixelType_lpi_3_mx0 = MUX_v_16_2_2(line_buf0_r_pixelType_rsci_q_d,
      rdbuf0_pix_r_pixelType_lpi_3, or_51_cse);
  assign nl_operator_10_false_acc_nl = ({1'b1 , heightIn}) + conv_u2s_10_11(~ VROW_y_sva);
  assign operator_10_false_acc_nl = nl_operator_10_false_acc_nl[10:0];
  assign operator_10_false_acc_itm_10 = readslicef_11_1_10(operator_10_false_acc_nl);
  assign pix0_r_pixelType_lpi_3_dfm_2_mx0 = MUX_v_8_2_2(pix0_r_pixelType_lpi_3_dfm,
      VCOL_qr_3_lpi_3_dfm_mx1, VROW_equal_tmp);
  assign pix0_g_pixelType_lpi_3_dfm_2_mx0 = MUX_v_8_2_2(pix0_g_pixelType_lpi_3_dfm,
      VCOL_qr_4_lpi_3_dfm_mx0, VROW_equal_tmp);
  assign pix0_b_pixelType_lpi_3_dfm_2_mx0 = MUX_v_8_2_2(pix0_b_pixelType_lpi_3_dfm,
      VCOL_qr_5_lpi_3_dfm_mx1, VROW_equal_tmp);
  assign VCOL_qr_3_lpi_3_dfm_mx0_7_2 = MUX_v_6_2_2((line_buf0_r_pixelType_rsci_q_d[7:2]),
      (rdbuf0_pix_r_pixelType_lpi_3[15:10]), reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign VCOL_qr_3_lpi_3_dfm_mx1 = MUX_v_8_2_2((line_buf0_r_pixelType_rsci_q_d[7:0]),
      (rdbuf0_pix_r_pixelType_lpi_3[15:8]), reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign VCOL_qr_5_lpi_3_dfm_mx0_7_2 = MUX_v_6_2_2((line_buf0_b_pixelType_rsci_q_d[7:2]),
      (rdbuf0_pix_b_pixelType_lpi_3[15:10]), reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign VCOL_qr_5_lpi_3_dfm_mx1 = MUX_v_8_2_2((line_buf0_b_pixelType_rsci_q_d[7:0]),
      (rdbuf0_pix_b_pixelType_lpi_3[15:8]), reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign VCOL_qr_4_lpi_3_dfm_mx0 = MUX_v_8_2_2((line_buf0_g_pixelType_rsci_q_d[7:0]),
      (rdbuf0_pix_g_pixelType_lpi_3[15:8]), reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign VCOL_unequal_tmp_1 = ~((VROW_y_sva[0]) & VCOL_nor_1_itm_2);
  assign VCOL_if_2_read_mem_line_buf1_b_pixelType_rsc_cse_lpi_3_dfm_mx0 = MUX_v_12_2_2(line_buf1_b_pixelType_rsci_q_d,
      VCOL_if_2_read_mem_line_buf1_b_pixelType_rsc_cse_lpi_3, reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign VCOL_if_2_read_mem_line_buf1_g_pixelType_rsc_cse_lpi_3_dfm_mx0 = MUX_v_12_2_2(line_buf1_g_pixelType_rsci_q_d,
      VCOL_if_2_read_mem_line_buf1_g_pixelType_rsc_cse_lpi_3, reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign rdbuf0_pix_b_pixelType_lpi_3_dfm_mx0 = MUX_v_16_2_2(line_buf0_b_pixelType_rsci_q_d,
      rdbuf0_pix_b_pixelType_lpi_3, reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign rdbuf0_pix_g_pixelType_lpi_3_dfm_mx0 = MUX_v_16_2_2(line_buf0_g_pixelType_rsci_q_d,
      rdbuf0_pix_g_pixelType_lpi_3, reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign rdbuf0_pix_r_pixelType_lpi_3_dfm_mx0 = MUX_v_16_2_2(line_buf0_r_pixelType_rsci_q_d,
      rdbuf0_pix_r_pixelType_lpi_3, reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse);
  assign VCOL_and_7 = reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse
      & VCOL_unequal_tmp_1;
  assign VCOL_and_9 = (~ reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse)
      & VCOL_unequal_tmp_1;
  assign VROW_equal_tmp = VROW_y_sva == heightIn;
  assign or_tmp_2 = (VCOL_asn_12_itm_1!=10'b0000000000);
  assign nand_3_cse = ~(VCOL_equal_1_tmp & VCOL_stage_0_2);
  assign or_dcpl_34 = (VCOL_asn_12_itm_2!=10'b0000000000);
  assign or_dcpl_41 = (~ VCOL_stage_0_3) | VCOL_asn_24_itm_1;
  assign and_dcpl_30 = VCOL_stage_0_1 & VCOL_stage_0_3 & (~ VCOL_asn_24_itm_1);
  assign and_dcpl_31 = (~ VCOL_stage_0_1) & VCOL_stage_0_3;
  assign or_tmp_9 = or_dcpl_34 & VCOL_stage_0_3 & (~ reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse)
      & (fsm_output[1]);
  assign line_buf0_r_pixelType_rsci_adr_d_pff = VCOL_x_sva[10:1];
  assign line_buf0_r_pixelType_rsci_d_d = {VCOL_mux_17_cse , wrbuf0_pix_r_pixelType_7_0_lpi_4};
  assign line_buf0_r_pixelType_rsci_we_d_pff = VCOL_stage_0_2 & operator_11_false_operator_11_false_slc_VCOL_x_0_2_itm_1
      & (fsm_output[1]);
  assign line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_pff = VCOL_stage_0_2
      & (~ operator_11_false_operator_11_false_slc_VCOL_x_0_2_itm_1) & (fsm_output[1]);
  assign line_buf0_g_pixelType_rsci_d_d = {VCOL_mux_16_cse , wrbuf0_pix_g_pixelType_7_0_lpi_4};
  assign line_buf0_b_pixelType_rsci_d_d = {VCOL_mux_15_cse , wrbuf0_pix_b_pixelType_7_0_lpi_4};
  assign line_buf1_r_pixelType_rsci_d_d = {(rdbuf0_pix_r_pixelType_lpi_3_mx0[15:10])
      , (rdbuf0_pix_r_pixelType_lpi_3_mx0[7:2])};
  assign line_buf1_g_pixelType_rsci_d_d = {(rdbuf0_pix_g_pixelType_lpi_3_mx0[15:10])
      , (rdbuf0_pix_g_pixelType_lpi_3_mx0[7:2])};
  assign line_buf1_b_pixelType_rsci_d_d = {(rdbuf0_pix_b_pixelType_lpi_3_mx0[15:10])
      , (rdbuf0_pix_b_pixelType_lpi_3_mx0[7:2])};
  always @(posedge clk) begin
    if ( VCOL_if_5_and_cse ) begin
      dat_rgb_rsci_idat_7_0 <= MUX_v_8_2_2((rdbuf0_pix_r_pixelType_lpi_3_dfm_mx0[15:8]),
          (rdbuf0_pix_r_pixelType_lpi_3_dfm_mx0[7:0]), or_tmp_9);
      dat_rgb_rsci_idat_23_16 <= MUX_v_8_2_2((rdbuf0_pix_b_pixelType_lpi_3_dfm_mx0[15:8]),
          (rdbuf0_pix_b_pixelType_lpi_3_dfm_mx0[7:0]), or_tmp_9);
      dat_rgb_rsci_idat_15_8 <= MUX_v_8_2_2((rdbuf0_pix_g_pixelType_lpi_3_dfm_mx0[15:8]),
          (rdbuf0_pix_g_pixelType_lpi_3_dfm_mx0[7:0]), or_tmp_9);
    end
  end
  always @(posedge clk) begin
    if ( VCOL_if_5_and_3_cse ) begin
      dy_rsci_idat <= nl_dy_rsci_idat[8:0];
      dat_out_rsci_idat <= nl_dat_out_rsci_idat[7:0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      VROW_y_sva <= 10'b0000000000;
    end
    else if ( rst ) begin
      VROW_y_sva <= 10'b0000000000;
    end
    else if ( run_wen & VROW_y_or_cse ) begin
      VROW_y_sva <= MUX_v_10_2_2(10'b0000000000, (z_out[9:0]), VROW_y_not_2_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      VCOL_asn_24_itm_1 <= 1'b0;
      VCOL_asn_12_itm_2 <= 10'b0000000000;
    end
    else if ( rst ) begin
      VCOL_asn_24_itm_1 <= 1'b0;
      VCOL_asn_12_itm_2 <= 10'b0000000000;
    end
    else if ( VCOL_and_15_cse ) begin
      VCOL_asn_24_itm_1 <= VCOL_equal_1_tmp;
      VCOL_asn_12_itm_2 <= VCOL_asn_12_itm_1;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      VCOL_stage_0_1 <= 1'b0;
      VCOL_stage_0_2 <= 1'b0;
      VCOL_stage_0_3 <= 1'b0;
      reg_dat_in_rsci_oswt_cse <= 1'b0;
      reg_dat_out_rsci_oswt_cse <= 1'b0;
      reg_line_buf0_r_pixelType_rsci_cgo_cse <= 1'b0;
      VCOL_asn_12_itm <= 10'b0000000000;
    end
    else if ( rst ) begin
      VCOL_stage_0_1 <= 1'b0;
      VCOL_stage_0_2 <= 1'b0;
      VCOL_stage_0_3 <= 1'b0;
      reg_dat_in_rsci_oswt_cse <= 1'b0;
      reg_dat_out_rsci_oswt_cse <= 1'b0;
      reg_line_buf0_r_pixelType_rsci_cgo_cse <= 1'b0;
      VCOL_asn_12_itm <= 10'b0000000000;
    end
    else if ( run_wen ) begin
      VCOL_stage_0_1 <= VCOL_VCOL_and_cse | VROW_y_or_cse;
      VCOL_stage_0_2 <= VCOL_VCOL_and_cse & (~ VROW_y_or_cse);
      VCOL_stage_0_3 <= VCOL_stage_0_2 & (~ VROW_y_or_cse);
      reg_dat_in_rsci_oswt_cse <= VCOL_stage_0_1 & (~ operator_10_false_acc_itm_10)
          & nand_3_cse & (fsm_output[1]);
      reg_dat_out_rsci_oswt_cse <= or_dcpl_34 & VCOL_stage_0_3 & (fsm_output[1]);
      reg_line_buf0_r_pixelType_rsci_cgo_cse <= and_95_rmff;
      VCOL_asn_12_itm <= MUX_v_10_2_2(10'b0000000000, VROW_y_mux_nl, VCOL_nor_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      VCOL_x_sva <= 11'b00000000000;
    end
    else if ( rst ) begin
      VCOL_x_sva <= 11'b00000000000;
    end
    else if ( (VCOL_stage_0_2 | (fsm_output[2]) | (fsm_output[0])) & run_wen ) begin
      VCOL_x_sva <= MUX_v_11_2_2(11'b00000000000, VCOL_x_sva_mx1, not_nl);
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      VCOL_asn_12_itm_1 <= 10'b0000000000;
      operator_11_false_operator_11_false_slc_VCOL_x_0_2_itm_1 <= 1'b0;
      VCOL_if_slc_operator_10_false_acc_10_svs_1 <= 1'b0;
    end
    else if ( rst ) begin
      VCOL_asn_12_itm_1 <= 10'b0000000000;
      operator_11_false_operator_11_false_slc_VCOL_x_0_2_itm_1 <= 1'b0;
      VCOL_if_slc_operator_10_false_acc_10_svs_1 <= 1'b0;
    end
    else if ( VCOL_and_17_cse ) begin
      VCOL_asn_12_itm_1 <= VCOL_asn_12_itm;
      operator_11_false_operator_11_false_slc_VCOL_x_0_2_itm_1 <= VCOL_x_sva_mx1[0];
      VCOL_if_slc_operator_10_false_acc_10_svs_1 <= operator_10_false_acc_itm_10;
    end
  end
  always @(posedge clk) begin
    if ( and_153_cse ) begin
      pix0_r_pixelType_lpi_3_dfm <= VCOL_mux_17_cse;
      pix0_g_pixelType_lpi_3_dfm <= VCOL_mux_16_cse;
      pix0_b_pixelType_lpi_3_dfm <= VCOL_mux_15_cse;
    end
  end
  always @(posedge clk) begin
    if ( pix0_b_pixelType_and_3_cse ) begin
      pix0_b_pixelType_lpi_3 <= MUX_v_8_2_2(pix0_b_pixelType_lpi_3_dfm, VCOL_qr_5_lpi_3_dfm_mx1,
          pix0_b_pixelType_or_1_cse);
      pix0_g_pixelType_lpi_3 <= MUX_v_8_2_2(pix0_g_pixelType_lpi_3_dfm, VCOL_qr_4_lpi_3_dfm_mx0,
          pix0_b_pixelType_or_1_cse);
      pix0_r_pixelType_lpi_3 <= MUX_v_8_2_2(pix0_r_pixelType_lpi_3_dfm, VCOL_qr_3_lpi_3_dfm_mx1,
          pix0_b_pixelType_or_1_cse);
    end
  end
  always @(posedge clk) begin
    if ( and_160_cse ) begin
      rdbuf0_pix_b_pixelType_lpi_3 <= rdbuf0_pix_b_pixelType_lpi_3_mx0;
      rdbuf0_pix_g_pixelType_lpi_3 <= rdbuf0_pix_g_pixelType_lpi_3_mx0;
      rdbuf0_pix_r_pixelType_lpi_3 <= rdbuf0_pix_r_pixelType_lpi_3_mx0;
    end
  end
  always @(posedge clk) begin
    if ( VCOL_if_2_and_cse ) begin
      VCOL_if_2_read_mem_line_buf1_r_pixelType_rsc_cse_lpi_3_11_6 <= line_buf1_r_pixelType_rsci_q_d[11:6];
      VCOL_if_2_read_mem_line_buf1_b_pixelType_rsc_cse_lpi_3 <= line_buf1_b_pixelType_rsci_q_d;
      VCOL_if_2_read_mem_line_buf1_g_pixelType_rsc_cse_lpi_3 <= line_buf1_g_pixelType_rsci_q_d;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse <= 1'b0;
    end
    else if ( rst ) begin
      reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse <= 1'b0;
    end
    else if ( run_wen & or_111_cse & VCOL_stage_0_2 ) begin
      reg_operator_11_false_operator_11_false_slc_VCOL_x_0_9_itm_1_cse <= VCOL_x_sva[0];
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      VCOL_nor_1_itm_2 <= 1'b0;
    end
    else if ( rst ) begin
      VCOL_nor_1_itm_2 <= 1'b0;
    end
    else if ( run_wen & or_tmp_2 & VCOL_stage_0_2 ) begin
      VCOL_nor_1_itm_2 <= VCOL_nor_1_itm_1;
    end
  end
  always @(posedge clk) begin
    if ( wrbuf0_pix_b_pixelType_and_cse ) begin
      wrbuf0_pix_b_pixelType_7_0_lpi_4 <= VCOL_mux_15_cse;
      wrbuf0_pix_g_pixelType_7_0_lpi_4 <= VCOL_mux_16_cse;
      wrbuf0_pix_r_pixelType_7_0_lpi_4 <= VCOL_mux_17_cse;
    end
  end
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      VCOL_nor_1_itm_1 <= 1'b0;
    end
    else if ( rst ) begin
      VCOL_nor_1_itm_1 <= 1'b0;
    end
    else if ( run_wen & ((VCOL_asn_12_itm!=10'b0000000000)) & VCOL_VCOL_and_cse )
        begin
      VCOL_nor_1_itm_1 <= ~((VROW_y_sva[9:1]!=9'b000000000));
    end
  end
  assign VCOL_VCOL_mux1h_1_nl = MUX1HOT_v_6_3_2((VCOL_qr_4_lpi_3_dfm_mx0[7:2]), (VCOL_if_2_read_mem_line_buf1_g_pixelType_rsc_cse_lpi_3_dfm_mx0[5:0]),
      (VCOL_if_2_read_mem_line_buf1_g_pixelType_rsc_cse_lpi_3_dfm_mx0[11:6]), {(~
      VCOL_unequal_tmp_1) , VCOL_and_9 , VCOL_and_7});
  assign operator_40_true_5_nor_nl = ~((pix0_g_pixelType_lpi_3_dfm_2_mx0[1:0]!=2'b00));
  assign nl_operator_40_true_2_acc_1_nl = conv_u2u_6_7(VCOL_VCOL_mux1h_1_nl) + conv_u2u_6_7(~
      (pix0_g_pixelType_lpi_3_dfm_2_mx0[7:2])) + conv_u2u_1_7(operator_40_true_5_nor_nl);
  assign operator_40_true_2_acc_1_nl = nl_operator_40_true_2_acc_1_nl[6:0];
  assign VCOL_VCOL_mux1h_2_nl = MUX1HOT_v_6_3_2(VCOL_qr_5_lpi_3_dfm_mx0_7_2, (VCOL_if_2_read_mem_line_buf1_b_pixelType_rsc_cse_lpi_3_dfm_mx0[5:0]),
      (VCOL_if_2_read_mem_line_buf1_b_pixelType_rsc_cse_lpi_3_dfm_mx0[11:6]), {(~
      VCOL_unequal_tmp_1) , VCOL_and_9 , VCOL_and_7});
  assign operator_40_true_2_nor_nl = ~((pix0_r_pixelType_lpi_3_dfm_2_mx0[1:0]!=2'b00));
  assign nl_operator_40_true_2_acc_2_nl = conv_u2u_6_7(VCOL_VCOL_mux1h_2_nl) + conv_u2u_6_7(~
      (pix0_b_pixelType_lpi_3_dfm_2_mx0[7:2])) + conv_u2u_1_7(operator_40_true_2_nor_nl);
  assign operator_40_true_2_acc_2_nl = nl_operator_40_true_2_acc_2_nl[6:0];
  assign operator_40_true_8_nor_nl = ~((pix0_b_pixelType_lpi_3_dfm_2_mx0[1:0]!=2'b00));
  assign nl_operator_40_true_2_acc_nl = conv_u2u_7_9(operator_40_true_2_acc_1_nl)
      + conv_u2u_7_9(operator_40_true_2_acc_2_nl) + conv_u2u_6_9(~ (pix0_r_pixelType_lpi_3_dfm_2_mx0[7:2]))
      + conv_u2u_1_9(operator_40_true_8_nor_nl);
  assign operator_40_true_2_acc_nl = nl_operator_40_true_2_acc_nl[8:0];
  assign VCOL_VCOL_mux1h_nl = MUX1HOT_v_6_3_2(VCOL_qr_3_lpi_3_dfm_mx0_7_2, (line_buf1_r_pixelType_rsci_q_d[5:0]),
      VCOL_if_2_read_mem_line_buf1_r_pixelType_rsc_cse_lpi_3_11_6, {(~ VCOL_unequal_tmp_1)
      , VCOL_and_9 , VCOL_and_7});
  assign nl_dy_rsci_idat  = operator_40_true_2_acc_nl + ({3'b101 , VCOL_VCOL_mux1h_nl});
  assign nl_dat_out_rsci_idat  = conv_u2u_7_8(VCOL_qr_4_lpi_3_dfm_mx0[7:1]) + conv_u2u_6_8(VCOL_qr_3_lpi_3_dfm_mx0_7_2)
      + conv_u2u_6_8(VCOL_qr_5_lpi_3_dfm_mx0_7_2);
  assign VROW_y_not_2_nl = ~ (fsm_output[0]);
  assign VROW_y_mux_nl = MUX_v_10_2_2(VROW_y_sva, (z_out[9:0]), fsm_output[2]);
  assign VCOL_nor_nl = ~((fsm_output[0]) | (fsm_output[3]));
  assign not_nl = ~ VROW_y_or_cse;
  assign VROW_VROW_and_1_nl = (VCOL_x_sva[10]) & (fsm_output[1]);
  assign VROW_mux_2_nl = MUX_v_10_2_2(VROW_y_sva, (VCOL_x_sva[9:0]), fsm_output[1]);
  assign nl_z_out = ({VROW_VROW_and_1_nl , VROW_mux_2_nl}) + 11'b00000000001;
  assign z_out = nl_z_out[10:0];

  function automatic [5:0] MUX1HOT_v_6_3_2;
    input [5:0] input_2;
    input [5:0] input_1;
    input [5:0] input_0;
    input [2:0] sel;
    reg [5:0] result;
  begin
    result = input_0 & {6{sel[0]}};
    result = result | (input_1 & {6{sel[1]}});
    result = result | (input_2 & {6{sel[2]}});
    MUX1HOT_v_6_3_2 = result;
  end
  endfunction


  function automatic [7:0] MUX1HOT_v_8_3_2;
    input [7:0] input_2;
    input [7:0] input_1;
    input [7:0] input_0;
    input [2:0] sel;
    reg [7:0] result;
  begin
    result = input_0 & {8{sel[0]}};
    result = result | (input_1 & {8{sel[1]}});
    result = result | (input_2 & {8{sel[2]}});
    MUX1HOT_v_8_3_2 = result;
  end
  endfunction


  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [9:0] MUX_v_10_2_2;
    input [9:0] input_0;
    input [9:0] input_1;
    input  sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function automatic [10:0] MUX_v_11_2_2;
    input [10:0] input_0;
    input [10:0] input_1;
    input  sel;
    reg [10:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_11_2_2 = result;
  end
  endfunction


  function automatic [11:0] MUX_v_12_2_2;
    input [11:0] input_0;
    input [11:0] input_1;
    input  sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function automatic [15:0] MUX_v_16_2_2;
    input [15:0] input_0;
    input [15:0] input_1;
    input  sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function automatic [5:0] MUX_v_6_2_2;
    input [5:0] input_0;
    input [5:0] input_1;
    input  sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function automatic [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function automatic [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 =  {1'b0, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_1_7 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_7 = {{6{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_1_9 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_9 = {{8{1'b0}}, vector};
  end
  endfunction


  function automatic [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_6_9 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_9 = {{3{1'b0}}, vector};
  end
  endfunction


  function automatic [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function automatic [8:0] conv_u2u_7_9 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_9 = {{2{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer_struct
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer_struct (
  clk, rst, arst_n, dat_in_rsc_dat_eol, dat_in_rsc_dat_sof, dat_in_rsc_dat_dummy,
      dat_in_rsc_dat_b_pixelType, dat_in_rsc_dat_g_pixelType, dat_in_rsc_dat_r_pixelType,
      dat_in_rsc_vld, dat_in_rsc_rdy, widthIn, heightIn, dat_out_rsc_dat, dat_out_rsc_vld,
      dat_out_rsc_rdy, dat_rgb_rsc_dat_eol, dat_rgb_rsc_dat_sof, dat_rgb_rsc_dat_dummy,
      dat_rgb_rsc_dat_b_pixelType, dat_rgb_rsc_dat_g_pixelType, dat_rgb_rsc_dat_r_pixelType,
      dat_rgb_rsc_vld, dat_rgb_rsc_rdy, dy_rsc_dat, dy_rsc_vld, dy_rsc_rdy, line_buf0_r_pixelType_rsc_en,
      line_buf0_r_pixelType_rsc_q, line_buf0_r_pixelType_rsc_we, line_buf0_r_pixelType_rsc_d,
      line_buf0_r_pixelType_rsc_adr, line_buf0_g_pixelType_rsc_en, line_buf0_g_pixelType_rsc_q,
      line_buf0_g_pixelType_rsc_we, line_buf0_g_pixelType_rsc_d, line_buf0_g_pixelType_rsc_adr,
      line_buf0_b_pixelType_rsc_en, line_buf0_b_pixelType_rsc_q, line_buf0_b_pixelType_rsc_we,
      line_buf0_b_pixelType_rsc_d, line_buf0_b_pixelType_rsc_adr, line_buf1_r_pixelType_rsc_en,
      line_buf1_r_pixelType_rsc_q, line_buf1_r_pixelType_rsc_we, line_buf1_r_pixelType_rsc_d,
      line_buf1_r_pixelType_rsc_adr, line_buf1_g_pixelType_rsc_en, line_buf1_g_pixelType_rsc_q,
      line_buf1_g_pixelType_rsc_we, line_buf1_g_pixelType_rsc_d, line_buf1_g_pixelType_rsc_adr,
      line_buf1_b_pixelType_rsc_en, line_buf1_b_pixelType_rsc_q, line_buf1_b_pixelType_rsc_we,
      line_buf1_b_pixelType_rsc_d, line_buf1_b_pixelType_rsc_adr
);
  input clk;
  input rst;
  input arst_n;
  input dat_in_rsc_dat_eol;
  input dat_in_rsc_dat_sof;
  input [7:0] dat_in_rsc_dat_dummy;
  input [7:0] dat_in_rsc_dat_b_pixelType;
  input [7:0] dat_in_rsc_dat_g_pixelType;
  input [7:0] dat_in_rsc_dat_r_pixelType;
  input dat_in_rsc_vld;
  output dat_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [7:0] dat_out_rsc_dat;
  output dat_out_rsc_vld;
  input dat_out_rsc_rdy;
  output dat_rgb_rsc_dat_eol;
  output dat_rgb_rsc_dat_sof;
  output [7:0] dat_rgb_rsc_dat_dummy;
  output [7:0] dat_rgb_rsc_dat_b_pixelType;
  output [7:0] dat_rgb_rsc_dat_g_pixelType;
  output [7:0] dat_rgb_rsc_dat_r_pixelType;
  output dat_rgb_rsc_vld;
  input dat_rgb_rsc_rdy;
  output [8:0] dy_rsc_dat;
  output dy_rsc_vld;
  input dy_rsc_rdy;
  output line_buf0_r_pixelType_rsc_en;
  input [15:0] line_buf0_r_pixelType_rsc_q;
  output line_buf0_r_pixelType_rsc_we;
  output [15:0] line_buf0_r_pixelType_rsc_d;
  output [9:0] line_buf0_r_pixelType_rsc_adr;
  output line_buf0_g_pixelType_rsc_en;
  input [15:0] line_buf0_g_pixelType_rsc_q;
  output line_buf0_g_pixelType_rsc_we;
  output [15:0] line_buf0_g_pixelType_rsc_d;
  output [9:0] line_buf0_g_pixelType_rsc_adr;
  output line_buf0_b_pixelType_rsc_en;
  input [15:0] line_buf0_b_pixelType_rsc_q;
  output line_buf0_b_pixelType_rsc_we;
  output [15:0] line_buf0_b_pixelType_rsc_d;
  output [9:0] line_buf0_b_pixelType_rsc_adr;
  output line_buf1_r_pixelType_rsc_en;
  input [11:0] line_buf1_r_pixelType_rsc_q;
  output line_buf1_r_pixelType_rsc_we;
  output [11:0] line_buf1_r_pixelType_rsc_d;
  output [9:0] line_buf1_r_pixelType_rsc_adr;
  output line_buf1_g_pixelType_rsc_en;
  input [11:0] line_buf1_g_pixelType_rsc_q;
  output line_buf1_g_pixelType_rsc_we;
  output [11:0] line_buf1_g_pixelType_rsc_d;
  output [9:0] line_buf1_g_pixelType_rsc_adr;
  output line_buf1_b_pixelType_rsc_en;
  input [11:0] line_buf1_b_pixelType_rsc_q;
  output line_buf1_b_pixelType_rsc_we;
  output [11:0] line_buf1_b_pixelType_rsc_d;
  output [9:0] line_buf1_b_pixelType_rsc_adr;


  // Interconnect Declarations
  wire [15:0] line_buf0_r_pixelType_rsci_d_d;
  wire line_buf0_r_pixelType_rsci_en_d;
  wire [15:0] line_buf0_r_pixelType_rsci_q_d;
  wire [15:0] line_buf0_g_pixelType_rsci_d_d;
  wire [15:0] line_buf0_g_pixelType_rsci_q_d;
  wire [15:0] line_buf0_b_pixelType_rsci_d_d;
  wire [15:0] line_buf0_b_pixelType_rsci_q_d;
  wire [11:0] line_buf1_r_pixelType_rsci_d_d;
  wire [11:0] line_buf1_r_pixelType_rsci_q_d;
  wire [11:0] line_buf1_g_pixelType_rsci_d_d;
  wire [11:0] line_buf1_g_pixelType_rsci_q_d;
  wire [11:0] line_buf1_b_pixelType_rsci_d_d;
  wire [11:0] line_buf1_b_pixelType_rsci_q_d;
  wire [33:0] dat_rgb_rsc_dat;
  wire [9:0] line_buf0_r_pixelType_rsci_adr_d_iff;
  wire line_buf0_r_pixelType_rsci_we_d_iff;
  wire line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_iff;


  // Interconnect Declarations for Component Instantiations 
  wire [33:0] nl_EdgeDetect_IP_EdgeDetect_VerDer_run_inst_dat_in_rsc_dat;
  assign nl_EdgeDetect_IP_EdgeDetect_VerDer_run_inst_dat_in_rsc_dat = {dat_in_rsc_dat_eol
      , dat_in_rsc_dat_sof , dat_in_rsc_dat_dummy , dat_in_rsc_dat_b_pixelType ,
      dat_in_rsc_dat_g_pixelType , dat_in_rsc_dat_r_pixelType};
  EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_7_16_10_963_963_16_5_gen
      line_buf0_r_pixelType_rsci (
      .en(line_buf0_r_pixelType_rsc_en),
      .q(line_buf0_r_pixelType_rsc_q),
      .we(line_buf0_r_pixelType_rsc_we),
      .d(line_buf0_r_pixelType_rsc_d),
      .adr(line_buf0_r_pixelType_rsc_adr),
      .adr_d(line_buf0_r_pixelType_rsci_adr_d_iff),
      .d_d(line_buf0_r_pixelType_rsci_d_d),
      .en_d(line_buf0_r_pixelType_rsci_en_d),
      .we_d(line_buf0_r_pixelType_rsci_we_d_iff),
      .q_d(line_buf0_r_pixelType_rsci_q_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_iff),
      .port_0_rw_ram_ir_internal_WMASK_B_d(line_buf0_r_pixelType_rsci_we_d_iff)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_8_16_10_963_963_16_5_gen
      line_buf0_g_pixelType_rsci (
      .en(line_buf0_g_pixelType_rsc_en),
      .q(line_buf0_g_pixelType_rsc_q),
      .we(line_buf0_g_pixelType_rsc_we),
      .d(line_buf0_g_pixelType_rsc_d),
      .adr(line_buf0_g_pixelType_rsc_adr),
      .adr_d(line_buf0_r_pixelType_rsci_adr_d_iff),
      .d_d(line_buf0_g_pixelType_rsci_d_d),
      .en_d(line_buf0_r_pixelType_rsci_en_d),
      .we_d(line_buf0_r_pixelType_rsci_we_d_iff),
      .q_d(line_buf0_g_pixelType_rsci_q_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_iff),
      .port_0_rw_ram_ir_internal_WMASK_B_d(line_buf0_r_pixelType_rsci_we_d_iff)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_9_16_10_963_963_16_5_gen
      line_buf0_b_pixelType_rsci (
      .en(line_buf0_b_pixelType_rsc_en),
      .q(line_buf0_b_pixelType_rsc_q),
      .we(line_buf0_b_pixelType_rsc_we),
      .d(line_buf0_b_pixelType_rsc_d),
      .adr(line_buf0_b_pixelType_rsc_adr),
      .adr_d(line_buf0_r_pixelType_rsci_adr_d_iff),
      .d_d(line_buf0_b_pixelType_rsci_d_d),
      .en_d(line_buf0_r_pixelType_rsci_en_d),
      .we_d(line_buf0_r_pixelType_rsci_we_d_iff),
      .q_d(line_buf0_b_pixelType_rsci_q_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_iff),
      .port_0_rw_ram_ir_internal_WMASK_B_d(line_buf0_r_pixelType_rsci_we_d_iff)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_10_12_10_963_963_12_5_gen
      line_buf1_r_pixelType_rsci (
      .en(line_buf1_r_pixelType_rsc_en),
      .q(line_buf1_r_pixelType_rsc_q),
      .we(line_buf1_r_pixelType_rsc_we),
      .d(line_buf1_r_pixelType_rsc_d),
      .adr(line_buf1_r_pixelType_rsc_adr),
      .adr_d(line_buf0_r_pixelType_rsci_adr_d_iff),
      .d_d(line_buf1_r_pixelType_rsci_d_d),
      .en_d(line_buf0_r_pixelType_rsci_en_d),
      .we_d(line_buf0_r_pixelType_rsci_we_d_iff),
      .q_d(line_buf1_r_pixelType_rsci_q_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_iff),
      .port_0_rw_ram_ir_internal_WMASK_B_d(line_buf0_r_pixelType_rsci_we_d_iff)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_11_12_10_963_963_12_5_gen
      line_buf1_g_pixelType_rsci (
      .en(line_buf1_g_pixelType_rsc_en),
      .q(line_buf1_g_pixelType_rsc_q),
      .we(line_buf1_g_pixelType_rsc_we),
      .d(line_buf1_g_pixelType_rsc_d),
      .adr(line_buf1_g_pixelType_rsc_adr),
      .adr_d(line_buf0_r_pixelType_rsci_adr_d_iff),
      .d_d(line_buf1_g_pixelType_rsci_d_d),
      .en_d(line_buf0_r_pixelType_rsci_en_d),
      .we_d(line_buf0_r_pixelType_rsci_we_d_iff),
      .q_d(line_buf1_g_pixelType_rsci_q_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_iff),
      .port_0_rw_ram_ir_internal_WMASK_B_d(line_buf0_r_pixelType_rsci_we_d_iff)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_ccs_sample_mem_ccs_ram_sync_singleport_rwport_en_12_12_10_963_963_12_5_gen
      line_buf1_b_pixelType_rsci (
      .en(line_buf1_b_pixelType_rsc_en),
      .q(line_buf1_b_pixelType_rsc_q),
      .we(line_buf1_b_pixelType_rsc_we),
      .d(line_buf1_b_pixelType_rsc_d),
      .adr(line_buf1_b_pixelType_rsc_adr),
      .adr_d(line_buf0_r_pixelType_rsci_adr_d_iff),
      .d_d(line_buf1_b_pixelType_rsci_d_d),
      .en_d(line_buf0_r_pixelType_rsci_en_d),
      .we_d(line_buf0_r_pixelType_rsci_we_d_iff),
      .q_d(line_buf1_b_pixelType_rsci_q_d),
      .port_0_rw_ram_ir_internal_RMASK_B_d(line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_iff),
      .port_0_rw_ram_ir_internal_WMASK_B_d(line_buf0_r_pixelType_rsci_we_d_iff)
    );
  EdgeDetect_IP_EdgeDetect_VerDer_run EdgeDetect_IP_EdgeDetect_VerDer_run_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dat_in_rsc_dat(nl_EdgeDetect_IP_EdgeDetect_VerDer_run_inst_dat_in_rsc_dat[33:0]),
      .dat_in_rsc_vld(dat_in_rsc_vld),
      .dat_in_rsc_rdy(dat_in_rsc_rdy),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .dat_out_rsc_dat(dat_out_rsc_dat),
      .dat_out_rsc_vld(dat_out_rsc_vld),
      .dat_out_rsc_rdy(dat_out_rsc_rdy),
      .dat_rgb_rsc_dat(dat_rgb_rsc_dat),
      .dat_rgb_rsc_vld(dat_rgb_rsc_vld),
      .dat_rgb_rsc_rdy(dat_rgb_rsc_rdy),
      .dy_rsc_dat(dy_rsc_dat),
      .dy_rsc_vld(dy_rsc_vld),
      .dy_rsc_rdy(dy_rsc_rdy),
      .line_buf0_r_pixelType_rsci_d_d(line_buf0_r_pixelType_rsci_d_d),
      .line_buf0_r_pixelType_rsci_en_d(line_buf0_r_pixelType_rsci_en_d),
      .line_buf0_r_pixelType_rsci_q_d(line_buf0_r_pixelType_rsci_q_d),
      .line_buf0_g_pixelType_rsci_d_d(line_buf0_g_pixelType_rsci_d_d),
      .line_buf0_g_pixelType_rsci_q_d(line_buf0_g_pixelType_rsci_q_d),
      .line_buf0_b_pixelType_rsci_d_d(line_buf0_b_pixelType_rsci_d_d),
      .line_buf0_b_pixelType_rsci_q_d(line_buf0_b_pixelType_rsci_q_d),
      .line_buf1_r_pixelType_rsci_d_d(line_buf1_r_pixelType_rsci_d_d),
      .line_buf1_r_pixelType_rsci_q_d(line_buf1_r_pixelType_rsci_q_d),
      .line_buf1_g_pixelType_rsci_d_d(line_buf1_g_pixelType_rsci_d_d),
      .line_buf1_g_pixelType_rsci_q_d(line_buf1_g_pixelType_rsci_q_d),
      .line_buf1_b_pixelType_rsci_d_d(line_buf1_b_pixelType_rsci_d_d),
      .line_buf1_b_pixelType_rsci_q_d(line_buf1_b_pixelType_rsci_q_d),
      .line_buf0_r_pixelType_rsci_adr_d_pff(line_buf0_r_pixelType_rsci_adr_d_iff),
      .line_buf0_r_pixelType_rsci_we_d_pff(line_buf0_r_pixelType_rsci_we_d_iff),
      .line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_pff(line_buf0_r_pixelType_rsci_port_0_rw_ram_ir_internal_RMASK_B_d_iff)
    );
  assign dat_rgb_rsc_dat_r_pixelType = dat_rgb_rsc_dat[7:0];
  assign dat_rgb_rsc_dat_g_pixelType = dat_rgb_rsc_dat[15:8];
  assign dat_rgb_rsc_dat_b_pixelType = dat_rgb_rsc_dat[23:16];
  assign dat_rgb_rsc_dat_dummy = dat_rgb_rsc_dat[31:24];
  assign dat_rgb_rsc_dat_sof = dat_rgb_rsc_dat[32];
  assign dat_rgb_rsc_dat_eol = dat_rgb_rsc_dat[33];
endmodule

// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_VerDer
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_VerDer (
  clk, rst, arst_n, dat_in_rsc_dat, dat_in_rsc_vld, dat_in_rsc_rdy, widthIn, heightIn,
      dat_out_rsc_dat, dat_out_rsc_vld, dat_out_rsc_rdy, dat_rgb_rsc_dat, dat_rgb_rsc_vld,
      dat_rgb_rsc_rdy, dy_rsc_dat, dy_rsc_vld, dy_rsc_rdy, line_buf0_r_pixelType_rsc_en,
      line_buf0_r_pixelType_rsc_q, line_buf0_r_pixelType_rsc_we, line_buf0_r_pixelType_rsc_d,
      line_buf0_r_pixelType_rsc_adr, line_buf0_g_pixelType_rsc_en, line_buf0_g_pixelType_rsc_q,
      line_buf0_g_pixelType_rsc_we, line_buf0_g_pixelType_rsc_d, line_buf0_g_pixelType_rsc_adr,
      line_buf0_b_pixelType_rsc_en, line_buf0_b_pixelType_rsc_q, line_buf0_b_pixelType_rsc_we,
      line_buf0_b_pixelType_rsc_d, line_buf0_b_pixelType_rsc_adr, line_buf1_r_pixelType_rsc_en,
      line_buf1_r_pixelType_rsc_q, line_buf1_r_pixelType_rsc_we, line_buf1_r_pixelType_rsc_d,
      line_buf1_r_pixelType_rsc_adr, line_buf1_g_pixelType_rsc_en, line_buf1_g_pixelType_rsc_q,
      line_buf1_g_pixelType_rsc_we, line_buf1_g_pixelType_rsc_d, line_buf1_g_pixelType_rsc_adr,
      line_buf1_b_pixelType_rsc_en, line_buf1_b_pixelType_rsc_q, line_buf1_b_pixelType_rsc_we,
      line_buf1_b_pixelType_rsc_d, line_buf1_b_pixelType_rsc_adr
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] dat_in_rsc_dat;
  input dat_in_rsc_vld;
  output dat_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [7:0] dat_out_rsc_dat;
  output dat_out_rsc_vld;
  input dat_out_rsc_rdy;
  output [33:0] dat_rgb_rsc_dat;
  output dat_rgb_rsc_vld;
  input dat_rgb_rsc_rdy;
  output [8:0] dy_rsc_dat;
  output dy_rsc_vld;
  input dy_rsc_rdy;
  output line_buf0_r_pixelType_rsc_en;
  input [15:0] line_buf0_r_pixelType_rsc_q;
  output line_buf0_r_pixelType_rsc_we;
  output [15:0] line_buf0_r_pixelType_rsc_d;
  output [9:0] line_buf0_r_pixelType_rsc_adr;
  output line_buf0_g_pixelType_rsc_en;
  input [15:0] line_buf0_g_pixelType_rsc_q;
  output line_buf0_g_pixelType_rsc_we;
  output [15:0] line_buf0_g_pixelType_rsc_d;
  output [9:0] line_buf0_g_pixelType_rsc_adr;
  output line_buf0_b_pixelType_rsc_en;
  input [15:0] line_buf0_b_pixelType_rsc_q;
  output line_buf0_b_pixelType_rsc_we;
  output [15:0] line_buf0_b_pixelType_rsc_d;
  output [9:0] line_buf0_b_pixelType_rsc_adr;
  output line_buf1_r_pixelType_rsc_en;
  input [11:0] line_buf1_r_pixelType_rsc_q;
  output line_buf1_r_pixelType_rsc_we;
  output [11:0] line_buf1_r_pixelType_rsc_d;
  output [9:0] line_buf1_r_pixelType_rsc_adr;
  output line_buf1_g_pixelType_rsc_en;
  input [11:0] line_buf1_g_pixelType_rsc_q;
  output line_buf1_g_pixelType_rsc_we;
  output [11:0] line_buf1_g_pixelType_rsc_d;
  output [9:0] line_buf1_g_pixelType_rsc_adr;
  output line_buf1_b_pixelType_rsc_en;
  input [11:0] line_buf1_b_pixelType_rsc_q;
  output line_buf1_b_pixelType_rsc_we;
  output [11:0] line_buf1_b_pixelType_rsc_d;
  output [9:0] line_buf1_b_pixelType_rsc_adr;


  // Interconnect Declarations
  wire dat_rgb_rsc_dat_eol;
  wire dat_rgb_rsc_dat_sof;
  wire [7:0] dat_rgb_rsc_dat_dummy;
  wire [7:0] dat_rgb_rsc_dat_b_pixelType;
  wire [7:0] dat_rgb_rsc_dat_g_pixelType;
  wire [7:0] dat_rgb_rsc_dat_r_pixelType;


  // Interconnect Declarations for Component Instantiations 
  wire  nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_eol;
  assign nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_eol = dat_in_rsc_dat[33];
  wire  nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_sof;
  assign nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_sof = dat_in_rsc_dat[32];
  wire [7:0] nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_dummy;
  assign nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_dummy = dat_in_rsc_dat[31:24];
  wire [7:0] nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_b_pixelType;
  assign nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_b_pixelType
      = dat_in_rsc_dat[23:16];
  wire [7:0] nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_g_pixelType;
  assign nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_g_pixelType
      = dat_in_rsc_dat[15:8];
  wire [7:0] nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_r_pixelType;
  assign nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_r_pixelType
      = dat_in_rsc_dat[7:0];
  EdgeDetect_IP_EdgeDetect_VerDer_struct EdgeDetect_IP_EdgeDetect_VerDer_struct_inst
      (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dat_in_rsc_dat_eol(nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_eol),
      .dat_in_rsc_dat_sof(nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_sof),
      .dat_in_rsc_dat_dummy(nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_dummy[7:0]),
      .dat_in_rsc_dat_b_pixelType(nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_b_pixelType[7:0]),
      .dat_in_rsc_dat_g_pixelType(nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_g_pixelType[7:0]),
      .dat_in_rsc_dat_r_pixelType(nl_EdgeDetect_IP_EdgeDetect_VerDer_struct_inst_dat_in_rsc_dat_r_pixelType[7:0]),
      .dat_in_rsc_vld(dat_in_rsc_vld),
      .dat_in_rsc_rdy(dat_in_rsc_rdy),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .dat_out_rsc_dat(dat_out_rsc_dat),
      .dat_out_rsc_vld(dat_out_rsc_vld),
      .dat_out_rsc_rdy(dat_out_rsc_rdy),
      .dat_rgb_rsc_dat_eol(dat_rgb_rsc_dat_eol),
      .dat_rgb_rsc_dat_sof(dat_rgb_rsc_dat_sof),
      .dat_rgb_rsc_dat_dummy(dat_rgb_rsc_dat_dummy),
      .dat_rgb_rsc_dat_b_pixelType(dat_rgb_rsc_dat_b_pixelType),
      .dat_rgb_rsc_dat_g_pixelType(dat_rgb_rsc_dat_g_pixelType),
      .dat_rgb_rsc_dat_r_pixelType(dat_rgb_rsc_dat_r_pixelType),
      .dat_rgb_rsc_vld(dat_rgb_rsc_vld),
      .dat_rgb_rsc_rdy(dat_rgb_rsc_rdy),
      .dy_rsc_dat(dy_rsc_dat),
      .dy_rsc_vld(dy_rsc_vld),
      .dy_rsc_rdy(dy_rsc_rdy),
      .line_buf0_r_pixelType_rsc_en(line_buf0_r_pixelType_rsc_en),
      .line_buf0_r_pixelType_rsc_q(line_buf0_r_pixelType_rsc_q),
      .line_buf0_r_pixelType_rsc_we(line_buf0_r_pixelType_rsc_we),
      .line_buf0_r_pixelType_rsc_d(line_buf0_r_pixelType_rsc_d),
      .line_buf0_r_pixelType_rsc_adr(line_buf0_r_pixelType_rsc_adr),
      .line_buf0_g_pixelType_rsc_en(line_buf0_g_pixelType_rsc_en),
      .line_buf0_g_pixelType_rsc_q(line_buf0_g_pixelType_rsc_q),
      .line_buf0_g_pixelType_rsc_we(line_buf0_g_pixelType_rsc_we),
      .line_buf0_g_pixelType_rsc_d(line_buf0_g_pixelType_rsc_d),
      .line_buf0_g_pixelType_rsc_adr(line_buf0_g_pixelType_rsc_adr),
      .line_buf0_b_pixelType_rsc_en(line_buf0_b_pixelType_rsc_en),
      .line_buf0_b_pixelType_rsc_q(line_buf0_b_pixelType_rsc_q),
      .line_buf0_b_pixelType_rsc_we(line_buf0_b_pixelType_rsc_we),
      .line_buf0_b_pixelType_rsc_d(line_buf0_b_pixelType_rsc_d),
      .line_buf0_b_pixelType_rsc_adr(line_buf0_b_pixelType_rsc_adr),
      .line_buf1_r_pixelType_rsc_en(line_buf1_r_pixelType_rsc_en),
      .line_buf1_r_pixelType_rsc_q(line_buf1_r_pixelType_rsc_q),
      .line_buf1_r_pixelType_rsc_we(line_buf1_r_pixelType_rsc_we),
      .line_buf1_r_pixelType_rsc_d(line_buf1_r_pixelType_rsc_d),
      .line_buf1_r_pixelType_rsc_adr(line_buf1_r_pixelType_rsc_adr),
      .line_buf1_g_pixelType_rsc_en(line_buf1_g_pixelType_rsc_en),
      .line_buf1_g_pixelType_rsc_q(line_buf1_g_pixelType_rsc_q),
      .line_buf1_g_pixelType_rsc_we(line_buf1_g_pixelType_rsc_we),
      .line_buf1_g_pixelType_rsc_d(line_buf1_g_pixelType_rsc_d),
      .line_buf1_g_pixelType_rsc_adr(line_buf1_g_pixelType_rsc_adr),
      .line_buf1_b_pixelType_rsc_en(line_buf1_b_pixelType_rsc_en),
      .line_buf1_b_pixelType_rsc_q(line_buf1_b_pixelType_rsc_q),
      .line_buf1_b_pixelType_rsc_we(line_buf1_b_pixelType_rsc_we),
      .line_buf1_b_pixelType_rsc_d(line_buf1_b_pixelType_rsc_d),
      .line_buf1_b_pixelType_rsc_adr(line_buf1_b_pixelType_rsc_adr)
    );
  assign dat_rgb_rsc_dat = {dat_rgb_rsc_dat_eol , dat_rgb_rsc_dat_sof , dat_rgb_rsc_dat_dummy
      , dat_rgb_rsc_dat_b_pixelType , dat_rgb_rsc_dat_g_pixelType , dat_rgb_rsc_dat_r_pixelType};
endmodule




//------> /usr/mentor/Catapult/2023.2/Mgc_home/pkgs/siflibs/ccs_genreg_v1.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------

module ccs_genreg_v1 (clk, en, arst, srst, d, z);
    parameter integer width   = 1;
    parameter integer ph_clk  = 1;
    parameter integer ph_en   = 1;
    parameter integer ph_arst = 0;
    parameter integer ph_srst = 1;
    parameter         has_en  = 1'b1;

    input clk;
    input en;
    input arst;
    input srst;
    input      [width-1:0] d;
    output reg [width-1:0] z;

    //  Generate parameters
    //  ph_clk | ph_arst | has_en     Label:
    //    1        1          1       GEN_CLK1_ARST1_EN1
    //    1        1          0       GEN_CLK1_ARST1_EN0
    //    1        0          1       GEN_CLK1_ARST0_EN1
    //    1        0          0       GEN_CLK1_ARST0_EN0
    //    0        1          1       GEN_CLK0_ARST1_EN1
    //    0        1          0       GEN_CLK0_ARST1_EN0
    //    0        0          1       GEN_CLK0_ARST0_EN1
    //    0        0          0       GEN_CLK0_ARST0_EN0
    
    generate 
      // Pos edge clock, pos edge async reset, has enable
      if (ph_clk == 1 & ph_arst == 1 & has_en == 1)
      begin: GEN_CLK1_ARST1_EN1
        always @(posedge clk or posedge arst)
          if (arst == 1'b1)
            z <= {width{1'b0}};
          else if (srst == $unsigned(ph_srst))
            z <= {width{1'b0}};
          else if (en == $unsigned(ph_en))
            z <= d;
      end  //GEN_CLK1_ARST1_EN1

      // Pos edge clock, pos edge async reset, no enable
      else if (ph_clk == 1 & ph_arst == 1 & has_en == 0)
      begin: GEN_CLK1_ARST1_EN0
        always @(posedge clk or posedge arst)
          if (arst == 1'b1)
            z <= {width{1'b0}};
          else if (srst == $unsigned(ph_srst))
            z <= {width{1'b0}};
          else
            z <= d;
      end  //GEN_CLK1_ARST1_EN0

      // Pos edge clock, neg edge async reset, has enable
      else if (ph_clk == 1 & ph_arst == 0 & has_en == 1)
      begin: GEN_CLK1_ARST0_EN1
        always @(posedge clk or negedge arst)
          if (arst == 1'b0)
            z <= {width{1'b0}};
          else if (srst == $unsigned(ph_srst))
            z <= {width{1'b0}};
          else if (en == $unsigned(ph_en))
            z <= d;
      end  //GEN_CLK1_ARST0_EN1

      // Pos edge clock, neg edge async reset, no enable
      else if (ph_clk == 1 & ph_arst == 0 & has_en == 0)
      begin: GEN_CLK1_ARST0_EN0
        always @(posedge clk or negedge arst)
          if (arst == 1'b0)
            z <= {width{1'b0}};
          else if (srst == $unsigned(ph_srst))
            z <= {width{1'b0}};
          else
            z <= d;
      end  //GEN_CLK1_ARST0_EN0


      // Neg edge clock, pos edge async reset, has enable
      if (ph_clk == 0 & ph_arst == 1 & has_en == 1)
      begin: GEN_CLK0_ARST1_EN1
        always @(negedge clk or posedge arst)
          if (arst == 1'b1)
            z <= {width{1'b0}};
          else if (srst == $unsigned(ph_srst))
            z <= {width{1'b0}};
          else if (en == $unsigned(ph_en))
            z <= d;
      end  //GEN_CLK0_ARST1_EN1

      // Neg edge clock, pos edge async reset, no enable
      else if (ph_clk == 0 & ph_arst == 1 & has_en == 0)
      begin: GEN_CLK0_ARST1_EN0
        always @(negedge clk or posedge arst)
          if (arst == 1'b1)
            z <= {width{1'b0}};
          else if (srst == $unsigned(ph_srst))
            z <= {width{1'b0}};
          else
            z <= d;
      end  //GEN_CLK0_ARST1_EN0

      // Neg edge clock, neg edge async reset, has enable
      else if (ph_clk == 0 & ph_arst == 0 & has_en == 1)
      begin: GEN_CLK0_ARST0_EN1
        always @(negedge clk or negedge arst)
          if (arst == 1'b0)
            z <= {width{1'b0}};
          else if (srst == $unsigned(ph_srst))
            z <= {width{1'b0}};
          else if (en == $unsigned(ph_en))
            z <= d;
      end  //GEN_CLK0_ARST0_EN1

      // Neg edge clock, neg edge async reset, no enable
      else if (ph_clk == 0 & ph_arst == 0 & has_en == 0)
      begin: GEN_CLK0_ARST0_EN0
        always @(negedge clk or negedge arst)
          if (arst == 1'b0)
            z <= {width{1'b0}};
          else if (srst == $unsigned(ph_srst))
            z <= {width{1'b0}};
          else
            z <= d;
      end  //GEN_CLK0_ARST0_EN0
    endgenerate
endmodule


//------> /usr/mentor/Catapult/2023.2/Mgc_home/pkgs/siflibs/ccs_fifo_wait_core_v5.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------

/*
 *            _________________________________________________
 * WRITER    |                                                 |   READER
 *           |               ccs_fifo_wait_core                |
 *           |             _____________________               |
 *        --<|  din_rdy --<|  ---------------- <|--- dout_rdy <|---
 *           |             |       FIFO         |              |
 *        ---|> din_vld ---|> ----------------  |>-- dout_vld  |>--
 *        ---|>     din ---|> ----------------  |>-- dout      |>--
 *           |             |____________________|              |
 *           |_________________________________________________|
 *
 *    rdy    - can be considered as a notFULL signal
 *    vld    - can be considered as a notEMPTY signal
 *    is_idle - clk can be safely gated
 *
 * Change History:
 *    2019-01-24 - Add assertion to verify rdy signal behavior under reset.
 *                 Fix bug in that behavior.
 */

module ccs_fifo_wait_core_v5 (clk, en, arst, srst, din_vld, din_rdy, din, dout_vld, dout_rdy, dout, sd, is_idle);

    parameter integer rscid    = 0;     // resource ID
    parameter integer width    = 8;     // fifo width
    parameter integer sz_width = 8;     // size of port for elements in fifo
    parameter integer fifo_sz  = 8;     // fifo depth
    parameter integer ph_clk   = 1;     // clock polarity 1=rising edge, 0=falling edge
    parameter integer ph_en    = 1;     // clock enable polarity
    parameter integer ph_arst  = 1;     // async reset polarity
    parameter integer ph_srst  = 1;     // sync reset polarity
    parameter integer ph_log2  = 3;     // log2(fifo_sz)

    input                 clk;
    input                 en;
    input                 arst;
    input                 srst;
    input                 din_vld;    // writer has valid data
    output                din_rdy;    // fifo ready for data (not full)
    input  [width-1:0]    din;
    output                dout_vld;   // fifo has valid data (not empty)
    input                 dout_rdy;   // reader ready for data
    output [width-1:0]    dout;
    output [sz_width-1:0] sd;
    output                is_idle;

    localparam integer fifo_b  = width * fifo_sz;
    localparam integer fifo_mx = (fifo_sz > 0) ? (fifo_sz-1) : 0 ;
    localparam integer fifo_mx_over_8 = fifo_mx / 8 ;

    reg      [fifo_mx:0] stat_pre;
    wire     [fifo_mx:0] stat;
    reg      [( (fifo_b > 0) ? fifo_b : 1)-1:0] buff_pre;
    wire     [( (fifo_b > 0) ? fifo_b : 1)-1:0] buff;
    reg      [fifo_mx:0] en_l;
    reg      [fifo_mx_over_8:0] en_l_s;

    reg      [width-1:0] buff_nxt;

    reg                  stat_nxt;
    reg                  stat_behind;
    reg                  stat_ahead;
    reg                  stat_tail;
    reg                  en_l_var;

    integer              i;
    genvar               eni;

    wire [32:0]          size_t;
    reg  [31:0]          count;
    reg  [31:0]          count_t;
    reg  [32:0]          n_elem;
    wire                 din_rdy_drv;
    wire                 dout_vld_drv;
    wire                 din_vld_int;
    wire                 hs_init;
    wire                 active;
    wire                 is_idle_drv;

    // synopsys translate_off
    reg  [31:0]          peak;
    initial
    begin
      peak  = 32'b0;
    end
    // synopsys translate_on

    assign din_rdy = din_rdy_drv;
    assign dout_vld = dout_vld_drv;
    assign is_idle = is_idle_drv;

    generate
    if ( fifo_sz > 0 )
    begin: FIFO_REG
      assign din_vld_int = din_vld & hs_init;
      assign din_rdy_drv = (dout_rdy | (~stat[0])) & hs_init;
      assign dout_vld_drv = din_vld_int | stat[fifo_sz-1];

      assign active = (din_vld_int & din_rdy_drv) | (dout_rdy & dout_vld_drv);
      assign is_idle_drv = (~active) & hs_init;

      assign size_t = (count - {31'b0, (dout_rdy & stat[fifo_sz-1])}) + {31'b0, din_vld_int};
      assign sd = size_t[sz_width-1:0];

      assign dout = (stat[fifo_sz-1]) ? buff[fifo_b-1:width*(fifo_sz-1)] : din;

      always @(*)
      begin: FIFOPROC
        n_elem = 33'b0;
        for (i = fifo_sz-1; i >= 0; i = i - 1)
        begin
          stat_behind = (i != 0) ? stat[i-1] : 1'b0;
          stat_ahead  = (i != (fifo_sz-1)) ? stat[i+1] : 1'b1;

          // Determine if this buffer element will have data
          stat_nxt = stat_ahead &                       // valid element ahead of this one (or head)
                       (stat_behind                     // valid element behind this one
                         | (stat[i] & (~dout_rdy))      // valid element and output not ready (in use and not shifted)
                         | (stat[i] & din_vld_int)      // valid element and input has data
                         | (din_vld_int & (~dout_rdy))  // input has data and output not ready
                       );
          stat_pre[i] = stat_nxt;

          // First empty elem when not shifting or last valid elem after shifting (assumes stat_behind == 0)
          stat_tail = stat_ahead & (((~stat[i]) & (~dout_rdy)) | (stat[i] & dout_rdy));

          if (dout_rdy & stat_behind)
          begin
            // shift valid element
            buff_nxt[0+:width] = buff[width*(i-1)+:width];
            en_l_var = 1'b1;
          end
          else if (din_vld_int & stat_tail)
          begin
            // update tail with input data
            buff_nxt = din;
            en_l_var = 1'b1;
          end
          else
          begin
            // no-op, disable register
            buff_nxt = din; // Don't care input to disabled flop
            en_l_var = 1'b0;
          end
          buff_pre[width*i+:width] = buff_nxt[0+:width];

          if (ph_en != 0)
            en_l[i] = en & en_l_var;
          else
            en_l[i] = en | ~en_l_var;

          if ((stat_ahead == 1'b1) & (stat[i] == 1'b0))
            //found tail, update the number of elements for count
            n_elem = ($unsigned(fifo_sz) - 1) - $unsigned(i);
        end //for loop

        // Enable for stat registers (partitioned into banks of eight)
        // Take care of the head first
        if (ph_en != 0)
          en_l_s[(((fifo_sz > 0) ? fifo_sz : 1)-1)/8] = en & active;
        else
          en_l_s[(((fifo_sz > 0) ? fifo_sz : 1)-1)/8] = en | ~active;

        // Now every eight
        for (i = fifo_sz-1; i >= 7; i = i - 1)
        begin
          if (($unsigned(i) % 32'd8) == 0)
          begin
            if (ph_en != 0)
              en_l_s[(i/8)-1] = en & (stat[i]) & (active);
            else
              en_l_s[(i/8)-1] = (en) | (~stat[i]) | (~active);
          end
        end

        // Update count and peak
        if ( stat[fifo_sz-1] == 1'b0 )
          count_t = 32'b0;
        else if ( stat[0] == 1'b1 )
          count_t = fifo_sz;
        else
          count_t = n_elem[31:0];
        count = count_t;
        // synopsys translate_off
        peak = (peak < count) ? count : peak;
        // synopsys translate_on
      end //FIFOPROC

      // Handshake valid after reset
      ccs_genreg_v1
      #(
        .width   (1),
        .ph_clk  (ph_clk),
        .ph_en   (1),
        .ph_arst (ph_arst),
        .ph_srst (ph_srst),
        .has_en  (1'b0)
      )
      HS_INIT_REG
      (
        .clk     (clk),
        .en      (1'b1),
        .arst    (arst),
        .srst    (srst),
        .d       (1'b1),
        .z       (hs_init)
      );

      // Buffer and status registers
      for (eni = fifo_sz-1; eni >= 0; eni = eni - 1)
      begin: GEN_REGS
        ccs_genreg_v1
        #(
          .width   (1),
          .ph_clk  (ph_clk),
          .ph_en   (ph_en),
          .ph_arst (ph_arst),
          .ph_srst (ph_srst),
          .has_en  (1'b1)
        )
        STATREG
        (
          .clk     (clk),
          .en      (en_l_s[eni/8]),
          .arst    (arst),
          .srst    (srst),
          .d       (stat_pre[eni]),
          .z       (stat[eni])
        );

        ccs_genreg_v1
        #(
          .width   (width),
          .ph_clk  (ph_clk),
          .ph_en   (ph_en),
          .ph_arst (ph_arst),
          .ph_srst (ph_srst),
          .has_en  (1'b1)
        )
        BUFREG
        (
          .clk     (clk),
          .en      (en_l[eni]),
          .arst    (arst),
          .srst    (srst),
          .d       (buff_pre[width*eni+:width]),
          .z       (buff[width*eni+:width])
        );
      end

    end
    else
    begin: FEED_THRU
      assign din_rdy_drv  = dout_rdy;
      assign dout_vld_drv = din_vld;
      assign dout     = din;
      // non-blocking is not II=1 when fifo_sz=0
      assign sd = {{(sz_width-1){1'b0}}, (din_vld & ~dout_rdy)};
      assign is_idle_drv = ~(din_vld & dout_rdy);
    end
    endgenerate

`ifdef RDY_ASRT
    generate
    if (ph_clk==1)
    begin: POS_CLK_ASSERT

       property rdyAsrt ;
         @(posedge clk) (srst==ph_srst) |=> (din_rdy==0);
       endproperty
       a1Pos: assert property(rdyAsrt);

       property rdyAsrtASync ;
         @(posedge clk) (arst==ph_arst) |-> (din_rdy==0);
       endproperty
       a2Pos: assert property(rdyAsrtASync);

    end else if (ph_clk==0)
    begin: NEG_CLK_ASSERT

       property rdyAsrt ;
         @(negedge clk) ((srst==ph_srst) || (arst==ph_arst)) |=> (din_rdy==0);
       endproperty
       a1Neg: assert property(rdyAsrt);

       property rdyAsrtASync ;
         @(negedge clk) (arst==ph_arst) |-> (din_rdy==0);
       endproperty
       a2Neg: assert property(rdyAsrtASync);

    end
    endgenerate
`endif

endmodule

//------> /usr/mentor/Catapult/2023.2/Mgc_home/pkgs/siflibs/ccs_pipe_v6.v 
//------------------------------------------------------------------------------
// Catapult Synthesis - Sample I/O Port Library
//
// Copyright (c) 2003-2017 Mentor Graphics Corp.
//       All Rights Reserved
//
// This document may be used and distributed without restriction provided that
// this copyright statement is not removed from the file and that any derivative
// work contains this copyright notice.
//
// The design information contained in this file is intended to be an example
// of the functionality which the end user may study in preparation for creating
// their own custom interfaces. This design does not necessarily present a 
// complete implementation of the named protocol or standard.
//
//------------------------------------------------------------------------------
/*
 *
 *            _______________________________________________
 * WRITER    |                                              |          READER
 *           |                 ccs_pipe                     |
 *           |            ______________________            |
 *        --<| din_rdy --<|  ---------------- <|---dout_rdy<|---
 *           |            |       FIFO         |            |
 *        ---|>din_vld ---|> ----------------  |>--dout_vld |>--
 *        ---|>din -------|> ----------------  |> -----dout |>--
 *           |            |____________________|            |
 *           |______________________________________________|
 *
 *    din_rdy     - can be considered as a notFULL signal
 *    dout_vld    - can be considered as a notEMPTY signal
 *    write_stall - an internal debug signal formed from din_vld & !din_rdy
 *    read_stall  - an internal debug signal formed from dout_rdy & !dout_vld
 *    is_idle     - indicates the clock can be safely gated
 *    stall_ctrl  - Stall the pipe(fifo).  Used by STALL_FLAG_SV directive
 */

module ccs_pipe_v6 (clk, en, arst, srst, din_rdy, din_vld, din, dout_rdy, dout_vld, dout, 
                    sz, sz_req, is_idle);

    parameter integer rscid    = 0; // resource ID
    parameter integer width    = 8; // fifo width
    parameter integer sz_width = 8; // width of size of elements in fifo
    parameter integer fifo_sz  = 8; // fifo depth
    parameter integer log2_sz  = 3; // log2(fifo_sz)
    parameter integer ph_clk   = 1; // clock polarity 1=rising edge, 0=falling edge
    parameter integer ph_en    = 1; // clock enable polarity
    parameter integer ph_arst  = 1; // async reset polarity
    parameter integer ph_srst  = 1; // sync reset polarity

    // clock 
    input              clk;
    input              en;
    input              arst;
    input              srst;

    // writer
    output             din_rdy;
    input              din_vld;
    input  [width-1:0] din;

    // reader
    input              dout_rdy;
    output             dout_vld;
    output [width-1:0] dout;

    // size
    output [sz_width-1:0] sz;
    input                 sz_req;
    output                is_idle;

    localparam stallOff = 0; 
    wire                  stall_ctrl;
    assign stall_ctrl = stallOff;
   
    // synopsys translate_off
    wire   write_stall;
    wire   read_stall;
    assign write_stall = (din_vld & !din_rdy) | stall_ctrl;
    assign read_stall  = (dout_rdy & !dout_vld) | stall_ctrl;
    // synopsys translate_on

    wire    tmp_din_rdy;
    assign  din_rdy = tmp_din_rdy & !stall_ctrl;
    wire    tmp_dout_vld;
    assign  dout_vld = tmp_dout_vld & !stall_ctrl;
   
    ccs_fifo_wait_core_v5
    #(
        .rscid    (rscid),
        .width    (width),
        .sz_width (sz_width),
        .fifo_sz  (fifo_sz),
        .ph_clk   (ph_clk),
        .ph_en    (ph_en),
        .ph_arst  (ph_arst),
        .ph_srst  (ph_srst),
        .ph_log2  (log2_sz)
    )
    FIFO
    (
        .clk      (clk),
        .en       (en),
        .arst     (arst),
        .srst     (srst),
        .din_vld  (din_vld & !stall_ctrl),
        .din_rdy  (tmp_din_rdy),
        .din      (din),
        .dout_vld (tmp_dout_vld),
        .dout_rdy (dout_rdy & !stall_ctrl),
        .dout     (dout),
        .sd       (sz),
        .is_idle  (is_idle)
    );

endmodule


//------> ./rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.2/1059873 Production Release
//  HLS Date:       Mon Aug  7 10:54:31 PDT 2023
// 
//  Generated by:   r2k41022@cad16
//  Generated date: Thu Jun 13 14:10:51 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    EdgeDetect_IP_EdgeDetect_Top
// ------------------------------------------------------------------


module EdgeDetect_IP_EdgeDetect_Top (
  clk, rst, arst_n, dat_in_rsc_dat, dat_in_rsc_vld, dat_in_rsc_rdy, widthIn, heightIn,
      dat_out_rsc_dat, dat_out_rsc_vld, dat_out_rsc_rdy, line_buf0_r_pixelType_rsc_en,
      line_buf0_r_pixelType_rsc_q, line_buf0_r_pixelType_rsc_we, line_buf0_r_pixelType_rsc_d,
      line_buf0_r_pixelType_rsc_adr, line_buf0_g_pixelType_rsc_en, line_buf0_g_pixelType_rsc_q,
      line_buf0_g_pixelType_rsc_we, line_buf0_g_pixelType_rsc_d, line_buf0_g_pixelType_rsc_adr,
      line_buf0_b_pixelType_rsc_en, line_buf0_b_pixelType_rsc_q, line_buf0_b_pixelType_rsc_we,
      line_buf0_b_pixelType_rsc_d, line_buf0_b_pixelType_rsc_adr, line_buf1_r_pixelType_rsc_en,
      line_buf1_r_pixelType_rsc_q, line_buf1_r_pixelType_rsc_we, line_buf1_r_pixelType_rsc_d,
      line_buf1_r_pixelType_rsc_adr, line_buf1_g_pixelType_rsc_en, line_buf1_g_pixelType_rsc_q,
      line_buf1_g_pixelType_rsc_we, line_buf1_g_pixelType_rsc_d, line_buf1_g_pixelType_rsc_adr,
      line_buf1_b_pixelType_rsc_en, line_buf1_b_pixelType_rsc_q, line_buf1_b_pixelType_rsc_we,
      line_buf1_b_pixelType_rsc_d, line_buf1_b_pixelType_rsc_adr
);
  input clk;
  input rst;
  input arst_n;
  input [33:0] dat_in_rsc_dat;
  input dat_in_rsc_vld;
  output dat_in_rsc_rdy;
  input [10:0] widthIn;
  input [9:0] heightIn;
  output [33:0] dat_out_rsc_dat;
  output dat_out_rsc_vld;
  input dat_out_rsc_rdy;
  output line_buf0_r_pixelType_rsc_en;
  input [15:0] line_buf0_r_pixelType_rsc_q;
  output line_buf0_r_pixelType_rsc_we;
  output [15:0] line_buf0_r_pixelType_rsc_d;
  output [9:0] line_buf0_r_pixelType_rsc_adr;
  output line_buf0_g_pixelType_rsc_en;
  input [15:0] line_buf0_g_pixelType_rsc_q;
  output line_buf0_g_pixelType_rsc_we;
  output [15:0] line_buf0_g_pixelType_rsc_d;
  output [9:0] line_buf0_g_pixelType_rsc_adr;
  output line_buf0_b_pixelType_rsc_en;
  input [15:0] line_buf0_b_pixelType_rsc_q;
  output line_buf0_b_pixelType_rsc_we;
  output [15:0] line_buf0_b_pixelType_rsc_d;
  output [9:0] line_buf0_b_pixelType_rsc_adr;
  output line_buf1_r_pixelType_rsc_en;
  input [11:0] line_buf1_r_pixelType_rsc_q;
  output line_buf1_r_pixelType_rsc_we;
  output [11:0] line_buf1_r_pixelType_rsc_d;
  output [9:0] line_buf1_r_pixelType_rsc_adr;
  output line_buf1_g_pixelType_rsc_en;
  input [11:0] line_buf1_g_pixelType_rsc_q;
  output line_buf1_g_pixelType_rsc_we;
  output [11:0] line_buf1_g_pixelType_rsc_d;
  output [9:0] line_buf1_g_pixelType_rsc_adr;
  output line_buf1_b_pixelType_rsc_en;
  input [11:0] line_buf1_b_pixelType_rsc_q;
  output line_buf1_b_pixelType_rsc_we;
  output [11:0] line_buf1_b_pixelType_rsc_d;
  output [9:0] line_buf1_b_pixelType_rsc_adr;


  // Interconnect Declarations
  wire [7:0] dat_out_rsc_dat_n_VerDer_inst;
  wire [33:0] dat_rgb_rsc_dat_n_VerDer_inst;
  wire [8:0] dy_rsc_dat_n_VerDer_inst;
  wire dy_rsc_rdy_n_VerDer_inst;
  wire line_buf0_r_pixelType_rsc_en_n_VerDer_inst;
  wire [15:0] line_buf0_r_pixelType_rsc_d_n_VerDer_inst;
  wire [9:0] line_buf0_r_pixelType_rsc_adr_n_VerDer_inst;
  wire line_buf0_g_pixelType_rsc_en_n_VerDer_inst;
  wire [15:0] line_buf0_g_pixelType_rsc_d_n_VerDer_inst;
  wire [9:0] line_buf0_g_pixelType_rsc_adr_n_VerDer_inst;
  wire line_buf0_b_pixelType_rsc_en_n_VerDer_inst;
  wire [15:0] line_buf0_b_pixelType_rsc_d_n_VerDer_inst;
  wire [9:0] line_buf0_b_pixelType_rsc_adr_n_VerDer_inst;
  wire line_buf1_r_pixelType_rsc_en_n_VerDer_inst;
  wire [11:0] line_buf1_r_pixelType_rsc_d_n_VerDer_inst;
  wire [9:0] line_buf1_r_pixelType_rsc_adr_n_VerDer_inst;
  wire line_buf1_g_pixelType_rsc_en_n_VerDer_inst;
  wire [11:0] line_buf1_g_pixelType_rsc_d_n_VerDer_inst;
  wire [9:0] line_buf1_g_pixelType_rsc_adr_n_VerDer_inst;
  wire line_buf1_b_pixelType_rsc_en_n_VerDer_inst;
  wire [11:0] line_buf1_b_pixelType_rsc_d_n_VerDer_inst;
  wire [9:0] line_buf1_b_pixelType_rsc_adr_n_VerDer_inst;
  wire [8:0] dx_rsc_dat_n_HorDer_inst;
  wire [8:0] dy_in_rsc_dat_n_MagAng_inst;
  wire dy_in_rsc_vld_n_MagAng_inst;
  wire [7:0] magn_rsc_dat_n_MagAng_inst;
  wire magn_rsc_rdy_n_MagAng_inst;
  wire [23:0] kmean_out_rsc_dat_n_Kmean_inst;
  wire [7:0] magn_rsc_dat_n_Mix_inst;
  wire magn_rsc_vld_n_Mix_inst;
  wire [33:0] rgb_out_rsc_dat_n_Mix_inst;
  wire dat_in_rsc_rdy_n_VerDer_inst_bud;
  wire dat_out_rsc_vld_n_VerDer_inst_bud;
  wire dat_in_rsc_rdy_n_HorDer_inst_bud;
  wire dat_rgb_rsc_vld_n_VerDer_inst_bud;
  wire kmean_in_rsc_rdy_n_Kmean_inst_bud;
  wire dy_rsc_vld_n_VerDer_inst_bud;
  wire dy_in_rsc_rdy_n_MagAng_inst_bud;
  wire line_buf0_r_pixelType_rsc_we_n_VerDer_inst_bud;
  wire line_buf0_g_pixelType_rsc_we_n_VerDer_inst_bud;
  wire line_buf0_b_pixelType_rsc_we_n_VerDer_inst_bud;
  wire line_buf1_r_pixelType_rsc_we_n_VerDer_inst_bud;
  wire line_buf1_g_pixelType_rsc_we_n_VerDer_inst_bud;
  wire line_buf1_b_pixelType_rsc_we_n_VerDer_inst_bud;
  wire dx_rsc_vld_n_HorDer_inst_bud;
  wire dx_in_rsc_rdy_n_MagAng_inst_bud;
  wire magn_rsc_vld_n_MagAng_inst_bud;
  wire magn_rsc_rdy_n_Mix_inst_bud;
  wire widthIn_triosy_lz_n_MagAng_inst_bud;
  wire heightIn_triosy_lz_n_MagAng_inst_bud;
  wire kmean_out_rsc_vld_n_Kmean_inst_bud;
  wire grb_in_rsc_rdy_n_Mix_inst_bud;
  wire rgb_out_rsc_vld_n_Mix_inst_bud;
  wire dy_unc_1;
  wire dy_idle;
  wire magn_unc_1;
  wire magn_idle;


  // Interconnect Declarations for Component Instantiations 
  ccs_pipe_v6 #(.rscid(32'sd36),
  .width(32'sd9),
  .sz_width(32'sd1),
  .fifo_sz(32'sd2),
  .log2_sz(32'sd1),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd1)) dy_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(rst),
      .din_rdy(dy_rsc_rdy_n_VerDer_inst),
      .din_vld(dy_rsc_vld_n_VerDer_inst_bud),
      .din(dy_rsc_dat_n_VerDer_inst),
      .dout_rdy(dy_in_rsc_rdy_n_MagAng_inst_bud),
      .dout_vld(dy_in_rsc_vld_n_MagAng_inst),
      .dout(dy_in_rsc_dat_n_MagAng_inst),
      .sz(dy_unc_1),
      .sz_req(1'b0),
      .is_idle(dy_idle)
    );
  ccs_pipe_v6 #(.rscid(32'sd41),
  .width(32'sd8),
  .sz_width(32'sd1),
  .fifo_sz(32'sd3),
  .log2_sz(32'sd2),
  .ph_clk(32'sd1),
  .ph_en(32'sd0),
  .ph_arst(32'sd0),
  .ph_srst(32'sd1)) magn_cns_pipe (
      .clk(clk),
      .en(1'b0),
      .arst(arst_n),
      .srst(rst),
      .din_rdy(magn_rsc_rdy_n_MagAng_inst),
      .din_vld(magn_rsc_vld_n_MagAng_inst_bud),
      .din(magn_rsc_dat_n_MagAng_inst),
      .dout_rdy(magn_rsc_rdy_n_Mix_inst_bud),
      .dout_vld(magn_rsc_vld_n_Mix_inst),
      .dout(magn_rsc_dat_n_Mix_inst),
      .sz(magn_unc_1),
      .sz_req(1'b0),
      .is_idle(magn_idle)
    );
  EdgeDetect_IP_EdgeDetect_VerDer VerDer_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dat_in_rsc_dat(dat_in_rsc_dat),
      .dat_in_rsc_vld(dat_in_rsc_vld),
      .dat_in_rsc_rdy(dat_in_rsc_rdy_n_VerDer_inst_bud),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .dat_out_rsc_dat(dat_out_rsc_dat_n_VerDer_inst),
      .dat_out_rsc_vld(dat_out_rsc_vld_n_VerDer_inst_bud),
      .dat_out_rsc_rdy(dat_in_rsc_rdy_n_HorDer_inst_bud),
      .dat_rgb_rsc_dat(dat_rgb_rsc_dat_n_VerDer_inst),
      .dat_rgb_rsc_vld(dat_rgb_rsc_vld_n_VerDer_inst_bud),
      .dat_rgb_rsc_rdy(kmean_in_rsc_rdy_n_Kmean_inst_bud),
      .dy_rsc_dat(dy_rsc_dat_n_VerDer_inst),
      .dy_rsc_vld(dy_rsc_vld_n_VerDer_inst_bud),
      .dy_rsc_rdy(dy_rsc_rdy_n_VerDer_inst),
      .line_buf0_r_pixelType_rsc_en(line_buf0_r_pixelType_rsc_en_n_VerDer_inst),
      .line_buf0_r_pixelType_rsc_q(line_buf0_r_pixelType_rsc_q),
      .line_buf0_r_pixelType_rsc_we(line_buf0_r_pixelType_rsc_we_n_VerDer_inst_bud),
      .line_buf0_r_pixelType_rsc_d(line_buf0_r_pixelType_rsc_d_n_VerDer_inst),
      .line_buf0_r_pixelType_rsc_adr(line_buf0_r_pixelType_rsc_adr_n_VerDer_inst),
      .line_buf0_g_pixelType_rsc_en(line_buf0_g_pixelType_rsc_en_n_VerDer_inst),
      .line_buf0_g_pixelType_rsc_q(line_buf0_g_pixelType_rsc_q),
      .line_buf0_g_pixelType_rsc_we(line_buf0_g_pixelType_rsc_we_n_VerDer_inst_bud),
      .line_buf0_g_pixelType_rsc_d(line_buf0_g_pixelType_rsc_d_n_VerDer_inst),
      .line_buf0_g_pixelType_rsc_adr(line_buf0_g_pixelType_rsc_adr_n_VerDer_inst),
      .line_buf0_b_pixelType_rsc_en(line_buf0_b_pixelType_rsc_en_n_VerDer_inst),
      .line_buf0_b_pixelType_rsc_q(line_buf0_b_pixelType_rsc_q),
      .line_buf0_b_pixelType_rsc_we(line_buf0_b_pixelType_rsc_we_n_VerDer_inst_bud),
      .line_buf0_b_pixelType_rsc_d(line_buf0_b_pixelType_rsc_d_n_VerDer_inst),
      .line_buf0_b_pixelType_rsc_adr(line_buf0_b_pixelType_rsc_adr_n_VerDer_inst),
      .line_buf1_r_pixelType_rsc_en(line_buf1_r_pixelType_rsc_en_n_VerDer_inst),
      .line_buf1_r_pixelType_rsc_q(line_buf1_r_pixelType_rsc_q),
      .line_buf1_r_pixelType_rsc_we(line_buf1_r_pixelType_rsc_we_n_VerDer_inst_bud),
      .line_buf1_r_pixelType_rsc_d(line_buf1_r_pixelType_rsc_d_n_VerDer_inst),
      .line_buf1_r_pixelType_rsc_adr(line_buf1_r_pixelType_rsc_adr_n_VerDer_inst),
      .line_buf1_g_pixelType_rsc_en(line_buf1_g_pixelType_rsc_en_n_VerDer_inst),
      .line_buf1_g_pixelType_rsc_q(line_buf1_g_pixelType_rsc_q),
      .line_buf1_g_pixelType_rsc_we(line_buf1_g_pixelType_rsc_we_n_VerDer_inst_bud),
      .line_buf1_g_pixelType_rsc_d(line_buf1_g_pixelType_rsc_d_n_VerDer_inst),
      .line_buf1_g_pixelType_rsc_adr(line_buf1_g_pixelType_rsc_adr_n_VerDer_inst),
      .line_buf1_b_pixelType_rsc_en(line_buf1_b_pixelType_rsc_en_n_VerDer_inst),
      .line_buf1_b_pixelType_rsc_q(line_buf1_b_pixelType_rsc_q),
      .line_buf1_b_pixelType_rsc_we(line_buf1_b_pixelType_rsc_we_n_VerDer_inst_bud),
      .line_buf1_b_pixelType_rsc_d(line_buf1_b_pixelType_rsc_d_n_VerDer_inst),
      .line_buf1_b_pixelType_rsc_adr(line_buf1_b_pixelType_rsc_adr_n_VerDer_inst)
    );
  EdgeDetect_IP_EdgeDetect_HorDer HorDer_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dat_in_rsc_dat(dat_out_rsc_dat_n_VerDer_inst),
      .dat_in_rsc_vld(dat_out_rsc_vld_n_VerDer_inst_bud),
      .dat_in_rsc_rdy(dat_in_rsc_rdy_n_HorDer_inst_bud),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .dx_rsc_dat(dx_rsc_dat_n_HorDer_inst),
      .dx_rsc_vld(dx_rsc_vld_n_HorDer_inst_bud),
      .dx_rsc_rdy(dx_in_rsc_rdy_n_MagAng_inst_bud)
    );
  EdgeDetect_IP_EdgeDetect_MagAng MagAng_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .dx_in_rsc_dat(dx_rsc_dat_n_HorDer_inst),
      .dx_in_rsc_vld(dx_rsc_vld_n_HorDer_inst_bud),
      .dx_in_rsc_rdy(dx_in_rsc_rdy_n_MagAng_inst_bud),
      .dy_in_rsc_dat(dy_in_rsc_dat_n_MagAng_inst),
      .dy_in_rsc_vld(dy_in_rsc_vld_n_MagAng_inst),
      .dy_in_rsc_rdy(dy_in_rsc_rdy_n_MagAng_inst_bud),
      .widthIn_rsc_dat(11'b00000000000),
      .widthIn_triosy_lz(widthIn_triosy_lz_n_MagAng_inst_bud),
      .heightIn_rsc_dat(10'b0000000000),
      .heightIn_triosy_lz(heightIn_triosy_lz_n_MagAng_inst_bud),
      .magn_rsc_dat(magn_rsc_dat_n_MagAng_inst),
      .magn_rsc_vld(magn_rsc_vld_n_MagAng_inst_bud),
      .magn_rsc_rdy(magn_rsc_rdy_n_MagAng_inst)
    );
  EdgeDetect_IP_Kmean Kmean_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .kmean_in_rsc_dat(dat_rgb_rsc_dat_n_VerDer_inst),
      .kmean_in_rsc_vld(dat_rgb_rsc_vld_n_VerDer_inst_bud),
      .kmean_in_rsc_rdy(kmean_in_rsc_rdy_n_Kmean_inst_bud),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .kmean_out_rsc_dat(kmean_out_rsc_dat_n_Kmean_inst),
      .kmean_out_rsc_vld(kmean_out_rsc_vld_n_Kmean_inst_bud),
      .kmean_out_rsc_rdy(grb_in_rsc_rdy_n_Mix_inst_bud)
    );
  EdgeDetect_IP_Mix Mix_inst (
      .clk(clk),
      .rst(rst),
      .arst_n(arst_n),
      .grb_in_rsc_dat(kmean_out_rsc_dat_n_Kmean_inst),
      .grb_in_rsc_vld(kmean_out_rsc_vld_n_Kmean_inst_bud),
      .grb_in_rsc_rdy(grb_in_rsc_rdy_n_Mix_inst_bud),
      .widthIn(widthIn),
      .heightIn(heightIn),
      .magn_rsc_dat(magn_rsc_dat_n_Mix_inst),
      .magn_rsc_vld(magn_rsc_vld_n_Mix_inst),
      .magn_rsc_rdy(magn_rsc_rdy_n_Mix_inst_bud),
      .rgb_out_rsc_dat(rgb_out_rsc_dat_n_Mix_inst),
      .rgb_out_rsc_vld(rgb_out_rsc_vld_n_Mix_inst_bud),
      .rgb_out_rsc_rdy(dat_out_rsc_rdy)
    );
  assign dat_in_rsc_rdy = dat_in_rsc_rdy_n_VerDer_inst_bud;
  assign line_buf0_r_pixelType_rsc_en = line_buf0_r_pixelType_rsc_en_n_VerDer_inst;
  assign line_buf0_r_pixelType_rsc_we = line_buf0_r_pixelType_rsc_we_n_VerDer_inst_bud;
  assign line_buf0_r_pixelType_rsc_d = line_buf0_r_pixelType_rsc_d_n_VerDer_inst;
  assign line_buf0_r_pixelType_rsc_adr = line_buf0_r_pixelType_rsc_adr_n_VerDer_inst;
  assign line_buf0_g_pixelType_rsc_en = line_buf0_g_pixelType_rsc_en_n_VerDer_inst;
  assign line_buf0_g_pixelType_rsc_we = line_buf0_g_pixelType_rsc_we_n_VerDer_inst_bud;
  assign line_buf0_g_pixelType_rsc_d = line_buf0_g_pixelType_rsc_d_n_VerDer_inst;
  assign line_buf0_g_pixelType_rsc_adr = line_buf0_g_pixelType_rsc_adr_n_VerDer_inst;
  assign line_buf0_b_pixelType_rsc_en = line_buf0_b_pixelType_rsc_en_n_VerDer_inst;
  assign line_buf0_b_pixelType_rsc_we = line_buf0_b_pixelType_rsc_we_n_VerDer_inst_bud;
  assign line_buf0_b_pixelType_rsc_d = line_buf0_b_pixelType_rsc_d_n_VerDer_inst;
  assign line_buf0_b_pixelType_rsc_adr = line_buf0_b_pixelType_rsc_adr_n_VerDer_inst;
  assign line_buf1_r_pixelType_rsc_en = line_buf1_r_pixelType_rsc_en_n_VerDer_inst;
  assign line_buf1_r_pixelType_rsc_we = line_buf1_r_pixelType_rsc_we_n_VerDer_inst_bud;
  assign line_buf1_r_pixelType_rsc_d = line_buf1_r_pixelType_rsc_d_n_VerDer_inst;
  assign line_buf1_r_pixelType_rsc_adr = line_buf1_r_pixelType_rsc_adr_n_VerDer_inst;
  assign line_buf1_g_pixelType_rsc_en = line_buf1_g_pixelType_rsc_en_n_VerDer_inst;
  assign line_buf1_g_pixelType_rsc_we = line_buf1_g_pixelType_rsc_we_n_VerDer_inst_bud;
  assign line_buf1_g_pixelType_rsc_d = line_buf1_g_pixelType_rsc_d_n_VerDer_inst;
  assign line_buf1_g_pixelType_rsc_adr = line_buf1_g_pixelType_rsc_adr_n_VerDer_inst;
  assign line_buf1_b_pixelType_rsc_en = line_buf1_b_pixelType_rsc_en_n_VerDer_inst;
  assign line_buf1_b_pixelType_rsc_we = line_buf1_b_pixelType_rsc_we_n_VerDer_inst_bud;
  assign line_buf1_b_pixelType_rsc_d = line_buf1_b_pixelType_rsc_d_n_VerDer_inst;
  assign line_buf1_b_pixelType_rsc_adr = line_buf1_b_pixelType_rsc_adr_n_VerDer_inst;
  assign dat_out_rsc_vld = rgb_out_rsc_vld_n_Mix_inst_bud;
  assign dat_out_rsc_dat = rgb_out_rsc_dat_n_Mix_inst;
endmodule




